{"ast":null,"code":"import { Component, ElementRef, Input, Directive, NgZone, Optional, Inject, EventEmitter, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Output, ViewChild, ContentChildren, TemplateRef, Host, Self, InjectionToken, ContentChild, QueryList, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { reqAnimFrame } from 'ng-zorro-antd/core/polyfill';\nimport { FocusKeyManager, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, SPACE, ENTER, DOWN_ARROW, RIGHT_ARROW, UP_ARROW, LEFT_ARROW } from '@angular/cdk/keycodes';\nimport { ViewportRuler } from '@angular/cdk/overlay';\nimport { animationFrameScheduler, asapScheduler, Subject, of, merge, fromEvent, Subscription } from 'rxjs';\nimport { takeUntil, auditTime, startWith, first, filter, delay } from 'rxjs/operators';\nimport { NzResizeObserver } from 'ng-zorro-antd/cdk/resize-observer';\nimport { __decorate } from 'tslib';\nimport { InputBoolean, wrapIntoObservable } from 'ng-zorro-antd/core/util';\nimport { RouterLink, RouterLinkWithHref, NavigationEnd, Router } from '@angular/router';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { CommonModule } from '@angular/common';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzDropDownModule } from 'ng-zorro-antd/dropdown';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { NzConfigService, WithConfig } from 'ng-zorro-antd/core/config';\nimport { PREFIX } from 'ng-zorro-antd/core/logger';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'ng-zorro-antd/core/outlet';\nimport * as ɵngcc2 from 'ng-zorro-antd/icon';\nimport * as ɵngcc3 from 'ng-zorro-antd/dropdown';\nimport * as ɵngcc4 from '@angular/common';\nimport * as ɵngcc5 from 'ng-zorro-antd/menu';\nimport * as ɵngcc6 from '@angular/cdk/overlay';\nimport * as ɵngcc7 from 'ng-zorro-antd/cdk/resize-observer';\nimport * as ɵngcc8 from '@angular/cdk/bidi';\nimport * as ɵngcc9 from '@angular/router';\nimport * as ɵngcc10 from 'ng-zorro-antd/core/config';\nimport * as ɵngcc11 from '@angular/cdk/a11y';\n\nfunction NzTabAddButtonComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelement(1, \"i\", 1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const icon_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzType\", icon_r1);\n  }\n}\n\nfunction NzTabNavOperationComponent_ul_5_li_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const item_r5 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", item_r5.tab.label, \" \");\n  }\n}\n\nconst _c0 = function () {\n  return {\n    visible: false\n  };\n};\n\nfunction NzTabNavOperationComponent_ul_5_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 8);\n    ɵngcc0.ɵɵlistener(\"click\", function NzTabNavOperationComponent_ul_5_li_1_Template_li_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9);\n      const item_r5 = restoredCtx.$implicit;\n      const ctx_r8 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r8.onSelect(item_r5);\n    })(\"contextmenu\", function NzTabNavOperationComponent_ul_5_li_1_Template_li_contextmenu_0_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9);\n      const item_r5 = restoredCtx.$implicit;\n      const ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r10.onContextmenu(item_r5, $event);\n    });\n    ɵngcc0.ɵɵtemplate(1, NzTabNavOperationComponent_ul_5_li_1_ng_container_1_Template, 2, 1, \"ng-container\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r5 = ctx.$implicit;\n    ɵngcc0.ɵɵclassProp(\"ant-tabs-dropdown-menu-item-disabled\", item_r5.disabled);\n    ɵngcc0.ɵɵproperty(\"nzSelected\", item_r5.active)(\"nzDisabled\", item_r5.disabled);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzStringTemplateOutlet\", item_r5.tab.label)(\"nzStringTemplateOutletContext\", ɵngcc0.ɵɵpureFunction0(6, _c0));\n  }\n}\n\nfunction NzTabNavOperationComponent_ul_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"ul\", 6);\n    ɵngcc0.ɵɵtemplate(1, NzTabNavOperationComponent_ul_5_li_1_Template, 2, 7, \"li\", 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r2.items);\n  }\n}\n\nfunction NzTabNavOperationComponent_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 10);\n    ɵngcc0.ɵɵlistener(\"click\", function NzTabNavOperationComponent_button_6_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.addClicked.emit();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"addIcon\", ctx_r3.addIcon);\n  }\n}\n\nconst _c1 = function () {\n  return {\n    minWidth: \"46px\"\n  };\n};\n\nconst _c2 = [\"navWarp\"];\nconst _c3 = [\"navList\"];\n\nfunction NzTabNavBarComponent_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 8);\n    ɵngcc0.ɵɵlistener(\"click\", function NzTabNavBarComponent_button_5_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.addClicked.emit();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"addIcon\", ctx_r2.addIcon);\n  }\n}\n\nfunction NzTabNavBarComponent_div_8_ng_template_1_Template(rf, ctx) {}\n\nfunction NzTabNavBarComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵtemplate(1, NzTabNavBarComponent_div_8_ng_template_1_Template, 0, 0, \"ng-template\", 10);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.extraTemplate);\n  }\n}\n\nconst _c4 = [\"*\"];\nconst _c5 = [\"nz-tab-body\", \"\"];\n\nfunction NzTabBodyComponent_ng_container_0_ng_template_1_Template(rf, ctx) {}\n\nfunction NzTabBodyComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTabBodyComponent_ng_container_0_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.content);\n  }\n}\n\nfunction NzTabCloseButtonComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelement(1, \"i\", 1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const icon_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzType\", icon_r1);\n  }\n}\n\nconst _c6 = [\"contentTemplate\"];\n\nfunction NzTabComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n  }\n}\n\nfunction NzTabComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 1);\n  }\n}\n\nconst _c7 = [[[\"\", \"nz-tab-link\", \"\"]], \"*\"];\nconst _c8 = [\"[nz-tab-link]\", \"*\"];\n\nfunction NzTabSetComponent_nz_tabs_nav_0_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const tab_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(tab_r3.label);\n  }\n}\n\nfunction NzTabSetComponent_nz_tabs_nav_0_div_1_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 10);\n    ɵngcc0.ɵɵlistener(\"click\", function NzTabSetComponent_nz_tabs_nav_0_div_1_button_3_Template_button_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      const i_r4 = ɵngcc0.ɵɵnextContext().index;\n      const ctx_r8 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r8.onClose(i_r4, $event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tab_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"closeIcon\", tab_r3.nzCloseIcon);\n  }\n}\n\nconst _c9 = function () {\n  return {\n    visible: true\n  };\n};\n\nfunction NzTabSetComponent_nz_tabs_nav_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6);\n    ɵngcc0.ɵɵlistener(\"click\", function NzTabSetComponent_nz_tabs_nav_0_div_1_Template_div_click_0_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r13);\n      const tab_r3 = restoredCtx.$implicit;\n      const i_r4 = restoredCtx.index;\n      const ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r12.clickNavItem(tab_r3, i_r4, $event);\n    })(\"contextmenu\", function NzTabSetComponent_nz_tabs_nav_0_div_1_Template_div_contextmenu_0_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r13);\n      const tab_r3 = restoredCtx.$implicit;\n      const ctx_r14 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r14.contextmenuNavItem(tab_r3, $event);\n    });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 7);\n    ɵngcc0.ɵɵtemplate(2, NzTabSetComponent_nz_tabs_nav_0_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 8);\n    ɵngcc0.ɵɵtemplate(3, NzTabSetComponent_nz_tabs_nav_0_div_1_button_3_Template, 1, 1, \"button\", 9);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tab_r3 = ctx.$implicit;\n    const i_r4 = ctx.index;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵstyleProp(\"margin-right\", ctx_r2.position === \"horizontal\" ? ctx_r2.nzTabBarGutter : null, \"px\")(\"margin-bottom\", ctx_r2.position === \"vertical\" ? ctx_r2.nzTabBarGutter : null, \"px\");\n    ɵngcc0.ɵɵclassProp(\"ant-tabs-tab-active\", ctx_r2.nzSelectedIndex === i_r4)(\"ant-tabs-tab-disabled\", tab_r3.nzDisabled);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"disabled\", tab_r3.nzDisabled)(\"tab\", tab_r3)(\"active\", ctx_r2.nzSelectedIndex === i_r4);\n    ɵngcc0.ɵɵattribute(\"tabIndex\", ctx_r2.getTabIndex(tab_r3, i_r4))(\"aria-disabled\", tab_r3.nzDisabled)(\"aria-selected\", ctx_r2.nzSelectedIndex === i_r4 && !ctx_r2.nzHideAll)(\"aria-controls\", ctx_r2.getTabContentId(i_r4));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzStringTemplateOutlet\", tab_r3.label)(\"nzStringTemplateOutletContext\", ɵngcc0.ɵɵpureFunction0(18, _c9));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", tab_r3.nzClosable && ctx_r2.closable && !tab_r3.nzDisabled);\n  }\n}\n\nfunction NzTabSetComponent_nz_tabs_nav_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"nz-tabs-nav\", 4);\n    ɵngcc0.ɵɵlistener(\"tabScroll\", function NzTabSetComponent_nz_tabs_nav_0_Template_nz_tabs_nav_tabScroll_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15.nzTabListScroll.emit($event);\n    })(\"selectFocusedIndex\", function NzTabSetComponent_nz_tabs_nav_0_Template_nz_tabs_nav_selectFocusedIndex_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      const ctx_r17 = ɵngcc0.ɵɵnextContext();\n      return ctx_r17.setSelectedIndex($event);\n    })(\"addClicked\", function NzTabSetComponent_nz_tabs_nav_0_Template_nz_tabs_nav_addClicked_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      const ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.onAdd();\n    });\n    ɵngcc0.ɵɵtemplate(1, NzTabSetComponent_nz_tabs_nav_0_div_1_Template, 4, 19, \"div\", 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r0.nzTabBarStyle)(\"selectedIndex\", ctx_r0.nzSelectedIndex || 0)(\"inkBarAnimated\", ctx_r0.inkBarAnimated)(\"addable\", ctx_r0.addable)(\"addIcon\", ctx_r0.nzAddIcon)(\"hideBar\", ctx_r0.nzHideAll)(\"position\", ctx_r0.position)(\"extraTemplate\", ctx_r0.nzTabBarExtraContent);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.tabs);\n  }\n}\n\nfunction NzTabSetComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 11);\n  }\n\n  if (rf & 2) {\n    const tab_r19 = ctx.$implicit;\n    const i_r20 = ctx.index;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"active\", ctx_r1.nzSelectedIndex === i_r20 && !ctx_r1.nzHideAll)(\"content\", tab_r19.content)(\"forceRender\", tab_r19.nzForceRender)(\"tabPaneAnimated\", ctx_r1.tabPaneAnimated);\n  }\n}\n\nlet NzTabAddButtonComponent = /*#__PURE__*/(() => {\n  class NzTabAddButtonComponent {\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this.addIcon = 'plus';\n      this.element = this.elementRef.nativeElement;\n    }\n\n    getElementWidth() {\n      var _a;\n\n      return ((_a = this.element) === null || _a === void 0 ? void 0 : _a.offsetWidth) || 0;\n    }\n\n    getElementHeight() {\n      var _a;\n\n      return ((_a = this.element) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0;\n    }\n\n  }\n\n  NzTabAddButtonComponent.ɵfac = function NzTabAddButtonComponent_Factory(t) {\n    return new (t || NzTabAddButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  NzTabAddButtonComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NzTabAddButtonComponent,\n    selectors: [[\"nz-tab-add-button\"], [\"button\", \"nz-tab-add-button\", \"\"]],\n    hostAttrs: [\"aria-label\", \"Add tab\", \"type\", \"button\", 1, \"ant-tabs-nav-add\"],\n    inputs: {\n      addIcon: \"addIcon\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"nzStringTemplateOutlet\"], [\"nz-icon\", \"\", \"nzTheme\", \"outline\", 3, \"nzType\"]],\n    template: function NzTabAddButtonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NzTabAddButtonComponent_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx.addIcon);\n      }\n    },\n    directives: [ɵngcc1.NzStringTemplateOutletDirective, ɵngcc2.NzIconDirective],\n    encapsulation: 2\n  });\n  return NzTabAddButtonComponent;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzTabsInkBarDirective = /*#__PURE__*/(() => {\n  class NzTabsInkBarDirective {\n    constructor(elementRef, ngZone, animationMode) {\n      this.elementRef = elementRef;\n      this.ngZone = ngZone;\n      this.animationMode = animationMode;\n      this.position = 'horizontal';\n      this.animated = true;\n    }\n\n    get _animated() {\n      return this.animationMode !== 'NoopAnimations' && this.animated;\n    }\n\n    alignToElement(element) {\n      this.ngZone.runOutsideAngular(() => {\n        reqAnimFrame(() => this.setStyles(element));\n      });\n    }\n\n    setStyles(element) {\n      const inkBar = this.elementRef.nativeElement;\n\n      if (this.position === 'horizontal') {\n        inkBar.style.top = '';\n        inkBar.style.height = '';\n        inkBar.style.left = this.getLeftPosition(element);\n        inkBar.style.width = this.getElementWidth(element);\n      } else {\n        inkBar.style.left = '';\n        inkBar.style.width = '';\n        inkBar.style.top = this.getTopPosition(element);\n        inkBar.style.height = this.getElementHeight(element);\n      }\n    }\n\n    getLeftPosition(element) {\n      return element ? `${element.offsetLeft || 0}px` : '0';\n    }\n\n    getElementWidth(element) {\n      return element ? `${element.offsetWidth || 0}px` : '0';\n    }\n\n    getTopPosition(element) {\n      return element ? `${element.offsetTop || 0}px` : '0';\n    }\n\n    getElementHeight(element) {\n      return element ? `${element.offsetHeight || 0}px` : '0';\n    }\n\n  }\n\n  NzTabsInkBarDirective.ɵfac = function NzTabsInkBarDirective_Factory(t) {\n    return new (t || NzTabsInkBarDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  NzTabsInkBarDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NzTabsInkBarDirective,\n    selectors: [[\"nz-tabs-ink-bar\"], [\"\", \"nz-tabs-ink-bar\", \"\"]],\n    hostAttrs: [1, \"ant-tabs-ink-bar\"],\n    hostVars: 2,\n    hostBindings: function NzTabsInkBarDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tabs-ink-bar-animated\", ctx._animated);\n      }\n    },\n    inputs: {\n      position: \"position\",\n      animated: \"animated\"\n    }\n  });\n  return NzTabsInkBarDirective;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzTabNavItemDirective = /*#__PURE__*/(() => {\n  class NzTabNavItemDirective {\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this.disabled = false;\n      this.active = false;\n      this.el = elementRef.nativeElement;\n      this.parentElement = this.el.parentElement;\n    }\n\n    focus() {\n      this.el.focus();\n    }\n\n    get width() {\n      return this.parentElement.offsetWidth;\n    }\n\n    get height() {\n      return this.parentElement.offsetHeight;\n    }\n\n    get left() {\n      return this.parentElement.offsetLeft;\n    }\n\n    get top() {\n      return this.parentElement.offsetTop;\n    }\n\n  }\n\n  NzTabNavItemDirective.ɵfac = function NzTabNavItemDirective_Factory(t) {\n    return new (t || NzTabNavItemDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  NzTabNavItemDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NzTabNavItemDirective,\n    selectors: [[\"\", \"nzTabNavItem\", \"\"]],\n    inputs: {\n      disabled: \"disabled\",\n      active: \"active\",\n      tab: \"tab\"\n    }\n  });\n  return NzTabNavItemDirective;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzTabNavOperationComponent = /*#__PURE__*/(() => {\n  class NzTabNavOperationComponent {\n    constructor(cdr, elementRef) {\n      this.cdr = cdr;\n      this.elementRef = elementRef;\n      this.items = [];\n      this.addable = false;\n      this.addIcon = 'plus';\n      this.addClicked = new EventEmitter();\n      this.selected = new EventEmitter();\n      this.closeAnimationWaitTimeoutId = -1;\n      this.menuOpened = false;\n      this.element = this.elementRef.nativeElement;\n    }\n\n    onSelect(item) {\n      if (!item.disabled) {\n        // ignore nzCanDeactivate\n        item.tab.nzClick.emit();\n        this.selected.emit(item);\n      }\n    }\n\n    onContextmenu(item, e) {\n      if (!item.disabled) {\n        item.tab.nzContextmenu.emit(e);\n      }\n    }\n\n    showItems() {\n      clearTimeout(this.closeAnimationWaitTimeoutId);\n      this.menuOpened = true;\n      this.cdr.markForCheck();\n    }\n\n    menuVisChange(visible) {\n      if (!visible) {\n        this.closeAnimationWaitTimeoutId = setTimeout(() => {\n          this.menuOpened = false;\n          this.cdr.markForCheck();\n        }, 150);\n      }\n    }\n\n    getElementWidth() {\n      var _a;\n\n      return ((_a = this.element) === null || _a === void 0 ? void 0 : _a.offsetWidth) || 0;\n    }\n\n    getElementHeight() {\n      var _a;\n\n      return ((_a = this.element) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0;\n    }\n\n    ngOnDestroy() {\n      clearTimeout(this.closeAnimationWaitTimeoutId);\n    }\n\n  }\n\n  NzTabNavOperationComponent.ɵfac = function NzTabNavOperationComponent_Factory(t) {\n    return new (t || NzTabNavOperationComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  NzTabNavOperationComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NzTabNavOperationComponent,\n    selectors: [[\"nz-tab-nav-operation\"]],\n    hostAttrs: [1, \"ant-tabs-nav-operations\"],\n    hostVars: 2,\n    hostBindings: function NzTabNavOperationComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tabs-nav-operations-hidden\", ctx.items.length === 0);\n      }\n    },\n    inputs: {\n      items: \"items\",\n      addable: \"addable\",\n      addIcon: \"addIcon\"\n    },\n    outputs: {\n      addClicked: \"addClicked\",\n      selected: \"selected\"\n    },\n    exportAs: [\"nzTabNavOperation\"],\n    decls: 7,\n    vars: 6,\n    consts: [[\"nz-dropdown\", \"\", \"type\", \"button\", \"tabindex\", \"-1\", \"aria-hidden\", \"true\", \"nzOverlayClassName\", \"nz-tabs-dropdown\", 1, \"ant-tabs-nav-more\", 3, \"nzDropdownMenu\", \"nzOverlayStyle\", \"nzMatchWidthElement\", \"nzVisibleChange\", \"mouseenter\"], [\"dropdownTrigger\", \"nzDropdown\"], [\"nz-icon\", \"\", \"nzType\", \"ellipsis\"], [\"menu\", \"nzDropdownMenu\"], [\"nz-menu\", \"\", 4, \"ngIf\"], [\"nz-tab-add-button\", \"\", 3, \"addIcon\", \"click\", 4, \"ngIf\"], [\"nz-menu\", \"\"], [\"nz-menu-item\", \"\", \"class\", \"ant-tabs-dropdown-menu-item\", 3, \"ant-tabs-dropdown-menu-item-disabled\", \"nzSelected\", \"nzDisabled\", \"click\", \"contextmenu\", 4, \"ngFor\", \"ngForOf\"], [\"nz-menu-item\", \"\", 1, \"ant-tabs-dropdown-menu-item\", 3, \"nzSelected\", \"nzDisabled\", \"click\", \"contextmenu\"], [4, \"nzStringTemplateOutlet\", \"nzStringTemplateOutletContext\"], [\"nz-tab-add-button\", \"\", 3, \"addIcon\", \"click\"]],\n    template: function NzTabNavOperationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"nzVisibleChange\", function NzTabNavOperationComponent_Template_button_nzVisibleChange_0_listener($event) {\n          return ctx.menuVisChange($event);\n        })(\"mouseenter\", function NzTabNavOperationComponent_Template_button_mouseenter_0_listener() {\n          return ctx.showItems();\n        });\n        ɵngcc0.ɵɵelement(2, \"i\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"nz-dropdown-menu\", null, 3);\n        ɵngcc0.ɵɵtemplate(5, NzTabNavOperationComponent_ul_5_Template, 2, 1, \"ul\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(6, NzTabNavOperationComponent_button_6_Template, 1, 1, \"button\", 5);\n      }\n\n      if (rf & 2) {\n        const _r1 = ɵngcc0.ɵɵreference(4);\n\n        ɵngcc0.ɵɵproperty(\"nzDropdownMenu\", _r1)(\"nzOverlayStyle\", ɵngcc0.ɵɵpureFunction0(5, _c1))(\"nzMatchWidthElement\", null);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.menuOpened);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.addable);\n      }\n    },\n    directives: [ɵngcc3.NzDropDownDirective, ɵngcc2.NzIconDirective, ɵngcc3.NzDropdownMenuComponent, ɵngcc4.NgIf, ɵngcc5.NzMenuDirective, ɵngcc4.NgForOf, ɵngcc5.NzMenuItemDirective, ɵngcc1.NzStringTemplateOutletDirective, NzTabAddButtonComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzTabNavOperationComponent;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst RESIZE_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\nconst CSS_TRANSFORM_TIME = 150;\nlet NzTabNavBarComponent = /*#__PURE__*/(() => {\n  class NzTabNavBarComponent {\n    constructor(cdr, ngZone, viewportRuler, nzResizeObserver, dir) {\n      this.cdr = cdr;\n      this.ngZone = ngZone;\n      this.viewportRuler = viewportRuler;\n      this.nzResizeObserver = nzResizeObserver;\n      this.dir = dir;\n      this.indexFocused = new EventEmitter();\n      this.selectFocusedIndex = new EventEmitter();\n      this.addClicked = new EventEmitter();\n      this.tabScroll = new EventEmitter();\n      this.position = 'horizontal';\n      this.addable = false;\n      this.hideBar = false;\n      this.addIcon = 'plus';\n      this.inkBarAnimated = true;\n      this.translate = null;\n      this.transformX = 0;\n      this.transformY = 0;\n      this.pingLeft = false;\n      this.pingRight = false;\n      this.pingTop = false;\n      this.pingBottom = false;\n      this.hiddenItems = [];\n      this.destroy$ = new Subject();\n      this._selectedIndex = 0;\n      this.wrapperWidth = 0;\n      this.wrapperHeight = 0;\n      this.scrollListWidth = 0;\n      this.scrollListHeight = 0;\n      this.operationWidth = 0;\n      this.operationHeight = 0;\n      this.addButtonWidth = 0;\n      this.addButtonHeight = 0;\n      this.selectedIndexChanged = false;\n      this.lockAnimationTimeoutId = -1;\n      this.cssTransformTimeWaitingId = -1;\n    }\n\n    get selectedIndex() {\n      return this._selectedIndex;\n    }\n\n    set selectedIndex(value) {\n      const newValue = coerceNumberProperty(value);\n\n      if (this._selectedIndex !== newValue) {\n        this._selectedIndex = value;\n        this.selectedIndexChanged = true;\n\n        if (this.keyManager) {\n          this.keyManager.updateActiveItem(value);\n        }\n      }\n    }\n    /** Tracks which element has focus; used for keyboard navigation */\n\n\n    get focusIndex() {\n      return this.keyManager ? this.keyManager.activeItemIndex : 0;\n    }\n    /** When the focus index is set, we must manually send focus to the correct label */\n\n\n    set focusIndex(value) {\n      if (!this.isValidIndex(value) || this.focusIndex === value || !this.keyManager) {\n        return;\n      }\n\n      this.keyManager.setActiveItem(value);\n    }\n\n    get showAddButton() {\n      return this.hiddenItems.length === 0 && this.addable;\n    }\n\n    ngAfterViewInit() {\n      const dirChange = this.dir ? this.dir.change : of(null);\n      const resize = this.viewportRuler.change(150);\n\n      const realign = () => {\n        this.updateScrollListPosition();\n        this.alignInkBarToSelectedTab();\n      };\n\n      this.keyManager = new FocusKeyManager(this.items).withHorizontalOrientation(this.getLayoutDirection()).withWrap();\n      this.keyManager.updateActiveItem(this.selectedIndex);\n      reqAnimFrame(realign);\n      merge(this.nzResizeObserver.observe(this.navWarpRef), this.nzResizeObserver.observe(this.navListRef)).pipe(takeUntil(this.destroy$), auditTime(16, RESIZE_SCHEDULER)).subscribe(() => {\n        realign();\n      });\n      merge(dirChange, resize, this.items.changes).pipe(takeUntil(this.destroy$)).subscribe(() => {\n        Promise.resolve().then(realign);\n        this.keyManager.withHorizontalOrientation(this.getLayoutDirection());\n      });\n      this.keyManager.change.pipe(takeUntil(this.destroy$)).subscribe(newFocusIndex => {\n        this.indexFocused.emit(newFocusIndex);\n        this.setTabFocus(newFocusIndex);\n        this.scrollToTab(this.keyManager.activeItem);\n      });\n    }\n\n    ngAfterContentChecked() {\n      if (this.selectedIndexChanged) {\n        this.updateScrollListPosition();\n        this.alignInkBarToSelectedTab();\n        this.selectedIndexChanged = false;\n        this.cdr.markForCheck();\n      }\n    }\n\n    ngOnDestroy() {\n      clearTimeout(this.lockAnimationTimeoutId);\n      clearTimeout(this.cssTransformTimeWaitingId);\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n\n    onSelectedFromMenu(tab) {\n      const tabIndex = this.items.toArray().findIndex(e => e === tab);\n\n      if (tabIndex !== -1) {\n        this.keyManager.updateActiveItem(tabIndex);\n\n        if (this.focusIndex !== this.selectedIndex) {\n          this.selectFocusedIndex.emit(this.focusIndex);\n          this.scrollToTab(tab);\n        }\n      }\n    }\n\n    onOffsetChange(e) {\n      if (this.position === 'horizontal') {\n        if (this.lockAnimationTimeoutId === -1) {\n          if (this.transformX >= 0 && e.x > 0) {\n            return;\n          }\n\n          if (this.transformX <= this.wrapperWidth - this.scrollListWidth && e.x < 0) {\n            return;\n          }\n        }\n\n        e.event.preventDefault();\n        this.transformX = this.clampTransformX(this.transformX + e.x);\n        this.setTransform(this.transformX, 0);\n      } else {\n        if (this.lockAnimationTimeoutId === -1) {\n          if (this.transformY >= 0 && e.y > 0) {\n            return;\n          }\n\n          if (this.transformY <= this.wrapperHeight - this.scrollListHeight && e.y < 0) {\n            return;\n          }\n        }\n\n        e.event.preventDefault();\n        this.transformY = this.clampTransformY(this.transformY + e.y);\n        this.setTransform(0, this.transformY);\n      }\n\n      this.lockAnimation();\n      this.setVisibleRange();\n      this.setPingStatus();\n    }\n\n    handleKeydown(event) {\n      const inNavigationList = this.navWarpRef.nativeElement.contains(event.target);\n\n      if (hasModifierKey(event) || !inNavigationList) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        case LEFT_ARROW:\n        case UP_ARROW:\n        case RIGHT_ARROW:\n        case DOWN_ARROW:\n          this.lockAnimation();\n          this.keyManager.onKeydown(event);\n          break;\n\n        case ENTER:\n        case SPACE:\n          if (this.focusIndex !== this.selectedIndex) {\n            this.selectFocusedIndex.emit(this.focusIndex);\n          }\n\n          break;\n\n        default:\n          this.keyManager.onKeydown(event);\n      }\n    }\n\n    isValidIndex(index) {\n      if (!this.items) {\n        return true;\n      }\n\n      const tab = this.items ? this.items.toArray()[index] : null;\n      return !!tab && !tab.disabled;\n    }\n\n    scrollToTab(tab) {\n      if (!this.items.find(e => e === tab)) {\n        return;\n      }\n\n      const tabs = this.items.toArray();\n\n      if (this.position === 'horizontal') {\n        let newTransform = this.transformX;\n\n        if (this.getLayoutDirection() === 'rtl') {\n          const right = tabs[0].left + tabs[0].width - tab.left - tab.width;\n\n          if (right < this.transformX) {\n            newTransform = right;\n          } else if (right + tab.width > this.transformX + this.wrapperWidth) {\n            newTransform = right + tab.width - this.wrapperWidth;\n          }\n        } else if (tab.left < -this.transformX) {\n          newTransform = -tab.left;\n        } else if (tab.left + tab.width > -this.transformX + this.wrapperWidth) {\n          newTransform = -(tab.left + tab.width - this.wrapperWidth);\n        }\n\n        this.transformX = newTransform;\n        this.transformY = 0;\n        this.setTransform(newTransform, 0);\n      } else {\n        let newTransform = this.transformY;\n\n        if (tab.top < -this.transformY) {\n          newTransform = -tab.top;\n        } else if (tab.top + tab.height > -this.transformY + this.wrapperHeight) {\n          newTransform = -(tab.top + tab.height - this.wrapperHeight);\n        }\n\n        this.transformY = newTransform;\n        this.transformX = 0;\n        this.setTransform(0, newTransform);\n      }\n\n      clearTimeout(this.cssTransformTimeWaitingId);\n      this.cssTransformTimeWaitingId = setTimeout(() => {\n        this.setVisibleRange();\n      }, CSS_TRANSFORM_TIME);\n    }\n\n    lockAnimation() {\n      if (this.lockAnimationTimeoutId === -1) {\n        this.ngZone.runOutsideAngular(() => {\n          this.navListRef.nativeElement.style.transition = 'none';\n          this.lockAnimationTimeoutId = setTimeout(() => {\n            this.navListRef.nativeElement.style.transition = '';\n            this.lockAnimationTimeoutId = -1;\n          }, CSS_TRANSFORM_TIME);\n        });\n      }\n    }\n\n    setTransform(x, y) {\n      this.navListRef.nativeElement.style.transform = `translate(${x}px, ${y}px)`;\n    }\n\n    clampTransformX(transform) {\n      const scrollWidth = this.wrapperWidth - this.scrollListWidth;\n\n      if (this.getLayoutDirection() === 'rtl') {\n        return Math.max(Math.min(scrollWidth, transform), 0);\n      } else {\n        return Math.min(Math.max(scrollWidth, transform), 0);\n      }\n    }\n\n    clampTransformY(transform) {\n      return Math.min(Math.max(this.wrapperHeight - this.scrollListHeight, transform), 0);\n    }\n\n    updateScrollListPosition() {\n      this.resetSizes();\n      this.transformX = this.clampTransformX(this.transformX);\n      this.transformY = this.clampTransformY(this.transformY);\n      this.setVisibleRange();\n      this.setPingStatus();\n\n      if (this.keyManager) {\n        this.keyManager.updateActiveItem(this.keyManager.activeItemIndex);\n\n        if (this.keyManager.activeItem) {\n          this.scrollToTab(this.keyManager.activeItem);\n        }\n      }\n    }\n\n    resetSizes() {\n      this.addButtonWidth = this.addBtnRef ? this.addBtnRef.getElementWidth() : 0;\n      this.addButtonHeight = this.addBtnRef ? this.addBtnRef.getElementHeight() : 0;\n      this.operationWidth = this.operationRef.getElementWidth();\n      this.operationHeight = this.operationRef.getElementHeight();\n      this.wrapperWidth = this.navWarpRef.nativeElement.offsetWidth || 0;\n      this.wrapperHeight = this.navWarpRef.nativeElement.offsetHeight || 0;\n      this.scrollListHeight = this.navListRef.nativeElement.offsetHeight || 0;\n      this.scrollListWidth = this.navListRef.nativeElement.offsetWidth || 0;\n    }\n\n    alignInkBarToSelectedTab() {\n      const selectedItem = this.items && this.items.length ? this.items.toArray()[this.selectedIndex] : null;\n      const selectedItemElement = selectedItem ? selectedItem.elementRef.nativeElement : null;\n\n      if (selectedItemElement) {\n        /**\n         * .ant-tabs-nav-list - Target offset parent element\n         *   └──.ant-tabs-tab\n         *        └──.ant-tabs-tab-btn - Currently focused element\n         */\n        this.inkBar.alignToElement(selectedItemElement.parentElement);\n      }\n    }\n\n    setPingStatus() {\n      const ping = {\n        top: false,\n        right: false,\n        bottom: false,\n        left: false\n      };\n      const navWarp = this.navWarpRef.nativeElement;\n\n      if (this.position === 'horizontal') {\n        if (this.getLayoutDirection() === 'rtl') {\n          ping.right = this.transformX > 0;\n          ping.left = this.transformX + this.wrapperWidth < this.scrollListWidth;\n        } else {\n          ping.left = this.transformX < 0;\n          ping.right = -this.transformX + this.wrapperWidth < this.scrollListWidth;\n        }\n      } else {\n        ping.top = this.transformY < 0;\n        ping.bottom = -this.transformY + this.wrapperHeight < this.scrollListHeight;\n      }\n\n      Object.keys(ping).forEach(pos => {\n        const className = `ant-tabs-nav-wrap-ping-${pos}`;\n\n        if (ping[pos]) {\n          navWarp.classList.add(className);\n        } else {\n          navWarp.classList.remove(className);\n        }\n      });\n    }\n\n    setVisibleRange() {\n      let unit;\n      let position;\n      let transformSize;\n      let basicSize;\n      let tabContentSize;\n      let addSize;\n      const tabs = this.items.toArray();\n      const DEFAULT_SIZE = {\n        width: 0,\n        height: 0,\n        left: 0,\n        top: 0,\n        right: 0\n      };\n\n      const getOffset = index => {\n        let offset;\n        const size = tabs[index] || DEFAULT_SIZE;\n\n        if (position === 'right') {\n          offset = tabs[0].left + tabs[0].width - tabs[index].left - tabs[index].width;\n        } else {\n          offset = size[position];\n        }\n\n        return offset;\n      };\n\n      if (this.position === 'horizontal') {\n        unit = 'width';\n        basicSize = this.wrapperWidth;\n        tabContentSize = this.scrollListWidth - (this.hiddenItems.length ? this.operationWidth : 0);\n        addSize = this.addButtonWidth;\n        transformSize = Math.abs(this.transformX);\n\n        if (this.getLayoutDirection() === 'rtl') {\n          position = 'right';\n          this.pingRight = this.transformX > 0;\n          this.pingLeft = this.transformX + this.wrapperWidth < this.scrollListWidth;\n        } else {\n          this.pingLeft = this.transformX < 0;\n          this.pingRight = -this.transformX + this.wrapperWidth < this.scrollListWidth;\n          position = 'left';\n        }\n      } else {\n        unit = 'height';\n        basicSize = this.wrapperHeight;\n        tabContentSize = this.scrollListHeight - (this.hiddenItems.length ? this.operationHeight : 0);\n        addSize = this.addButtonHeight;\n        position = 'top';\n        transformSize = -this.transformY;\n        this.pingTop = this.transformY < 0;\n        this.pingBottom = -this.transformY + this.wrapperHeight < this.scrollListHeight;\n      }\n\n      let mergedBasicSize = basicSize;\n\n      if (tabContentSize + addSize > basicSize) {\n        mergedBasicSize = basicSize - addSize;\n      }\n\n      if (!tabs.length) {\n        this.hiddenItems = [];\n        this.cdr.markForCheck();\n        return;\n      }\n\n      const len = tabs.length;\n      let endIndex = len;\n\n      for (let i = 0; i < len; i += 1) {\n        const offset = getOffset(i);\n        const size = tabs[i] || DEFAULT_SIZE;\n\n        if (offset + size[unit] > transformSize + mergedBasicSize) {\n          endIndex = i - 1;\n          break;\n        }\n      }\n\n      let startIndex = 0;\n\n      for (let i = len - 1; i >= 0; i -= 1) {\n        const offset = getOffset(i);\n\n        if (offset < transformSize) {\n          startIndex = i + 1;\n          break;\n        }\n      }\n\n      const startHiddenTabs = tabs.slice(0, startIndex);\n      const endHiddenTabs = tabs.slice(endIndex + 1);\n      this.hiddenItems = [...startHiddenTabs, ...endHiddenTabs];\n      this.cdr.markForCheck();\n    }\n\n    getLayoutDirection() {\n      return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    setTabFocus(_tabIndex) {}\n\n    ngOnChanges(changes) {\n      const {\n        position\n      } = changes; // The first will be aligning in ngAfterViewInit\n\n      if (position && !position.isFirstChange()) {\n        this.alignInkBarToSelectedTab();\n        this.lockAnimation();\n        this.updateScrollListPosition();\n      }\n    }\n\n  }\n\n  NzTabNavBarComponent.ɵfac = function NzTabNavBarComponent_Factory(t) {\n    return new (t || NzTabNavBarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.NzResizeObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.Directionality, 8));\n  };\n\n  NzTabNavBarComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NzTabNavBarComponent,\n    selectors: [[\"nz-tabs-nav\"]],\n    contentQueries: function NzTabNavBarComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NzTabNavItemDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n      }\n    },\n    viewQuery: function NzTabNavBarComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c2, 7);\n        ɵngcc0.ɵɵviewQuery(_c3, 7);\n        ɵngcc0.ɵɵviewQuery(NzTabNavOperationComponent, 7);\n        ɵngcc0.ɵɵviewQuery(NzTabAddButtonComponent, 5);\n        ɵngcc0.ɵɵviewQuery(NzTabsInkBarDirective, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.navWarpRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.navListRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.operationRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.addBtnRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inkBar = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"tablist\", 1, \"ant-tabs-nav\"],\n    hostBindings: function NzTabNavBarComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function NzTabNavBarComponent_keydown_HostBindingHandler($event) {\n          return ctx.handleKeydown($event);\n        });\n      }\n    },\n    inputs: {\n      position: \"position\",\n      addable: \"addable\",\n      hideBar: \"hideBar\",\n      addIcon: \"addIcon\",\n      inkBarAnimated: \"inkBarAnimated\",\n      selectedIndex: \"selectedIndex\",\n      extraTemplate: \"extraTemplate\"\n    },\n    outputs: {\n      indexFocused: \"indexFocused\",\n      selectFocusedIndex: \"selectFocusedIndex\",\n      addClicked: \"addClicked\",\n      tabScroll: \"tabScroll\"\n    },\n    exportAs: [\"nzTabsNav\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c4,\n    decls: 9,\n    vars: 16,\n    consts: [[1, \"ant-tabs-nav-wrap\"], [\"navWarp\", \"\"], [\"nzTabScrollList\", \"\", 1, \"ant-tabs-nav-list\", 3, \"offsetChange\", \"tabScroll\"], [\"navList\", \"\"], [\"nz-tab-add-button\", \"\", 3, \"addIcon\", \"click\", 4, \"ngIf\"], [\"nz-tabs-ink-bar\", \"\", 3, \"hidden\", \"position\", \"animated\"], [3, \"addIcon\", \"addable\", \"items\", \"addClicked\", \"selected\"], [\"class\", \"ant-tabs-extra-content\", 4, \"ngIf\"], [\"nz-tab-add-button\", \"\", 3, \"addIcon\", \"click\"], [1, \"ant-tabs-extra-content\"], [3, \"ngTemplateOutlet\"]],\n    template: function NzTabNavBarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵlistener(\"offsetChange\", function NzTabNavBarComponent_Template_div_offsetChange_2_listener($event) {\n          return ctx.onOffsetChange($event);\n        })(\"tabScroll\", function NzTabNavBarComponent_Template_div_tabScroll_2_listener($event) {\n          return ctx.tabScroll.emit($event);\n        });\n        ɵngcc0.ɵɵprojection(4);\n        ɵngcc0.ɵɵtemplate(5, NzTabNavBarComponent_button_5_Template, 1, 1, \"button\", 4);\n        ɵngcc0.ɵɵelement(6, \"div\", 5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"nz-tab-nav-operation\", 6);\n        ɵngcc0.ɵɵlistener(\"addClicked\", function NzTabNavBarComponent_Template_nz_tab_nav_operation_addClicked_7_listener() {\n          return ctx.addClicked.emit();\n        })(\"selected\", function NzTabNavBarComponent_Template_nz_tab_nav_operation_selected_7_listener($event) {\n          return ctx.onSelectedFromMenu($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, NzTabNavBarComponent_div_8_Template, 2, 1, \"div\", 7);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tabs-nav-wrap-ping-left\", ctx.pingLeft)(\"ant-tabs-nav-wrap-ping-right\", ctx.pingRight)(\"ant-tabs-nav-wrap-ping-top\", ctx.pingTop)(\"ant-tabs-nav-wrap-ping-bottom\", ctx.pingBottom);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showAddButton);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"hidden\", ctx.hideBar)(\"position\", ctx.position)(\"animated\", ctx.inkBarAnimated);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"addIcon\", ctx.addIcon)(\"addable\", ctx.addable)(\"items\", ctx.hiddenItems);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.extraTemplate);\n      }\n    },\n    directives: function () {\n      return [NzTabScrollListDirective, ɵngcc4.NgIf, NzTabsInkBarDirective, NzTabNavOperationComponent, NzTabAddButtonComponent, ɵngcc4.NgTemplateOutlet];\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzTabNavBarComponent;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzTabBodyComponent = /*#__PURE__*/(() => {\n  class NzTabBodyComponent {\n    constructor() {\n      this.content = null;\n      this.active = false;\n      this.tabPaneAnimated = true;\n      this.forceRender = false;\n    }\n\n  }\n\n  NzTabBodyComponent.ɵfac = function NzTabBodyComponent_Factory(t) {\n    return new (t || NzTabBodyComponent)();\n  };\n\n  NzTabBodyComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NzTabBodyComponent,\n    selectors: [[\"\", \"nz-tab-body\", \"\"]],\n    hostAttrs: [1, \"ant-tabs-tabpane\"],\n    hostVars: 12,\n    hostBindings: function NzTabBodyComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.active ? 0 : -1)(\"aria-hidden\", !ctx.active);\n        ɵngcc0.ɵɵstyleProp(\"visibility\", ctx.tabPaneAnimated ? ctx.active ? null : \"hidden\" : null)(\"height\", ctx.tabPaneAnimated ? ctx.active ? null : 0 : null)(\"overflow-y\", ctx.tabPaneAnimated ? ctx.active ? null : \"none\" : null)(\"display\", !ctx.tabPaneAnimated ? ctx.active ? null : \"none\" : null);\n        ɵngcc0.ɵɵclassProp(\"ant-tabs-tabpane-active\", ctx.active);\n      }\n    },\n    inputs: {\n      content: \"content\",\n      active: \"active\",\n      tabPaneAnimated: \"tabPaneAnimated\",\n      forceRender: \"forceRender\"\n    },\n    exportAs: [\"nzTabBody\"],\n    attrs: _c5,\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [3, \"ngTemplateOutlet\"]],\n    template: function NzTabBodyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NzTabBodyComponent_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.active || ctx.forceRender);\n      }\n    },\n    directives: [ɵngcc4.NgIf, ɵngcc4.NgTemplateOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzTabBodyComponent;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst MIN_SWIPE_DISTANCE = 0.1;\nconst STOP_SWIPE_DISTANCE = 0.01;\nconst REFRESH_INTERVAL = 20;\nconst SPEED_OFF_MULTIPLE = Math.pow(0.995, REFRESH_INTERVAL);\nlet NzTabScrollListDirective = /*#__PURE__*/(() => {\n  class NzTabScrollListDirective {\n    constructor(ngZone, elementRef) {\n      this.ngZone = ngZone;\n      this.elementRef = elementRef;\n      this.lastWheelDirection = null;\n      this.lastWheelTimestamp = 0;\n      this.lastTimestamp = 0;\n      this.lastTimeDiff = 0;\n      this.lastMixedWheel = 0;\n      this.lastWheelPrevent = false;\n      this.touchPosition = null;\n      this.lastOffset = null;\n      this.motion = -1;\n\n      this.unsubscribe = () => void 0;\n\n      this.offsetChange = new EventEmitter();\n      this.tabScroll = new EventEmitter();\n\n      this.onTouchEnd = e => {\n        if (!this.touchPosition) {\n          return;\n        }\n\n        const lastOffset = this.lastOffset;\n        const lastTimeDiff = this.lastTimeDiff;\n        this.lastOffset = this.touchPosition = null;\n\n        if (lastOffset) {\n          const distanceX = lastOffset.x / lastTimeDiff;\n          const distanceY = lastOffset.y / lastTimeDiff;\n          const absX = Math.abs(distanceX);\n          const absY = Math.abs(distanceY); // Skip swipe if low distance\n\n          if (Math.max(absX, absY) < MIN_SWIPE_DISTANCE) {\n            return;\n          }\n\n          let currentX = distanceX;\n          let currentY = distanceY;\n          this.motion = window.setInterval(() => {\n            if (Math.abs(currentX) < STOP_SWIPE_DISTANCE && Math.abs(currentY) < STOP_SWIPE_DISTANCE) {\n              window.clearInterval(this.motion);\n              return;\n            }\n\n            currentX *= SPEED_OFF_MULTIPLE;\n            currentY *= SPEED_OFF_MULTIPLE;\n            this.onOffset(currentX * REFRESH_INTERVAL, currentY * REFRESH_INTERVAL, e);\n          }, REFRESH_INTERVAL);\n        }\n      };\n\n      this.onTouchMove = e => {\n        if (!this.touchPosition) {\n          return;\n        }\n\n        e.preventDefault();\n        const {\n          screenX,\n          screenY\n        } = e.touches[0];\n        const offsetX = screenX - this.touchPosition.x;\n        const offsetY = screenY - this.touchPosition.y;\n        this.onOffset(offsetX, offsetY, e);\n        const now = Date.now();\n        this.lastTimeDiff = now - this.lastTimestamp;\n        this.lastTimestamp = now;\n        this.lastOffset = {\n          x: offsetX,\n          y: offsetY\n        };\n        this.touchPosition = {\n          x: screenX,\n          y: screenY\n        };\n      };\n\n      this.onTouchStart = e => {\n        const {\n          screenX,\n          screenY\n        } = e.touches[0];\n        this.touchPosition = {\n          x: screenX,\n          y: screenY\n        };\n        window.clearInterval(this.motion);\n      };\n\n      this.onWheel = e => {\n        const {\n          deltaX,\n          deltaY\n        } = e;\n        let mixed;\n        const absX = Math.abs(deltaX);\n        const absY = Math.abs(deltaY);\n\n        if (absX === absY) {\n          mixed = this.lastWheelDirection === 'x' ? deltaX : deltaY;\n        } else if (absX > absY) {\n          mixed = deltaX;\n          this.lastWheelDirection = 'x';\n        } else {\n          mixed = deltaY;\n          this.lastWheelDirection = 'y';\n        } // Optimize mac touch scroll\n\n\n        const now = Date.now();\n        const absMixed = Math.abs(mixed);\n\n        if (now - this.lastWheelTimestamp > 100 || absMixed - this.lastMixedWheel > 10) {\n          this.lastWheelPrevent = false;\n        }\n\n        this.onOffset(-mixed, -mixed, e);\n\n        if (e.defaultPrevented || this.lastWheelPrevent) {\n          this.lastWheelPrevent = true;\n        }\n\n        this.lastWheelTimestamp = now;\n        this.lastMixedWheel = absMixed;\n      };\n    }\n\n    ngOnInit() {\n      this.unsubscribe = this.ngZone.runOutsideAngular(() => {\n        const el = this.elementRef.nativeElement;\n        const wheel$ = fromEvent(el, 'wheel');\n        const touchstart$ = fromEvent(el, 'touchstart');\n        const touchmove$ = fromEvent(el, 'touchmove');\n        const touchend$ = fromEvent(el, 'touchend');\n        const subscription = new Subscription();\n        subscription.add(this.subscribeWrap('wheel', wheel$, this.onWheel));\n        subscription.add(this.subscribeWrap('touchstart', touchstart$, this.onTouchStart));\n        subscription.add(this.subscribeWrap('touchmove', touchmove$, this.onTouchMove));\n        subscription.add(this.subscribeWrap('touchend', touchend$, this.onTouchEnd));\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n    }\n\n    subscribeWrap(type, observable, handler) {\n      return observable.subscribe(event => {\n        this.tabScroll.emit({\n          type,\n          event\n        });\n\n        if (!event.defaultPrevented) {\n          handler(event);\n        }\n      });\n    }\n\n    onOffset(x, y, event) {\n      this.ngZone.run(() => {\n        this.offsetChange.emit({\n          x,\n          y,\n          event\n        });\n      });\n    }\n\n    ngOnDestroy() {\n      this.unsubscribe();\n    }\n\n  }\n\n  NzTabScrollListDirective.ɵfac = function NzTabScrollListDirective_Factory(t) {\n    return new (t || NzTabScrollListDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  NzTabScrollListDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NzTabScrollListDirective,\n    selectors: [[\"\", \"nzTabScrollList\", \"\"]],\n    outputs: {\n      offsetChange: \"offsetChange\",\n      tabScroll: \"tabScroll\"\n    }\n  });\n  return NzTabScrollListDirective;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzTabCloseButtonComponent = /*#__PURE__*/(() => {\n  class NzTabCloseButtonComponent {\n    constructor() {\n      this.closeIcon = 'close';\n    }\n\n  }\n\n  NzTabCloseButtonComponent.ɵfac = function NzTabCloseButtonComponent_Factory(t) {\n    return new (t || NzTabCloseButtonComponent)();\n  };\n\n  NzTabCloseButtonComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NzTabCloseButtonComponent,\n    selectors: [[\"nz-tab-close-button\"], [\"button\", \"nz-tab-close-button\", \"\"]],\n    hostAttrs: [\"aria-label\", \"Close tab\", \"type\", \"button\", 1, \"ant-tabs-tab-remove\"],\n    inputs: {\n      closeIcon: \"closeIcon\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"nzStringTemplateOutlet\"], [\"nz-icon\", \"\", \"nzTheme\", \"outline\", 3, \"nzType\"]],\n    template: function NzTabCloseButtonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NzTabCloseButtonComponent_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx.closeIcon);\n      }\n    },\n    directives: [ɵngcc1.NzStringTemplateOutletDirective, ɵngcc2.NzIconDirective],\n    encapsulation: 2\n  });\n  return NzTabCloseButtonComponent;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Fix https://github.com/angular/angular/issues/8563\n */\nlet NzTabLinkTemplateDirective = /*#__PURE__*/(() => {\n  class NzTabLinkTemplateDirective {\n    constructor(templateRef) {\n      this.templateRef = templateRef;\n    }\n\n  }\n\n  NzTabLinkTemplateDirective.ɵfac = function NzTabLinkTemplateDirective_Factory(t) {\n    return new (t || NzTabLinkTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef, 1));\n  };\n\n  NzTabLinkTemplateDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NzTabLinkTemplateDirective,\n    selectors: [[\"ng-template\", \"nzTabLink\", \"\"]],\n    exportAs: [\"nzTabLinkTemplate\"]\n  });\n  return NzTabLinkTemplateDirective;\n})();\n\n/**\n * This component is for catching `routerLink` directive.\n */\nlet NzTabLinkDirective = /*#__PURE__*/(() => {\n  class NzTabLinkDirective {\n    constructor(elementRef, routerLink, routerLinkWithHref) {\n      this.elementRef = elementRef;\n      this.routerLink = routerLink;\n      this.routerLinkWithHref = routerLinkWithHref;\n    }\n\n  }\n\n  NzTabLinkDirective.ɵfac = function NzTabLinkDirective_Factory(t) {\n    return new (t || NzTabLinkDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.RouterLink, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.RouterLinkWithHref, 10));\n  };\n\n  NzTabLinkDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NzTabLinkDirective,\n    selectors: [[\"a\", \"nz-tab-link\", \"\"]],\n    exportAs: [\"nzTabLink\"]\n  });\n  return NzTabLinkDirective;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\nlet NzTabDirective = /*#__PURE__*/(() => {\n  class NzTabDirective {}\n\n  NzTabDirective.ɵfac = function NzTabDirective_Factory(t) {\n    return new (t || NzTabDirective)();\n  };\n\n  NzTabDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NzTabDirective,\n    selectors: [[\"\", \"nz-tab\", \"\"]],\n    exportAs: [\"nzTab\"]\n  });\n  /**\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n   */\n\n  /**\n   * Used to provide a tab set to a tab without causing a circular dependency.\n   */\n\n  return NzTabDirective;\n})();\nconst NZ_TAB_SET = new InjectionToken('NZ_TAB_SET');\nlet NzTabComponent = /*#__PURE__*/(() => {\n  class NzTabComponent {\n    constructor(closestTabSet) {\n      this.closestTabSet = closestTabSet;\n      this.nzTitle = '';\n      this.nzClosable = false;\n      this.nzCloseIcon = 'close';\n      this.nzDisabled = false;\n      this.nzForceRender = false;\n      this.nzSelect = new EventEmitter();\n      this.nzDeselect = new EventEmitter();\n      this.nzClick = new EventEmitter();\n      this.nzContextmenu = new EventEmitter();\n      this.template = null;\n      this.isActive = false;\n      this.position = null;\n      this.origin = null;\n      this.stateChanges = new Subject();\n    }\n\n    get content() {\n      return this.template || this.contentTemplate;\n    }\n\n    get label() {\n      var _a;\n\n      return this.nzTitle || ((_a = this.nzTabLinkTemplateDirective) === null || _a === void 0 ? void 0 : _a.templateRef);\n    }\n\n    ngOnChanges(changes) {\n      const {\n        nzTitle,\n        nzDisabled,\n        nzForceRender\n      } = changes;\n\n      if (nzTitle || nzDisabled || nzForceRender) {\n        this.stateChanges.next();\n      }\n    }\n\n    ngOnDestroy() {\n      this.stateChanges.complete();\n    }\n\n  }\n\n  NzTabComponent.ɵfac = function NzTabComponent_Factory(t) {\n    return new (t || NzTabComponent)(ɵngcc0.ɵɵdirectiveInject(NZ_TAB_SET));\n  };\n\n  NzTabComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NzTabComponent,\n    selectors: [[\"nz-tab\"]],\n    contentQueries: function NzTabComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NzTabDirective, 5, TemplateRef);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NzTabLinkTemplateDirective, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NzTabLinkDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nzTabLinkTemplateDirective = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.linkDirective = _t.first);\n      }\n    },\n    viewQuery: function NzTabComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c6, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentTemplate = _t.first);\n      }\n    },\n    inputs: {\n      nzTitle: \"nzTitle\",\n      nzClosable: \"nzClosable\",\n      nzCloseIcon: \"nzCloseIcon\",\n      nzDisabled: \"nzDisabled\",\n      nzForceRender: \"nzForceRender\"\n    },\n    outputs: {\n      nzSelect: \"nzSelect\",\n      nzDeselect: \"nzDeselect\",\n      nzClick: \"nzClick\",\n      nzContextmenu: \"nzContextmenu\"\n    },\n    exportAs: [\"nzTab\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c8,\n    decls: 4,\n    vars: 0,\n    consts: [[\"tabLinkTemplate\", \"\"], [\"contentTemplate\", \"\"]],\n    template: function NzTabComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c7);\n        ɵngcc0.ɵɵtemplate(0, NzTabComponent_ng_template_0_Template, 1, 0, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(2, NzTabComponent_ng_template_2_Template, 1, 0, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean()], NzTabComponent.prototype, \"nzClosable\", void 0);\n\n  __decorate([InputBoolean()], NzTabComponent.prototype, \"nzDisabled\", void 0);\n\n  __decorate([InputBoolean()], NzTabComponent.prototype, \"nzForceRender\", void 0);\n  /**\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n   */\n\n\n  return NzTabComponent;\n})();\n\nclass NzTabChangeEvent {}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nconst NZ_CONFIG_MODULE_NAME = 'tabs';\nlet nextId = 0;\nlet NzTabSetComponent = /*#__PURE__*/(() => {\n  class NzTabSetComponent {\n    constructor(nzConfigService, cdr, directionality, router) {\n      this.nzConfigService = nzConfigService;\n      this.cdr = cdr;\n      this.directionality = directionality;\n      this.router = router;\n      this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n      this.nzTabPosition = 'top';\n      this.nzCanDeactivate = null;\n      this.nzAddIcon = 'plus';\n      this.nzTabBarStyle = null;\n      this.nzType = 'line';\n      this.nzSize = 'default';\n      this.nzAnimated = true;\n      this.nzTabBarGutter = undefined;\n      this.nzHideAdd = false;\n      this.nzCentered = false;\n      this.nzHideAll = false;\n      this.nzLinkRouter = false;\n      this.nzLinkExact = true;\n      this.nzSelectChange = new EventEmitter(true);\n      this.nzSelectedIndexChange = new EventEmitter();\n      this.nzTabListScroll = new EventEmitter();\n      this.nzClose = new EventEmitter();\n      this.nzAdd = new EventEmitter(); // Pick up only direct descendants under ivy rendering engine\n      // We filter out only the tabs that belong to this tab set in `tabs`.\n\n      this.allTabs = new QueryList(); // All the direct tabs for this tab set\n\n      this.tabs = new QueryList();\n      this.dir = 'ltr';\n      this.destroy$ = new Subject();\n      this.indexToSelect = 0;\n      this.selectedIndex = null;\n      this.tabLabelSubscription = Subscription.EMPTY;\n      this.tabsSubscription = Subscription.EMPTY;\n      this.canDeactivateSubscription = Subscription.EMPTY;\n      this.tabSetId = nextId++;\n    }\n\n    get nzSelectedIndex() {\n      return this.selectedIndex;\n    }\n\n    set nzSelectedIndex(value) {\n      this.indexToSelect = coerceNumberProperty(value, null);\n    }\n\n    get position() {\n      return ['top', 'bottom'].indexOf(this.nzTabPosition) === -1 ? 'vertical' : 'horizontal';\n    }\n\n    get addable() {\n      return this.nzType === 'editable-card' && !this.nzHideAdd;\n    }\n\n    get closable() {\n      return this.nzType === 'editable-card';\n    }\n\n    get line() {\n      return this.nzType === 'line';\n    }\n\n    get inkBarAnimated() {\n      return this.line && (typeof this.nzAnimated === 'boolean' ? this.nzAnimated : this.nzAnimated.inkBar);\n    }\n\n    get tabPaneAnimated() {\n      return this.position === 'horizontal' && this.line && (typeof this.nzAnimated === 'boolean' ? this.nzAnimated : this.nzAnimated.tabPane);\n    }\n\n    ngOnInit() {\n      var _a;\n\n      this.dir = this.directionality.value;\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.detectChanges();\n      });\n    }\n\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n      this.tabs.destroy();\n      this.tabLabelSubscription.unsubscribe();\n      this.tabsSubscription.unsubscribe();\n      this.canDeactivateSubscription.unsubscribe();\n    }\n\n    ngAfterContentInit() {\n      Promise.resolve().then(() => {\n        this.setUpRouter();\n      });\n      this.subscribeToTabLabels();\n      this.subscribeToAllTabChanges(); // Subscribe to changes in the amount of tabs, in order to be\n      // able to re-render the content as new tabs are added or removed.\n\n      this.tabsSubscription = this.tabs.changes.subscribe(() => {\n        const indexToSelect = this.clampTabIndex(this.indexToSelect); // Maintain the previously-selected tab if a new tab is added or removed and there is no\n        // explicit change that selects a different tab.\n\n        if (indexToSelect === this.selectedIndex) {\n          const tabs = this.tabs.toArray();\n\n          for (let i = 0; i < tabs.length; i++) {\n            if (tabs[i].isActive) {\n              // Assign both to the `indexToSelect` and `selectedIndex` so we don't fire a changed\n              // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n              // adding a tab within the `nzSelectedIndexChange` event.\n              this.indexToSelect = this.selectedIndex = i;\n              break;\n            }\n          }\n        }\n\n        this.subscribeToTabLabels();\n        this.cdr.markForCheck();\n      });\n    }\n\n    ngAfterContentChecked() {\n      // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n      // the amount of tabs changes before the actual change detection runs.\n      const indexToSelect = this.indexToSelect = this.clampTabIndex(this.indexToSelect); // If there is a change in selected index, emit a change event. Should not trigger if\n      // the selected index has not yet been initialized.\n\n      if (this.selectedIndex !== indexToSelect) {\n        const isFirstRun = this.selectedIndex == null;\n\n        if (!isFirstRun) {\n          this.nzSelectChange.emit(this.createChangeEvent(indexToSelect));\n        } // Changing these values after change detection has run\n        // since the checked content may contain references to them.\n\n\n        Promise.resolve().then(() => {\n          this.tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n          if (!isFirstRun) {\n            this.nzSelectedIndexChange.emit(indexToSelect);\n          }\n        });\n      } // Setup the position for each tab and optionally setup an origin on the next selected tab.\n\n\n      this.tabs.forEach((tab, index) => {\n        tab.position = index - indexToSelect; // If there is already a selected tab, then set up an origin for the next selected tab\n        // if it doesn't have one already.\n\n        if (this.selectedIndex != null && tab.position === 0 && !tab.origin) {\n          tab.origin = indexToSelect - this.selectedIndex;\n        }\n      });\n\n      if (this.selectedIndex !== indexToSelect) {\n        this.selectedIndex = indexToSelect;\n        this.cdr.markForCheck();\n      }\n    }\n\n    onClose(index, e) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.nzClose.emit({\n        index\n      });\n    }\n\n    onAdd() {\n      this.nzAdd.emit();\n    }\n\n    clampTabIndex(index) {\n      return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n    }\n\n    createChangeEvent(index) {\n      const event = new NzTabChangeEvent();\n      event.index = index;\n\n      if (this.tabs && this.tabs.length) {\n        event.tab = this.tabs.toArray()[index];\n        this.tabs.forEach((tab, i) => {\n          if (i !== index) {\n            tab.nzDeselect.emit();\n          }\n        });\n        event.tab.nzSelect.emit();\n      }\n\n      return event;\n    }\n\n    subscribeToTabLabels() {\n      if (this.tabLabelSubscription) {\n        this.tabLabelSubscription.unsubscribe();\n      }\n\n      this.tabLabelSubscription = merge(...this.tabs.map(tab => tab.stateChanges)).subscribe(() => this.cdr.markForCheck());\n    }\n\n    subscribeToAllTabChanges() {\n      this.allTabs.changes.pipe(startWith(this.allTabs)).subscribe(tabs => {\n        this.tabs.reset(tabs.filter(tab => tab.closestTabSet === this));\n        this.tabs.notifyOnChanges();\n      });\n    }\n\n    canDeactivateFun(pre, next) {\n      if (typeof this.nzCanDeactivate === 'function') {\n        const observable = wrapIntoObservable(this.nzCanDeactivate(pre, next));\n        return observable.pipe(first(), takeUntil(this.destroy$));\n      } else {\n        return of(true);\n      }\n    }\n\n    clickNavItem(tab, index, e) {\n      if (!tab.nzDisabled) {\n        // ignore nzCanDeactivate\n        tab.nzClick.emit();\n\n        if (!this.isRouterLinkClickEvent(index, e)) {\n          this.setSelectedIndex(index);\n        }\n      }\n    }\n\n    isRouterLinkClickEvent(index, event) {\n      var _a, _b;\n\n      const target = event.target;\n\n      if (this.nzLinkRouter) {\n        return !!((_b = (_a = this.tabs.toArray()[index]) === null || _a === void 0 ? void 0 : _a.linkDirective) === null || _b === void 0 ? void 0 : _b.elementRef.nativeElement.contains(target));\n      } else {\n        return false;\n      }\n    }\n\n    contextmenuNavItem(tab, e) {\n      if (!tab.nzDisabled) {\n        // ignore nzCanDeactivate\n        tab.nzContextmenu.emit(e);\n      }\n    }\n\n    setSelectedIndex(index) {\n      this.canDeactivateSubscription.unsubscribe();\n      this.canDeactivateSubscription = this.canDeactivateFun(this.selectedIndex, index).subscribe(can => {\n        if (can) {\n          this.nzSelectedIndex = index;\n          this.tabNavBarRef.focusIndex = index;\n          this.cdr.markForCheck();\n        }\n      });\n    }\n\n    getTabIndex(tab, index) {\n      if (tab.nzDisabled) {\n        return null;\n      }\n\n      return this.selectedIndex === index ? 0 : -1;\n    }\n\n    getTabContentId(i) {\n      return `nz-tabs-${this.tabSetId}-tab-${i}`;\n    }\n\n    setUpRouter() {\n      if (this.nzLinkRouter) {\n        if (!this.router) {\n          throw new Error(`${PREFIX} you should import 'RouterModule' if you want to use 'nzLinkRouter'!`);\n        }\n\n        this.router.events.pipe(takeUntil(this.destroy$), filter(e => e instanceof NavigationEnd), startWith(true), delay(0)).subscribe(() => {\n          this.updateRouterActive();\n          this.cdr.markForCheck();\n        });\n      }\n    }\n\n    updateRouterActive() {\n      if (this.router.navigated) {\n        const index = this.findShouldActiveTabIndex();\n\n        if (index !== this.selectedIndex) {\n          this.setSelectedIndex(index);\n        }\n\n        this.nzHideAll = index === -1;\n      }\n    }\n\n    findShouldActiveTabIndex() {\n      const tabs = this.tabs.toArray();\n      const isActive = this.isLinkActive(this.router);\n      return tabs.findIndex(tab => {\n        const c = tab.linkDirective;\n        return c ? isActive(c.routerLink) || isActive(c.routerLinkWithHref) : false;\n      });\n    }\n\n    isLinkActive(router) {\n      return link => link ? router.isActive(link.urlTree, this.nzLinkExact) : false;\n    }\n\n    getTabContentMarginValue() {\n      return -(this.nzSelectedIndex || 0) * 100;\n    }\n\n    getTabContentMarginLeft() {\n      if (this.tabPaneAnimated) {\n        if (this.dir !== 'rtl') {\n          return `${this.getTabContentMarginValue()}%`;\n        }\n      }\n\n      return '';\n    }\n\n    getTabContentMarginRight() {\n      if (this.tabPaneAnimated) {\n        if (this.dir === 'rtl') {\n          return `${this.getTabContentMarginValue()}%`;\n        }\n      }\n\n      return '';\n    }\n\n  }\n\n  NzTabSetComponent.ɵfac = function NzTabSetComponent_Factory(t) {\n    return new (t || NzTabSetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc10.NzConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.Router, 8));\n  };\n\n  NzTabSetComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NzTabSetComponent,\n    selectors: [[\"nz-tabset\"]],\n    contentQueries: function NzTabSetComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NzTabComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.allTabs = _t);\n      }\n    },\n    viewQuery: function NzTabSetComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(NzTabNavBarComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabNavBarRef = _t.first);\n      }\n    },\n    hostAttrs: [1, \"ant-tabs\"],\n    hostVars: 24,\n    hostBindings: function NzTabSetComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tabs-card\", ctx.nzType === \"card\" || ctx.nzType === \"editable-card\")(\"ant-tabs-editable\", ctx.nzType === \"editable-card\")(\"ant-tabs-editable-card\", ctx.nzType === \"editable-card\")(\"ant-tabs-centered\", ctx.nzCentered)(\"ant-tabs-rtl\", ctx.dir === \"rtl\")(\"ant-tabs-top\", ctx.nzTabPosition === \"top\")(\"ant-tabs-bottom\", ctx.nzTabPosition === \"bottom\")(\"ant-tabs-left\", ctx.nzTabPosition === \"left\")(\"ant-tabs-right\", ctx.nzTabPosition === \"right\")(\"ant-tabs-default\", ctx.nzSize === \"default\")(\"ant-tabs-small\", ctx.nzSize === \"small\")(\"ant-tabs-large\", ctx.nzSize === \"large\");\n      }\n    },\n    inputs: {\n      nzTabPosition: \"nzTabPosition\",\n      nzCanDeactivate: \"nzCanDeactivate\",\n      nzAddIcon: \"nzAddIcon\",\n      nzTabBarStyle: \"nzTabBarStyle\",\n      nzType: \"nzType\",\n      nzSize: \"nzSize\",\n      nzAnimated: \"nzAnimated\",\n      nzTabBarGutter: \"nzTabBarGutter\",\n      nzHideAdd: \"nzHideAdd\",\n      nzCentered: \"nzCentered\",\n      nzHideAll: \"nzHideAll\",\n      nzLinkRouter: \"nzLinkRouter\",\n      nzLinkExact: \"nzLinkExact\",\n      nzSelectedIndex: \"nzSelectedIndex\",\n      nzTabBarExtraContent: \"nzTabBarExtraContent\"\n    },\n    outputs: {\n      nzSelectChange: \"nzSelectChange\",\n      nzSelectedIndexChange: \"nzSelectedIndexChange\",\n      nzTabListScroll: \"nzTabListScroll\",\n      nzClose: \"nzClose\",\n      nzAdd: \"nzAdd\"\n    },\n    exportAs: [\"nzTabset\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NZ_TAB_SET,\n      useExisting: NzTabSetComponent\n    }])],\n    decls: 4,\n    vars: 16,\n    consts: [[3, \"ngStyle\", \"selectedIndex\", \"inkBarAnimated\", \"addable\", \"addIcon\", \"hideBar\", \"position\", \"extraTemplate\", \"tabScroll\", \"selectFocusedIndex\", \"addClicked\", 4, \"ngIf\"], [1, \"ant-tabs-content-holder\"], [1, \"ant-tabs-content\"], [\"nz-tab-body\", \"\", 3, \"active\", \"content\", \"forceRender\", \"tabPaneAnimated\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngStyle\", \"selectedIndex\", \"inkBarAnimated\", \"addable\", \"addIcon\", \"hideBar\", \"position\", \"extraTemplate\", \"tabScroll\", \"selectFocusedIndex\", \"addClicked\"], [\"class\", \"ant-tabs-tab\", 3, \"margin-right\", \"margin-bottom\", \"ant-tabs-tab-active\", \"ant-tabs-tab-disabled\", \"click\", \"contextmenu\", 4, \"ngFor\", \"ngForOf\"], [1, \"ant-tabs-tab\", 3, \"click\", \"contextmenu\"], [\"role\", \"tab\", \"nzTabNavItem\", \"\", \"cdkMonitorElementFocus\", \"\", 1, \"ant-tabs-tab-btn\", 3, \"disabled\", \"tab\", \"active\"], [4, \"nzStringTemplateOutlet\", \"nzStringTemplateOutletContext\"], [\"nz-tab-close-button\", \"\", 3, \"closeIcon\", \"click\", 4, \"ngIf\"], [\"nz-tab-close-button\", \"\", 3, \"closeIcon\", \"click\"], [\"nz-tab-body\", \"\", 3, \"active\", \"content\", \"forceRender\", \"tabPaneAnimated\"]],\n    template: function NzTabSetComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NzTabSetComponent_nz_tabs_nav_0_Template, 2, 9, \"nz-tabs-nav\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(3, NzTabSetComponent_div_3_Template, 1, 4, \"div\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.tabs.length);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx.getTabContentMarginLeft())(\"margin-right\", ctx.getTabContentMarginRight());\n        ɵngcc0.ɵɵclassProp(\"ant-tabs-content-top\", ctx.nzTabPosition === \"top\")(\"ant-tabs-content-bottom\", ctx.nzTabPosition === \"bottom\")(\"ant-tabs-content-left\", ctx.nzTabPosition === \"left\")(\"ant-tabs-content-right\", ctx.nzTabPosition === \"right\")(\"ant-tabs-content-animated\", ctx.tabPaneAnimated);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.tabs);\n      }\n    },\n    directives: [ɵngcc4.NgIf, ɵngcc4.NgForOf, NzTabNavBarComponent, ɵngcc4.NgStyle, NzTabNavItemDirective, ɵngcc11.CdkMonitorFocus, ɵngcc1.NzStringTemplateOutletDirective, NzTabCloseButtonComponent, NzTabBodyComponent],\n    encapsulation: 2\n  });\n\n  __decorate([WithConfig()], NzTabSetComponent.prototype, \"nzType\", void 0);\n\n  __decorate([WithConfig()], NzTabSetComponent.prototype, \"nzSize\", void 0);\n\n  __decorate([WithConfig()], NzTabSetComponent.prototype, \"nzAnimated\", void 0);\n\n  __decorate([WithConfig()], NzTabSetComponent.prototype, \"nzTabBarGutter\", void 0);\n\n  __decorate([InputBoolean()], NzTabSetComponent.prototype, \"nzHideAdd\", void 0);\n\n  __decorate([InputBoolean()], NzTabSetComponent.prototype, \"nzCentered\", void 0);\n\n  __decorate([InputBoolean()], NzTabSetComponent.prototype, \"nzHideAll\", void 0);\n\n  __decorate([InputBoolean()], NzTabSetComponent.prototype, \"nzLinkRouter\", void 0);\n\n  __decorate([InputBoolean()], NzTabSetComponent.prototype, \"nzLinkExact\", void 0);\n\n  return NzTabSetComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nconst DIRECTIVES = [NzTabSetComponent, NzTabComponent, NzTabNavBarComponent, NzTabNavItemDirective, NzTabsInkBarDirective, NzTabScrollListDirective, NzTabNavOperationComponent, NzTabAddButtonComponent, NzTabCloseButtonComponent, NzTabDirective, NzTabBodyComponent, NzTabLinkDirective, NzTabLinkTemplateDirective];\nlet NzTabsModule = /*#__PURE__*/(() => {\n  class NzTabsModule {}\n\n  NzTabsModule.ɵfac = function NzTabsModule_Factory(t) {\n    return new (t || NzTabsModule)();\n  };\n\n  NzTabsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NzTabsModule\n  });\n  NzTabsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[BidiModule, CommonModule, ObserversModule, NzIconModule, NzOutletModule, PlatformModule, A11yModule, CdkScrollableModule, NzDropDownModule]]\n  });\n  return NzTabsModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzTabsModule, {\n    declarations: function () {\n      return [NzTabSetComponent, NzTabComponent, NzTabNavBarComponent, NzTabNavItemDirective, NzTabsInkBarDirective, NzTabScrollListDirective, NzTabNavOperationComponent, NzTabAddButtonComponent, NzTabCloseButtonComponent, NzTabDirective, NzTabBodyComponent, NzTabLinkDirective, NzTabLinkTemplateDirective];\n    },\n    imports: function () {\n      return [BidiModule, CommonModule, ObserversModule, NzIconModule, NzOutletModule, PlatformModule, A11yModule, CdkScrollableModule, NzDropDownModule];\n    },\n    exports: function () {\n      return [NzTabSetComponent, NzTabComponent, NzTabNavBarComponent, NzTabNavItemDirective, NzTabsInkBarDirective, NzTabScrollListDirective, NzTabNavOperationComponent, NzTabAddButtonComponent, NzTabCloseButtonComponent, NzTabDirective, NzTabBodyComponent, NzTabLinkDirective, NzTabLinkTemplateDirective];\n    }\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NZ_TAB_SET, NzTabChangeEvent, NzTabComponent, NzTabDirective, NzTabLinkDirective, NzTabLinkTemplateDirective, NzTabSetComponent, NzTabsModule, NzTabAddButtonComponent as ɵNzTabAddButtonComponent, NzTabBodyComponent as ɵNzTabBodyComponent, NzTabCloseButtonComponent as ɵNzTabCloseButtonComponent, NzTabNavBarComponent as ɵNzTabNavBarComponent, NzTabNavItemDirective as ɵNzTabNavItemDirective, NzTabNavOperationComponent as ɵNzTabNavOperationComponent, NzTabScrollListDirective as ɵNzTabScrollListDirective, NzTabsInkBarDirective as ɵNzTabsInkBarDirective }; //# sourceMappingURL=ng-zorro-antd-tabs.js.map","map":null,"metadata":{},"sourceType":"module"}