{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { HttpHeaders } from '@angular/common/http';\nimport { EMPTY, of, ReplaySubject } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { BASE_URL } from 'config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TaskManagerService = /*#__PURE__*/(() => {\n  class TaskManagerService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.taskManagerDetail$ = new ReplaySubject(1);\n    }\n    /**\n     * Load TM list\n     */\n\n\n    loadManagers() {\n      return this.httpClient.get(`${BASE_URL}/taskmanagers`).pipe(map(data => data.taskmanagers || []), catchError(() => of([])));\n    }\n    /**\n     * Load specify TM\n     * @param taskManagerId\n     */\n\n\n    loadManager(taskManagerId) {\n      return this.httpClient.get(`${BASE_URL}/taskmanagers/${taskManagerId}`).pipe(catchError(() => EMPTY));\n    }\n    /**\n     * Load TM log list\n     * @param taskManagerId\n     */\n\n\n    loadLogList(taskManagerId) {\n      return this.httpClient.get(`${BASE_URL}/taskmanagers/${taskManagerId}/logs`).pipe(map(data => data.logs));\n    }\n    /**\n     * Load TM log\n     * @param taskManagerId\n     * @param logName\n     */\n\n\n    loadLog(taskManagerId, logName) {\n      const url = `${BASE_URL}/taskmanagers/${taskManagerId}/logs/${logName}`;\n      return this.httpClient.get(url, {\n        responseType: 'text',\n        headers: new HttpHeaders().append('Cache-Control', 'no-cache')\n      }).pipe(map(data => {\n        return {\n          data,\n          url\n        };\n      }));\n    }\n    /**\n     * Load TM thread dump\n     */\n\n\n    loadThreadDump(taskManagerId) {\n      return this.httpClient.get(`${BASE_URL}/taskmanagers/${taskManagerId}/thread-dump`).pipe(map(taskManagerThreadDump => {\n        return taskManagerThreadDump.threadInfos.map(threadInfo => threadInfo.stringifiedThreadInfo).join('');\n      }));\n    }\n    /**\n     * Load TM logs\n     * @param taskManagerId\n     */\n\n\n    loadLogs(taskManagerId) {\n      return this.httpClient.get(`${BASE_URL}/taskmanagers/${taskManagerId}/log`, {\n        responseType: 'text',\n        headers: new HttpHeaders().append('Cache-Control', 'no-cache')\n      });\n    }\n    /**\n     * Load TM stdout\n     * @param taskManagerId\n     */\n\n\n    loadStdout(taskManagerId) {\n      return this.httpClient.get(`${BASE_URL}/taskmanagers/${taskManagerId}/stdout`, {\n        responseType: 'text',\n        headers: new HttpHeaders().append('Cache-Control', 'no-cache')\n      });\n    }\n    /**\n     * Get TM metric\n     * @param taskManagerId\n     * @param listOfMetricName\n     */\n\n\n    getMetrics(taskManagerId, listOfMetricName) {\n      const metricName = listOfMetricName.join(',');\n      return this.httpClient.get(`${BASE_URL}/taskmanagers/${taskManagerId}/metrics?get=${metricName}`).pipe(map(arr => {\n        const result = {};\n        arr.forEach(item => {\n          result[item.id] = parseInt(item.value, 10);\n        });\n        return result;\n      }));\n    }\n\n  }\n\n  TaskManagerService.ɵfac = function TaskManagerService_Factory(t) {\n    return new (t || TaskManagerService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  TaskManagerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskManagerService,\n    factory: TaskManagerService.ɵfac,\n    providedIn: 'root'\n  });\n  return TaskManagerService;\n})();","map":null,"metadata":{},"sourceType":"module"}