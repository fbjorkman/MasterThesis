{"ast":null,"code":"import { select } from 'd3-selection';\nimport { format } from 'd3-format';\nimport { flamegraph, offCpuColorMapper } from 'd3-flame-graph';\nimport * as _d3 from 'd3';\nimport _d3Tip from 'd3-tip';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"flameGraphContainer\"];\nexport let FlameGraphComponent = /*#__PURE__*/(() => {\n  class FlameGraphComponent {\n    draw() {\n      if (this.data) {\n        const element = this.flameGraphContainer.nativeElement;\n        const chart = flamegraph().width(element.clientWidth);\n        const d3 = Object.assign(Object.assign({}, _d3), {\n          tip: _d3Tip\n        });\n        var tip = d3.tip().direction('s').offset([8, 0]).attr('class', 'd3-flame-graph-tip').html(function (d) {\n          return d.data.name + ' (' + format('.3f')(100 * (d.x1 - d.x0)) + '%, ' + d.data.value + ' samples)';\n        });\n        chart.tooltip(tip);\n\n        if (this.graphType == 'off_cpu') {\n          chart.setColorMapper(offCpuColorMapper);\n        }\n\n        select(element).selectAll('*').remove();\n        select(element).datum(this.data).call(chart);\n      }\n    }\n\n  }\n\n  FlameGraphComponent.ɵfac = function FlameGraphComponent_Factory(t) {\n    return new (t || FlameGraphComponent)();\n  };\n\n  FlameGraphComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FlameGraphComponent,\n    selectors: [[\"flink-flame-graph\"]],\n    viewQuery: function FlameGraphComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.flameGraphContainer = _t.first);\n      }\n    },\n    inputs: {\n      data: \"data\",\n      graphType: \"graphType\"\n    },\n    decls: 4,\n    vars: 1,\n    consts: [[1, \"background\"], [\"flameGraphContainer\", \"\"]],\n    template: function FlameGraphComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"div\", null, 1);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.draw(), \"\\n\");\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return FlameGraphComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}