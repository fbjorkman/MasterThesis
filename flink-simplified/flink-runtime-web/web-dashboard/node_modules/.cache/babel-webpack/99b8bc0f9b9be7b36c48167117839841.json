{"ast":null,"code":"import { forkJoin, of, Subject } from 'rxjs';\nimport { catchError, filter, map, takeUntil } from 'rxjs/operators';\nimport { DagreComponent } from 'share/common/dagre/dagre.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"services\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../../share/common/dagre/dagre.component\";\nimport * as i4 from \"./list/job-overview-list.component\";\nimport * as i5 from \"share/common/resize/resize.component\";\nexport let JobOverviewComponent = /*#__PURE__*/(() => {\n  class JobOverviewComponent {\n    constructor(jobService, router, activatedRoute, elementRef, metricService, cdr) {\n      this.jobService = jobService;\n      this.router = router;\n      this.activatedRoute = activatedRoute;\n      this.elementRef = elementRef;\n      this.metricService = metricService;\n      this.cdr = cdr;\n      this.nodes = [];\n      this.links = [];\n      this.destroy$ = new Subject();\n      this.top = 500;\n    }\n\n    onNodeClick(node) {\n      if (!(this.selectedNode && this.selectedNode.id === node.id)) {\n        this.router.navigate([node.id], {\n          relativeTo: this.activatedRoute\n        }).then();\n      }\n    }\n\n    onResizeEnd() {\n      if (!this.selectedNode) {\n        this.dagreComponent.moveToCenter();\n      } else {\n        this.dagreComponent.focusNode(this.selectedNode, true);\n      }\n    }\n\n    mergeWithBackPressure(nodes) {\n      return forkJoin(nodes.map(node => {\n        return this.metricService.getAggregatedMetrics(this.jobId, node.id, [\"backPressuredTimeMsPerSecond\", \"busyTimeMsPerSecond\"]).pipe(map(result => {\n          return Object.assign(Object.assign({}, node), {\n            backPressuredPercentage: Math.min(Math.round(result.backPressuredTimeMsPerSecond / 10), 100),\n            busyPercentage: Math.min(Math.round(result.busyTimeMsPerSecond / 10), 100)\n          });\n        }));\n      })).pipe(catchError(() => of(nodes)));\n    }\n\n    mergeWithWatermarks(nodes) {\n      return forkJoin(nodes.map(node => {\n        return this.metricService.getWatermarks(this.jobId, node.id).pipe(map(result => {\n          return Object.assign(Object.assign({}, node), {\n            lowWatermark: result.lowWatermark\n          });\n        }));\n      })).pipe(catchError(() => of(nodes)));\n    }\n\n    refreshNodesWithMetrics() {\n      this.mergeWithBackPressure(this.nodes).subscribe(nodes => {\n        this.mergeWithWatermarks(nodes).subscribe(nodes2 => {\n          nodes2.forEach(node => {\n            this.dagreComponent.updateNode(node.id, node);\n          });\n        });\n      });\n    }\n\n    ngOnInit() {\n      this.jobService.jobDetail$.pipe(filter(job => job.jid === this.activatedRoute.parent.parent.snapshot.params.jid), takeUntil(this.destroy$)).subscribe(data => {\n        if (this.jobId !== data.plan.jid) {\n          this.nodes = data.plan.nodes;\n          this.links = data.plan.links;\n          this.jobId = data.plan.jid;\n          this.dagreComponent.flush(this.nodes, this.links, true).then();\n          this.refreshNodesWithMetrics();\n        } else {\n          this.nodes = data.plan.nodes;\n          this.refreshNodesWithMetrics();\n        }\n\n        this.cdr.markForCheck();\n      });\n      this.jobService.selectedVertex$.pipe(takeUntil(this.destroy$)).subscribe(data => {\n        if (data) {\n          this.dagreComponent.focusNode(data);\n        } else if (this.selectedNode) {\n          this.timeoutId = setTimeout(() => this.dagreComponent.redrawGraph());\n        }\n\n        this.selectedNode = data;\n      });\n    }\n\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n      clearTimeout(this.timeoutId);\n    }\n\n  }\n\n  JobOverviewComponent.ɵfac = function JobOverviewComponent_Factory(t) {\n    return new (t || JobOverviewComponent)(i0.ɵɵdirectiveInject(i1.JobService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.MetricsService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  JobOverviewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: JobOverviewComponent,\n    selectors: [[\"flink-job-overview\"]],\n    viewQuery: function JobOverviewComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(DagreComponent, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dagreComponent = _t.first);\n      }\n    },\n    decls: 5,\n    vars: 9,\n    consts: [[1, \"container\"], [3, \"xCenter\", \"nodeClick\"], [3, \"nodes\", \"selectedNode\", \"nodeClick\"], [3, \"top\", \"mode\", \"baseElement\", \"resizeMin\", \"topChange\", \"resizeEnd\"]],\n    template: function JobOverviewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"flink-dagre\", 1);\n        i0.ɵɵlistener(\"nodeClick\", function JobOverviewComponent_Template_flink_dagre_nodeClick_1_listener($event) {\n          return ctx.onNodeClick($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(2, \"router-outlet\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"flink-job-overview-list\", 2);\n        i0.ɵɵlistener(\"nodeClick\", function JobOverviewComponent_Template_flink_job_overview_list_nodeClick_3_listener($event) {\n          return ctx.onNodeClick($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"flink-resize\", 3);\n        i0.ɵɵlistener(\"topChange\", function JobOverviewComponent_Template_flink_resize_topChange_4_listener($event) {\n          return ctx.top = $event;\n        })(\"resizeEnd\", function JobOverviewComponent_Template_flink_resize_resizeEnd_4_listener() {\n          return ctx.onResizeEnd();\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"height\", ctx.top, \"px\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"xCenter\", 4);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"nodes\", ctx.nodes)(\"selectedNode\", ctx.selectedNode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"top\", ctx.top)(\"mode\", \"horizontal\")(\"baseElement\", ctx.elementRef)(\"resizeMin\", 280);\n      }\n    },\n    directives: [i3.DagreComponent, i2.RouterOutlet, i4.JobOverviewListComponent, i5.ResizeComponent],\n    styles: [\".container[_ngcontent-%COMP%]{width:100%;overflow:hidden;height:500px;position:relative;border-bottom:1px solid #f0f0f0}nz-radio-group[_ngcontent-%COMP%]{position:absolute;right:24px;z-index:1;top:15px;opacity:.7;transition:opacity .28s ease-in}nz-radio-group[_ngcontent-%COMP%]:hover{opacity:1}flink-dagre[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;left:0}flink-job-overview-drawer[_ngcontent-%COMP%]{width:60%;height:100%;position:absolute;right:0;background:#fff;border-left:1px solid #f0f0f0}[_nghost-%COMP%]{height:100%;display:block;position:relative}\"],\n    changeDetection: 0\n  });\n  return JobOverviewComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}