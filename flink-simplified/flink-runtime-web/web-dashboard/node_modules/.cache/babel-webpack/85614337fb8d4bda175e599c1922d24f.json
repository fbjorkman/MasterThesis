{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter } from '@angular/core';\nimport { select } from 'd3-selection';\nimport { zoom } from 'd3-zoom';\nimport * as d3 from 'd3';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"svgContainer\"];\nconst _c1 = [\"svgInner\"];\nconst _c2 = [\"*\"];\nexport let SvgContainerComponent = /*#__PURE__*/(() => {\n  class SvgContainerComponent {\n    constructor(el) {\n      this.el = el;\n      this.zoom = 1;\n      this.transform = 'translate(0, 0) scale(1)';\n      this.containerTransform = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      this.nzMaxZoom = 5;\n      this.nzMinZoom = 0.1;\n      this.clickBgEvent = new EventEmitter();\n      this.zoomEvent = new EventEmitter();\n      this.transformEvent = new EventEmitter();\n    }\n    /**\n     * Zoom to spec level\n     * @param zoomLevel\n     */\n\n\n    zoomTo(zoomLevel) {\n      this.svgSelect.transition().duration(0).call(this.zoomController.scaleTo, zoomLevel);\n    }\n    /**\n     * Set transform position\n     * @param transform\n     * @param animate\n     */\n\n\n    setPositionByTransform(transform, animate = false) {\n      this.svgSelect.transition().duration(animate ? 500 : 0).call(this.zoomController.transform, transform);\n    }\n\n    ngOnInit() {\n      this.svgSelect = select(this.svgContainer.nativeElement);\n      this.zoomController = zoom().scaleExtent([this.nzMinZoom, this.nzMaxZoom]).on('zoom', () => {\n        this.containerTransform = d3.event.transform;\n        this.zoom = this.containerTransform.k;\n\n        if (!isNaN(this.containerTransform.x)) {\n          this.transform = `translate(${this.containerTransform.x} ,${this.containerTransform.y})scale(${this.containerTransform.k})`;\n        }\n\n        this.zoomEvent.emit(this.zoom);\n        this.transformEvent.emit(this.containerTransform);\n      });\n      this.svgSelect.call(this.zoomController).on('wheel.zoom', null);\n    }\n\n    ngAfterContentInit() {\n      const hostElem = this.el.nativeElement;\n\n      if (hostElem.parentNode !== null) {\n        const dims = hostElem.parentNode.getBoundingClientRect();\n        this.width = dims.width;\n        this.height = dims.height;\n        this.zoomTo(this.zoom);\n      }\n    }\n\n  }\n\n  SvgContainerComponent.ɵfac = function SvgContainerComponent_Factory(t) {\n    return new (t || SvgContainerComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  SvgContainerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SvgContainerComponent,\n    selectors: [[\"flink-svg-container\"]],\n    viewQuery: function SvgContainerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgContainer = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgInner = _t.first);\n      }\n    },\n    inputs: {\n      nzMaxZoom: \"nzMaxZoom\",\n      nzMinZoom: \"nzMinZoom\"\n    },\n    outputs: {\n      clickBgEvent: \"clickBgEvent\",\n      zoomEvent: \"zoomEvent\",\n      transformEvent: \"transformEvent\"\n    },\n    ngContentSelectors: _c2,\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"svg-container\"], [\"width\", \"100%\", \"height\", \"100%\", 1, \"svg-inner\"], [\"svgContainer\", \"\"], [\"width\", \"100%\", \"height\", \"100%\", \"fill\", \"transparent\", 1, \"background\", 3, \"click\"], [\"svgInner\", \"\"]],\n    template: function SvgContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(1, \"svg\", 1, 2);\n        i0.ɵɵelementStart(3, \"rect\", 3);\n        i0.ɵɵlistener(\"click\", function SvgContainerComponent_Template__svg_rect_click_3_listener($event) {\n          return ctx.clickBgEvent.emit($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"g\", null, 4);\n        i0.ɵɵprojection(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵattribute(\"transform\", ctx.transform);\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{display:block;position:relative;height:100%;width:100%}.svg-container[_ngcontent-%COMP%]{display:block;position:relative;height:100%;width:100%}.svg-container[_ngcontent-%COMP%]   .svg-inner[_ngcontent-%COMP%]{position:absolute;top:0;left:0}.svg-container[_ngcontent-%COMP%]   .svg-inner[_ngcontent-%COMP%]   .background[_ngcontent-%COMP%]{cursor:move}\"],\n    changeDetection: 0\n  });\n  return SvgContainerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}