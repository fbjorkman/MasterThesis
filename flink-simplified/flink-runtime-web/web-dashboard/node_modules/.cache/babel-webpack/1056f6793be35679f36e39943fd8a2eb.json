{"ast":null,"code":"import { first } from 'rxjs/operators';\nimport { MonacoEditorComponent } from 'share/common/monaco-editor/monaco-editor.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"services\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ng-zorro-antd/breadcrumb\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"share/customize/refresh-download/refresh-download.component\";\nimport * as i6 from \"share/common/monaco-editor/monaco-editor.component\";\nimport * as i7 from \"ng-zorro-antd/icon\";\n\nconst _c0 = function (a2) {\n  return [\"/\", \"task-manager\", a2, \"log-list\"];\n};\n\nfunction TaskManagerLogDetailComponent_a_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 4);\n    i0.ɵɵelement(1, \"i\", 5);\n    i0.ɵɵtext(2, \" Log List \");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(1, _c0, ctx_r0.taskManagerDetail.id));\n  }\n}\n\nexport let TaskManagerLogDetailComponent = /*#__PURE__*/(() => {\n  class TaskManagerLogDetailComponent {\n    constructor(taskManagerService, cdr, activatedRoute) {\n      this.taskManagerService = taskManagerService;\n      this.cdr = cdr;\n      this.activatedRoute = activatedRoute;\n      this.logs = '';\n      this.logName = '';\n      this.downloadUrl = '';\n      this.isLoading = false;\n      this.isFullScreen = false;\n    }\n\n    reloadLog() {\n      this.isLoading = true;\n      this.cdr.markForCheck();\n      this.taskManagerService.loadLog(this.taskManagerDetail.id, this.logName).subscribe(data => {\n        this.logs = data.data;\n        this.downloadUrl = data.url;\n        this.isLoading = false;\n        this.layoutEditor();\n        this.cdr.markForCheck();\n      }, () => {\n        this.isLoading = false;\n        this.layoutEditor();\n        this.cdr.markForCheck();\n      });\n    }\n\n    toggleFullScreen(fullScreen) {\n      this.isFullScreen = fullScreen;\n      this.layoutEditor();\n    }\n\n    layoutEditor() {\n      setTimeout(() => this.monacoEditorComponent.layout());\n    }\n\n    ngOnInit() {\n      this.taskManagerService.taskManagerDetail$.pipe(first()).subscribe(data => {\n        this.taskManagerDetail = data;\n        this.logName = this.activatedRoute.snapshot.params.logName;\n        this.reloadLog();\n      });\n    }\n\n  }\n\n  TaskManagerLogDetailComponent.ɵfac = function TaskManagerLogDetailComponent_Factory(t) {\n    return new (t || TaskManagerLogDetailComponent)(i0.ɵɵdirectiveInject(i1.TaskManagerService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n\n  TaskManagerLogDetailComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TaskManagerLogDetailComponent,\n    selectors: [[\"flink-task-manager-log-detail\"]],\n    viewQuery: function TaskManagerLogDetailComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MonacoEditorComponent, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.monacoEditorComponent = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function TaskManagerLogDetailComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"full-screen\", ctx.isFullScreen);\n      }\n    },\n    decls: 8,\n    vars: 6,\n    consts: [[1, \"breadcrumb\"], [3, \"routerLink\", 4, \"ngIf\"], [3, \"isLoading\", \"downloadHref\", \"downloadName\", \"reload\", \"fullScreen\"], [3, \"value\"], [3, \"routerLink\"], [\"nz-icon\", \"\", \"nzType\", \"rollback\", \"nzTheme\", \"outline\"]],\n    template: function TaskManagerLogDetailComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"nz-breadcrumb\");\n        i0.ɵɵelementStart(2, \"nz-breadcrumb-item\");\n        i0.ɵɵtemplate(3, TaskManagerLogDetailComponent_a_3_Template, 3, 3, \"a\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"nz-breadcrumb-item\");\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"flink-refresh-download\", 2);\n        i0.ɵɵlistener(\"reload\", function TaskManagerLogDetailComponent_Template_flink_refresh_download_reload_6_listener() {\n          return ctx.reloadLog();\n        })(\"fullScreen\", function TaskManagerLogDetailComponent_Template_flink_refresh_download_fullScreen_6_listener($event) {\n          return ctx.toggleFullScreen($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"flink-monaco-editor\", 3);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.taskManagerDetail);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.logName, \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"isLoading\", ctx.isLoading)(\"downloadHref\", ctx.downloadUrl)(\"downloadName\", ctx.logName);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.logs);\n      }\n    },\n    directives: [i3.NzBreadCrumbComponent, i3.NzBreadCrumbItemComponent, i4.NgIf, i5.RefreshDownloadComponent, i6.MonacoEditorComponent, i2.RouterLinkWithHref, i7.NzIconDirective],\n    styles: [\"[_nghost-%COMP%]{display:block;height:100%}.full-screen[_nghost-%COMP%]{position:fixed;top:0;bottom:0;right:0;left:0;background:#fff;z-index:99}.full-screen[_nghost-%COMP%]   .breadcrumb[_ngcontent-%COMP%]{margin-bottom:0;border-top:0}.full-screen[_nghost-%COMP%]   flink-monaco-editor[_ngcontent-%COMP%]{border-top:0;border-bottom:0;height:calc(100vh - 46px)}flink-monaco-editor[_ngcontent-%COMP%]{height:calc(100vh - 386px);border:1px solid #f0f0f0}.breadcrumb[_ngcontent-%COMP%]{background:#fff;border:1px solid #f0f0f0;margin-bottom:16px;padding:12px 24px;position:relative}flink-refresh-download[_ngcontent-%COMP%]{position:absolute;right:12px;top:0;line-height:47px}\"],\n    changeDetection: 0\n  });\n  return TaskManagerLogDetailComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}