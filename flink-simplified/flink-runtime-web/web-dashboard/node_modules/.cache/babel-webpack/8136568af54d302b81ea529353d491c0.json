{"ast":null,"code":"import { Directive, Injectable, Component, ViewEncapsulation, ChangeDetectionStrategy, forwardRef, ChangeDetectorRef, ElementRef, Optional, Input, ViewChild, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { ReplaySubject, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nconst _c0 = [\"*\"];\nconst _c1 = [\"inputElement\"];\nconst _c2 = [\"nz-radio\", \"\"];\nlet NzRadioButtonDirective = /*#__PURE__*/(() => {\n  class NzRadioButtonDirective {}\n\n  NzRadioButtonDirective.ɵfac = function NzRadioButtonDirective_Factory(t) {\n    return new (t || NzRadioButtonDirective)();\n  };\n\n  NzRadioButtonDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NzRadioButtonDirective,\n    selectors: [[\"\", \"nz-radio-button\", \"\"]]\n  });\n  /**\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n   */\n\n  return NzRadioButtonDirective;\n})();\nlet NzRadioService = /*#__PURE__*/(() => {\n  class NzRadioService {\n    constructor() {\n      this.selected$ = new ReplaySubject(1);\n      this.touched$ = new Subject();\n      this.disabled$ = new ReplaySubject(1);\n      this.name$ = new ReplaySubject(1);\n    }\n\n    touch() {\n      this.touched$.next();\n    }\n\n    select(value) {\n      this.selected$.next(value);\n    }\n\n    setDisabled(value) {\n      this.disabled$.next(value);\n    }\n\n    setName(value) {\n      this.name$.next(value);\n    }\n\n  }\n\n  NzRadioService.ɵfac = function NzRadioService_Factory(t) {\n    return new (t || NzRadioService)();\n  };\n\n  NzRadioService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NzRadioService,\n    factory: NzRadioService.ɵfac\n  });\n  /**\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n   */\n\n  return NzRadioService;\n})();\nlet NzRadioGroupComponent = /*#__PURE__*/(() => {\n  class NzRadioGroupComponent {\n    constructor(cdr, nzRadioService, elementRef, directionality) {\n      this.cdr = cdr;\n      this.nzRadioService = nzRadioService;\n      this.elementRef = elementRef;\n      this.directionality = directionality;\n      this.value = null;\n      this.destroy$ = new Subject();\n\n      this.onChange = () => {};\n\n      this.onTouched = () => {};\n\n      this.nzDisabled = false;\n      this.nzButtonStyle = 'outline';\n      this.nzSize = 'default';\n      this.nzName = null;\n      this.dir = 'ltr'; // TODO: move to host after View Engine deprecation\n\n      this.elementRef.nativeElement.classList.add('ant-radio-group');\n    }\n\n    ngOnInit() {\n      var _a;\n\n      this.nzRadioService.selected$.pipe(takeUntil(this.destroy$)).subscribe(value => {\n        if (this.value !== value) {\n          this.value = value;\n          this.onChange(this.value);\n        }\n      });\n      this.nzRadioService.touched$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        Promise.resolve().then(() => this.onTouched());\n      });\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.detectChanges();\n      });\n      this.dir = this.directionality.value;\n    }\n\n    ngOnChanges(changes) {\n      const {\n        nzDisabled,\n        nzName\n      } = changes;\n\n      if (nzDisabled) {\n        this.nzRadioService.setDisabled(this.nzDisabled);\n      }\n\n      if (nzName) {\n        this.nzRadioService.setName(this.nzName);\n      }\n    }\n\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n\n    writeValue(value) {\n      this.value = value;\n      this.nzRadioService.select(value);\n      this.cdr.markForCheck();\n    }\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled) {\n      this.nzDisabled = isDisabled;\n      this.nzRadioService.setDisabled(isDisabled);\n      this.cdr.markForCheck();\n    }\n\n  }\n\n  NzRadioGroupComponent.ɵfac = function NzRadioGroupComponent_Factory(t) {\n    return new (t || NzRadioGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(NzRadioService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n  };\n\n  NzRadioGroupComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NzRadioGroupComponent,\n    selectors: [[\"nz-radio-group\"]],\n    hostVars: 8,\n    hostBindings: function NzRadioGroupComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-radio-group-large\", ctx.nzSize === \"large\")(\"ant-radio-group-small\", ctx.nzSize === \"small\")(\"ant-radio-group-solid\", ctx.nzButtonStyle === \"solid\")(\"ant-radio-group-rtl\", ctx.dir === \"rtl\");\n      }\n    },\n    inputs: {\n      nzDisabled: \"nzDisabled\",\n      nzButtonStyle: \"nzButtonStyle\",\n      nzSize: \"nzSize\",\n      nzName: \"nzName\"\n    },\n    exportAs: [\"nzRadioGroup\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([NzRadioService, {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NzRadioGroupComponent),\n      multi: true\n    }]), ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function NzRadioGroupComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean()], NzRadioGroupComponent.prototype, \"nzDisabled\", void 0);\n  /**\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n   */\n\n\n  return NzRadioGroupComponent;\n})();\nlet NzRadioComponent = /*#__PURE__*/(() => {\n  class NzRadioComponent {\n    constructor(elementRef, cdr, focusMonitor, directionality, nzRadioService, nzRadioButtonDirective) {\n      this.elementRef = elementRef;\n      this.cdr = cdr;\n      this.focusMonitor = focusMonitor;\n      this.directionality = directionality;\n      this.nzRadioService = nzRadioService;\n      this.nzRadioButtonDirective = nzRadioButtonDirective;\n      this.isNgModel = false;\n      this.destroy$ = new Subject();\n      this.isChecked = false;\n      this.name = null;\n      this.isRadioButton = !!this.nzRadioButtonDirective;\n\n      this.onChange = () => {};\n\n      this.onTouched = () => {};\n\n      this.nzValue = null;\n      this.nzDisabled = false;\n      this.nzAutoFocus = false;\n      this.dir = 'ltr';\n    }\n\n    onHostClick(event) {\n      /** prevent label click triggered twice. **/\n      event.stopPropagation();\n      event.preventDefault();\n\n      if (!this.nzDisabled && !this.isChecked) {\n        if (this.nzRadioService) {\n          this.nzRadioService.select(this.nzValue);\n        }\n\n        if (this.isNgModel) {\n          this.isChecked = true;\n          this.onChange(true);\n        }\n      }\n    }\n\n    focus() {\n      this.focusMonitor.focusVia(this.inputElement, 'keyboard');\n    }\n\n    blur() {\n      this.inputElement.nativeElement.blur();\n    }\n\n    setDisabledState(disabled) {\n      this.nzDisabled = disabled;\n      this.cdr.markForCheck();\n    }\n\n    writeValue(value) {\n      this.isChecked = value;\n      this.cdr.markForCheck();\n    }\n\n    registerOnChange(fn) {\n      this.isNgModel = true;\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    ngOnInit() {\n      var _a;\n\n      if (this.nzRadioService) {\n        this.nzRadioService.name$.pipe(takeUntil(this.destroy$)).subscribe(name => {\n          this.name = name;\n          this.cdr.markForCheck();\n        });\n        this.nzRadioService.disabled$.pipe(takeUntil(this.destroy$)).subscribe(disabled => {\n          this.nzDisabled = disabled;\n          this.cdr.markForCheck();\n        });\n        this.nzRadioService.selected$.pipe(takeUntil(this.destroy$)).subscribe(value => {\n          this.isChecked = this.nzValue === value;\n          this.cdr.markForCheck();\n        });\n      }\n\n      this.focusMonitor.monitor(this.elementRef, true).pipe(takeUntil(this.destroy$)).subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          Promise.resolve().then(() => this.onTouched());\n\n          if (this.nzRadioService) {\n            this.nzRadioService.touch();\n          }\n        }\n      });\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.detectChanges();\n      });\n      this.dir = this.directionality.value;\n    }\n\n    ngAfterViewInit() {\n      if (this.nzAutoFocus) {\n        this.focus();\n      }\n    }\n\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n      this.focusMonitor.stopMonitoring(this.elementRef);\n    }\n\n  }\n\n  NzRadioComponent.ɵfac = function NzRadioComponent_Factory(t) {\n    return new (t || NzRadioComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(NzRadioService, 8), ɵngcc0.ɵɵdirectiveInject(NzRadioButtonDirective, 8));\n  };\n\n  NzRadioComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NzRadioComponent,\n    selectors: [[\"\", \"nz-radio\", \"\"], [\"\", \"nz-radio-button\", \"\"]],\n    viewQuery: function NzRadioComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);\n      }\n    },\n    hostVars: 16,\n    hostBindings: function NzRadioComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NzRadioComponent_click_HostBindingHandler($event) {\n          return ctx.onHostClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-radio-wrapper\", !ctx.isRadioButton)(\"ant-radio-button-wrapper\", ctx.isRadioButton)(\"ant-radio-wrapper-checked\", ctx.isChecked && !ctx.isRadioButton)(\"ant-radio-button-wrapper-checked\", ctx.isChecked && ctx.isRadioButton)(\"ant-radio-wrapper-disabled\", ctx.nzDisabled && !ctx.isRadioButton)(\"ant-radio-button-wrapper-disabled\", ctx.nzDisabled && ctx.isRadioButton)(\"ant-radio-wrapper-rtl\", !ctx.isRadioButton && ctx.dir === \"rtl\")(\"ant-radio-button-wrapper-rtl\", ctx.isRadioButton && ctx.dir === \"rtl\");\n      }\n    },\n    inputs: {\n      nzValue: \"nzValue\",\n      nzDisabled: \"nzDisabled\",\n      nzAutoFocus: \"nzAutoFocus\"\n    },\n    exportAs: [\"nzRadio\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NzRadioComponent),\n      multi: true\n    }])],\n    attrs: _c2,\n    ngContentSelectors: _c0,\n    decls: 6,\n    vars: 24,\n    consts: [[\"type\", \"radio\", 3, \"disabled\", \"checked\"], [\"inputElement\", \"\"]],\n    template: function NzRadioComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵelement(1, \"input\", 0, 1);\n        ɵngcc0.ɵɵelement(3, \"span\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(4, \"span\");\n        ɵngcc0.ɵɵprojection(5);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-radio\", !ctx.isRadioButton)(\"ant-radio-checked\", ctx.isChecked && !ctx.isRadioButton)(\"ant-radio-disabled\", ctx.nzDisabled && !ctx.isRadioButton)(\"ant-radio-button\", ctx.isRadioButton)(\"ant-radio-button-checked\", ctx.isChecked && ctx.isRadioButton)(\"ant-radio-button-disabled\", ctx.nzDisabled && ctx.isRadioButton);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"ant-radio-input\", !ctx.isRadioButton)(\"ant-radio-button-input\", ctx.isRadioButton);\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.nzDisabled)(\"checked\", ctx.isChecked);\n        ɵngcc0.ɵɵattribute(\"autofocus\", ctx.nzAutoFocus ? \"autofocus\" : null)(\"name\", ctx.name);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"ant-radio-inner\", !ctx.isRadioButton)(\"ant-radio-button-inner\", ctx.isRadioButton);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean()], NzRadioComponent.prototype, \"nzDisabled\", void 0);\n\n  __decorate([InputBoolean()], NzRadioComponent.prototype, \"nzAutoFocus\", void 0);\n\n  return NzRadioComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nlet NzRadioModule = /*#__PURE__*/(() => {\n  class NzRadioModule {}\n\n  NzRadioModule.ɵfac = function NzRadioModule_Factory(t) {\n    return new (t || NzRadioModule)();\n  };\n\n  NzRadioModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NzRadioModule\n  });\n  NzRadioModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[BidiModule, CommonModule, FormsModule]]\n  });\n  return NzRadioModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzRadioModule, {\n    declarations: function () {\n      return [NzRadioComponent, NzRadioButtonDirective, NzRadioGroupComponent];\n    },\n    imports: function () {\n      return [BidiModule, CommonModule, FormsModule];\n    },\n    exports: function () {\n      return [NzRadioComponent, NzRadioButtonDirective, NzRadioGroupComponent];\n    }\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzRadioButtonDirective, NzRadioComponent, NzRadioGroupComponent, NzRadioModule, NzRadioService }; //# sourceMappingURL=ng-zorro-antd-radio.js.map","map":null,"metadata":{},"sourceType":"module"}