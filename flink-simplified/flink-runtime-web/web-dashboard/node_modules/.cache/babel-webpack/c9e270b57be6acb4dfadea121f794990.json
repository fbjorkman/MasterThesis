{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, mapTo } from 'rxjs/operators';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * User should provide an object implements this interface to set global configurations.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nconst NZ_CONFIG = new InjectionToken('nz-config');\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nconst isDefined = function (value) {\n  return value !== undefined;\n};\n\nconst ɵ0 = isDefined;\nlet NzConfigService = /*#__PURE__*/(() => {\n  class NzConfigService {\n    constructor(defaultConfig) {\n      this.configUpdated$ = new Subject();\n      this.config = defaultConfig || {};\n    }\n\n    getConfig() {\n      return this.config;\n    }\n\n    getConfigForComponent(componentName) {\n      return this.config[componentName];\n    }\n\n    getConfigChangeEventForComponent(componentName) {\n      return this.configUpdated$.pipe(filter(n => n === componentName), mapTo(undefined));\n    }\n\n    set(componentName, value) {\n      this.config[componentName] = Object.assign(Object.assign({}, this.config[componentName]), value);\n      this.configUpdated$.next(componentName);\n    }\n\n  }\n\n  NzConfigService.ɵfac = function NzConfigService_Factory(t) {\n    return new (t || NzConfigService)(ɵngcc0.ɵɵinject(NZ_CONFIG, 8));\n  };\n\n  NzConfigService.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function NzConfigService_Factory() {\n      return new NzConfigService(i0.ɵɵinject(NZ_CONFIG, 8));\n    },\n    token: NzConfigService,\n    providedIn: \"root\"\n  });\n  return NzConfigService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/* eslint-disable no-invalid-this */\n\n/**\n * This decorator is used to decorate properties. If a property is decorated, it would try to load default value from\n * config.\n */\n// eslint-disable-next-line\n\n\nfunction WithConfig() {\n  return function ConfigDecorator(target, propName, originalDescriptor) {\n    const privatePropName = `$$__zorroConfigDecorator__${propName}`;\n    Object.defineProperty(target, privatePropName, {\n      configurable: true,\n      writable: true,\n      enumerable: false\n    });\n    return {\n      get() {\n        var _a, _b;\n\n        const originalValue = (originalDescriptor === null || originalDescriptor === void 0 ? void 0 : originalDescriptor.get) ? originalDescriptor.get.bind(this)() : this[privatePropName];\n        const assignedByUser = (((_a = this.propertyAssignCounter) === null || _a === void 0 ? void 0 : _a[propName]) || 0) > 1;\n        const configValue = (_b = this.nzConfigService.getConfigForComponent(this._nzModuleName)) === null || _b === void 0 ? void 0 : _b[propName];\n\n        if (assignedByUser && isDefined(originalValue)) {\n          return originalValue;\n        } else {\n          return isDefined(configValue) ? configValue : originalValue;\n        }\n      },\n\n      set(value) {\n        // If the value is assigned, we consider the newly assigned value as 'assigned by user'.\n        this.propertyAssignCounter = this.propertyAssignCounter || {};\n        this.propertyAssignCounter[propName] = (this.propertyAssignCounter[propName] || 0) + 1;\n\n        if (originalDescriptor === null || originalDescriptor === void 0 ? void 0 : originalDescriptor.set) {\n          originalDescriptor.set.bind(this)(value);\n        } else {\n          this[privatePropName] = value;\n        }\n      },\n\n      configurable: true,\n      enumerable: true\n    };\n  };\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NZ_CONFIG, NzConfigService, WithConfig, ɵ0 }; //# sourceMappingURL=ng-zorro-antd-core-config.js.map","map":null,"metadata":{},"sourceType":"module"}