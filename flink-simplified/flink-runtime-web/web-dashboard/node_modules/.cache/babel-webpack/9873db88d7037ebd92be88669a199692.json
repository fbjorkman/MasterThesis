{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = [\"flink-node\", \"\"];\n\nfunction NodeComponent__xhtml_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Low Watermark: \", ctx_r0.lowWatermark, \" \");\n  }\n}\n\nfunction NodeComponent__xhtml_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Operation: \", ctx_r1.operatorStrategy, \" \");\n  }\n}\n\nexport let NodeComponent = /*#__PURE__*/(() => {\n  class NodeComponent {\n    constructor(cd) {\n      this.cd = cd;\n      this.backPressuredPercentage = NaN;\n      this.busyPercentage = NaN;\n      this.height = 0;\n      this.backgroundBusyColor = '#ee6464';\n      this.backgroundDefaultColor = '#5db1ff';\n      this.backgroundBackPressuredColor = '#888888';\n      this.borderBusyColor = '#ee2222';\n      this.borderDefaultColor = '#1890ff';\n      this.borderBackPressuredColor = '#000000';\n\n      this.isValid = value => {\n        return value || value === 0 || value === NaN;\n      };\n\n      this.toRGBA = d => {\n        const l = d.length;\n        const rgba = [];\n        const hex = parseInt(d.slice(1), 16);\n        rgba[0] = hex >> 16 & 255;\n        rgba[1] = hex >> 8 & 255;\n        rgba[2] = hex & 255;\n        rgba[3] = l === 9 || l === 5 ? Math.round((hex >> 24 & 255) / 255 * 10000) / 10000 : -1;\n        return rgba;\n      };\n\n      this.blend = (from, to, p = 0.5) => {\n        from = from.trim();\n        to = to.trim();\n        const b = p < 0;\n        p = b ? p * -1 : p;\n        const f = this.toRGBA(from);\n        const t = this.toRGBA(to);\n\n        if (to[0] === 'r') {\n          return 'rgb' + (to[3] === 'a' ? 'a(' : '(') + Math.round((t[0] - f[0]) * p + f[0]) + ',' + Math.round((t[1] - f[1]) * p + f[1]) + ',' + Math.round((t[2] - f[2]) * p + f[2]) + (f[3] < 0 && t[3] < 0 ? '' : ',' + (f[3] > -1 && t[3] > -1 ? Math.round(((t[3] - f[3]) * p + f[3]) * 10000) / 10000 : t[3] < 0 ? f[3] : t[3])) + ')';\n        }\n\n        return '#' + (0x100000000 + (f[3] > -1 && t[3] > -1 ? Math.round(((t[3] - f[3]) * p + f[3]) * 255) : t[3] > -1 ? Math.round(t[3] * 255) : f[3] > -1 ? Math.round(f[3] * 255) : 255) * 0x1000000 + Math.round((t[0] - f[0]) * p + f[0]) * 0x10000 + Math.round((t[1] - f[1]) * p + f[1]) * 0x100 + Math.round((t[2] - f[2]) * p + f[2])).toString(16).slice(f[3] > -1 || t[3] > -1 ? 1 : 3);\n      };\n    }\n\n    decodeHTML(value) {\n      const parser = new DOMParser();\n      const dom = parser.parseFromString('<!doctype html><body>' + value, 'text/html');\n      return dom.body.textContent;\n    }\n\n    set node(value) {\n      const description = this.decodeHTML(value.description);\n      this.operator = this.decodeHTML(value.operator);\n      this.operatorStrategy = this.decodeHTML(value.operator_strategy);\n      this.parallelism = value.parallelism;\n      this.lowWatermark = value.lowWatermark;\n\n      if (this.isValid(value.backPressuredPercentage)) {\n        this.backPressuredPercentage = value.backPressuredPercentage;\n      }\n\n      if (this.isValid(value.busyPercentage)) {\n        this.busyPercentage = value.busyPercentage;\n      }\n\n      this.height = value.height || 0;\n      this.id = value.id;\n\n      if (description && description.length > 300) {\n        this.description = description.slice(0, 300) + '...';\n      } else {\n        this.description = description;\n      }\n    }\n    /**\n     * Update and check node component\n     * @param node\n     */\n\n\n    update(node) {\n      this.node = node;\n      this.backgroundColor = this.backgroundDefaultColor;\n      this.borderColor = this.borderDefaultColor;\n\n      if (node.busyPercentage) {\n        this.backgroundColor = this.blend(this.backgroundColor, this.backgroundBusyColor, node.busyPercentage / 100.0);\n        this.borderColor = this.blend(this.borderColor, this.borderBusyColor, node.busyPercentage / 100.0);\n      }\n\n      if (node.backPressuredPercentage) {\n        this.backgroundColor = this.blend(this.backgroundColor, this.backgroundBackPressuredColor, node.backPressuredPercentage / 100.0);\n        this.borderColor = this.blend(this.borderColor, this.borderBackPressuredColor, node.backPressuredPercentage / 100.0);\n      }\n\n      this.cd.markForCheck();\n    }\n\n    prettyPrint(value) {\n      if (value === undefined || isNaN(value)) {\n        return \"N/A\";\n      } else {\n        return value + \"%\";\n      }\n    }\n\n  }\n\n  NodeComponent.ɵfac = function NodeComponent_Factory(t) {\n    return new (t || NodeComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  NodeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NodeComponent,\n    selectors: [[\"\", \"flink-node\", \"\"]],\n    inputs: {\n      node: \"node\"\n    },\n    attrs: _c0,\n    decls: 16,\n    vars: 14,\n    consts: [[1, \"node\", \"node-rect\"], [1, \"node-labels-container\"], [1, \"node-label-wrapper\"], [1, \"content-wrap\"], [1, \"detail\"], [1, \"detail\", \"description\"], [1, \"node-label\"], [\"title\", \"Maximum back pressured percentage across all subtasks\", 1, \"node-label\", \"metric\"], [\"title\", \"Maximum busy percentage across all subtasks\", 1, \"node-label\", \"metric\"], [\"class\", \"node-label metric\", 4, \"ngIf\"], [\"class\", \"detail last\", 4, \"ngIf\"], [1, \"node-label\", \"metric\"], [1, \"detail\", \"last\"]],\n    template: function NodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(0, \"g\", 0);\n        i0.ɵɵelementStart(1, \"foreignObject\", 1);\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"h4\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 6);\n        i0.ɵɵtext(9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 7);\n        i0.ɵɵtext(11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 8);\n        i0.ɵɵtext(13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(14, NodeComponent__xhtml_div_14_Template, 2, 1, \"div\", 9);\n        i0.ɵɵtemplate(15, NodeComponent__xhtml_div_15_Template, 2, 1, \"div\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"y\", ctx.height ? -ctx.height / 2 : 0)(\"width\", 205)(\"height\", ctx.height);\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleProp(\"border-color\", ctx.borderColor)(\"background-color\", ctx.backgroundColor);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.operator);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.description);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Parallelism: \", ctx.parallelism, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" Backpressured (max): \", ctx.prettyPrint(ctx.backPressuredPercentage), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" Busy (max): \", ctx.prettyPrint(ctx.busyPercentage), \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.lowWatermark);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.operatorStrategy);\n      }\n    },\n    directives: [i1.NgIf],\n    styles: [\"[_nghost-%COMP%]{cursor:pointer}[_nghost-%COMP%]   .node-label-wrapper[_ngcontent-%COMP%]{display:inline-block;vertical-align:top;cursor:pointer;pointer-events:all;font-size:12px;width:100%;height:100%;line-height:1.2;border-radius:0;padding:15px;color:rgba(0,0,0,.85);text-align:left;word-break:break-all;border-width:1px;border-style:solid}[_nghost-%COMP%]   .node-label-wrapper[_ngcontent-%COMP%]   .content-wrap[_ngcontent-%COMP%]{font-size:12px}[_nghost-%COMP%]   .node-label-wrapper[_ngcontent-%COMP%]   .node-label[_ngcontent-%COMP%]{text-align:center;width:100%;margin-bottom:12px;font-weight:700}[_nghost-%COMP%]   .node-label-wrapper[_ngcontent-%COMP%]   .node-label[_ngcontent-%COMP%]:first-child{margin-top:24px}[_nghost-%COMP%]   .node-label-wrapper[_ngcontent-%COMP%]   .node-label.metric[_ngcontent-%COMP%]{font-weight:400;font-weight:12px;margin-bottom:2px;color:rgba(0,0,0,.45)}[_nghost-%COMP%]   .node-label-wrapper[_ngcontent-%COMP%]   .detail[_ngcontent-%COMP%]{margin-bottom:2px;color:rgba(0,0,0,.85)}[_nghost-%COMP%]   .node-label-wrapper[_ngcontent-%COMP%]   .detail.description[_ngcontent-%COMP%]{color:rgba(0,0,0,.85)}[_nghost-%COMP%]   .node-label-wrapper[_ngcontent-%COMP%]   .detail.last[_ngcontent-%COMP%]{margin-bottom:0}\"],\n    changeDetection: 0\n  });\n  return NodeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}