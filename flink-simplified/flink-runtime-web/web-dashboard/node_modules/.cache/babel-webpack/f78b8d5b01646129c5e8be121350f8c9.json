{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { flatMap, takeUntil } from 'rxjs/operators';\nimport { deepFind } from 'utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"services\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ng-zorro-antd/card\";\nimport * as i4 from \"ng-zorro-antd/table\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"share/pipes/humanize-bytes.pipe\";\n\nfunction TaskManagerListComponent_ng_container_24_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"tr\", 7);\n    i0.ɵɵlistener(\"click\", function TaskManagerListComponent_ng_container_24_Template_tr_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const manager_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.navigateTo(manager_r2);\n    });\n    i0.ɵɵelementStart(2, \"td\", 8);\n    i0.ɵɵelementStart(3, \"em\", 9);\n    i0.ɵɵelementStart(4, \"a\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"br\");\n    i0.ɵɵelementStart(7, \"em\", 9);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵpipe(13, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"td\");\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"td\");\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"td\");\n    i0.ɵɵtext(19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"td\");\n    i0.ɵɵtext(21);\n    i0.ɵɵpipe(22, \"humanizeBytes\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"td\");\n    i0.ɵɵtext(24);\n    i0.ɵɵpipe(25, \"humanizeBytes\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(26, \"td\", 10);\n    i0.ɵɵtext(27);\n    i0.ɵɵpipe(28, \"humanizeBytes\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const manager_r2 = ctx.$implicit;\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(manager_r2.id);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(manager_r2.path);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(manager_r2.dataPort);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(13, 13, manager_r2.timeSinceLastHeartbeat, \"yyyy-MM-dd HH:mm:ss\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(manager_r2.slotsNumber);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(manager_r2.freeSlots);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(manager_r2.hardware.cpuCores);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"title\", manager_r2.hardware.physicalMemory + \" bytes\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(22, 16, manager_r2.hardware.physicalMemory));\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"title\", manager_r2.hardware.freeMemory + \" bytes\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(25, 18, manager_r2.hardware.freeMemory));\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"title\", manager_r2.hardware.managedMemory + \" bytes\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(28, 20, manager_r2.hardware.managedMemory));\n  }\n}\n\nconst _c0 = function () {\n  return {\n    x: \"1250px\",\n    y: \"calc(100vh - 260px)\"\n  };\n};\n\nexport let TaskManagerListComponent = /*#__PURE__*/(() => {\n  class TaskManagerListComponent {\n    constructor(cdr, statusService, taskManagerService, router, activatedRoute) {\n      this.cdr = cdr;\n      this.statusService = statusService;\n      this.taskManagerService = taskManagerService;\n      this.router = router;\n      this.activatedRoute = activatedRoute;\n      this.listOfTaskManager = [];\n      this.isLoading = true;\n      this.destroy$ = new Subject();\n      this.sortDataPortFn = this.sortFn('dataPort');\n      this.sortHeartBeatFn = this.sortFn('timeSinceLastHeartbeat');\n      this.sortSlotsNumberFn = this.sortFn('slotsNumber');\n      this.sortFreeSlotsFn = this.sortFn('freeSlots');\n      this.sortCpuCoresFn = this.sortFn('hardware.cpuCores');\n      this.sortPhysicalMemoryFn = this.sortFn('hardware.physicalMemory');\n      this.sortFreeMemoryFn = this.sortFn('hardware.freeMemory');\n      this.sortManagedMemoryFn = this.sortFn('hardware.managedMemory');\n    }\n\n    sortFn(path) {\n      return (pre, next) => deepFind(pre, path) > deepFind(next, path) ? 1 : -1;\n    }\n\n    trackManagerBy(_, node) {\n      return node.id;\n    }\n\n    navigateTo(taskManager) {\n      this.router.navigate([taskManager.id, 'metrics'], {\n        relativeTo: this.activatedRoute\n      }).then();\n    }\n\n    ngOnInit() {\n      this.statusService.refresh$.pipe(takeUntil(this.destroy$), flatMap(() => this.taskManagerService.loadManagers())).subscribe(data => {\n        this.isLoading = false;\n        this.listOfTaskManager = data;\n        this.cdr.markForCheck();\n      }, () => {\n        this.isLoading = false;\n        this.cdr.markForCheck();\n      });\n    }\n\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n\n  }\n\n  TaskManagerListComponent.ɵfac = function TaskManagerListComponent_Factory(t) {\n    return new (t || TaskManagerListComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.StatusService), i0.ɵɵdirectiveInject(i1.TaskManagerService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n\n  TaskManagerListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TaskManagerListComponent,\n    selectors: [[\"flink-task-manager-list\"]],\n    decls: 25,\n    vars: 28,\n    consts: [[3, \"nzBordered\", \"nzTitle\", \"nzLoading\"], [1, \"small\", 3, \"nzSize\", \"nzScroll\", \"nzData\", \"nzFrontPagination\", \"nzShowPagination\"], [\"table\", \"\"], [\"nzLeft\", \"0px\", 3, \"nzWidth\"], [3, \"nzSortFn\", \"nzWidth\"], [\"nzRight\", \"0px\", 3, \"nzSortFn\", \"nzWidth\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"clickable\", 3, \"click\"], [\"nzLeft\", \"0px\"], [1, \"break-word\"], [\"nzRight\", \"0px\"]],\n    template: function TaskManagerListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"nz-card\", 0);\n        i0.ɵɵelementStart(1, \"nz-table\", 1, 2);\n        i0.ɵɵelementStart(3, \"thead\");\n        i0.ɵɵelementStart(4, \"tr\");\n        i0.ɵɵelementStart(5, \"th\", 3);\n        i0.ɵɵtext(6, \"Path, ID\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"th\", 4);\n        i0.ɵɵtext(8, \"Data Port\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"th\", 4);\n        i0.ɵɵtext(10, \"Last Heartbeat\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"th\", 4);\n        i0.ɵɵtext(12, \"All Slots\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"th\", 4);\n        i0.ɵɵtext(14, \"Free Slots\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"th\", 4);\n        i0.ɵɵtext(16, \"CPU Cores\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"th\", 4);\n        i0.ɵɵtext(18, \"Physical MEM\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"th\", 4);\n        i0.ɵɵtext(20, \"JVM Heap Size\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"th\", 5);\n        i0.ɵɵtext(22, \"Flink Managed MEM\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"tbody\");\n        i0.ɵɵtemplate(24, TaskManagerListComponent_ng_container_24_Template, 29, 22, \"ng-container\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(2);\n\n        i0.ɵɵproperty(\"nzBordered\", false)(\"nzTitle\", \"Task Managers\")(\"nzLoading\", ctx.isLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"nzSize\", \"small\")(\"nzScroll\", i0.ɵɵpureFunction0(27, _c0))(\"nzData\", ctx.listOfTaskManager)(\"nzFrontPagination\", false)(\"nzShowPagination\", false);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"nzWidth\", \"280px\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"nzSortFn\", ctx.sortDataPortFn)(\"nzWidth\", \"100px\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"nzSortFn\", ctx.sortHeartBeatFn)(\"nzWidth\", \"160px\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"nzSortFn\", ctx.sortSlotsNumberFn)(\"nzWidth\", \"90px\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"nzSortFn\", ctx.sortFreeSlotsFn)(\"nzWidth\", \"100px\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"nzSortFn\", ctx.sortCpuCoresFn)(\"nzWidth\", \"110px\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"nzSortFn\", ctx.sortPhysicalMemoryFn)(\"nzWidth\", \"120px\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"nzSortFn\", ctx.sortFreeMemoryFn)(\"nzWidth\", \"130px\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"nzSortFn\", ctx.sortManagedMemoryFn)(\"nzWidth\", \"160px\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", _r0.data)(\"ngForTrackBy\", ctx.trackManagerBy);\n      }\n    },\n    directives: [i3.NzCardComponent, i4.NzTableComponent, i4.NzTheadComponent, i4.NzTrDirective, i4.NzTableCellDirective, i4.NzThMeasureDirective, i4.NzCellFixedDirective, i4.NzThAddOnComponent, i4.NzTbodyComponent, i5.NgForOf],\n    pipes: [i5.DatePipe, i6.HumanizeBytesPipe],\n    styles: [\".break-word[_ngcontent-%COMP%]{word-break:break-all}\"],\n    changeDetection: 0\n  });\n  return TaskManagerListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}