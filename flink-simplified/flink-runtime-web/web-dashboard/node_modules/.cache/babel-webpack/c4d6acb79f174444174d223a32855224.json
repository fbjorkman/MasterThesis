{"ast":null,"code":"import { __decorate } from 'tslib';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { RIGHT_ARROW, UP_ARROW, LEFT_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { Injectable, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, ViewChild, Input, EventEmitter, forwardRef, Optional, ViewChildren, Output, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { takeUntil, filter, tap, pluck, map, distinctUntilChanged } from 'rxjs/operators';\nimport { InputBoolean, ensureNumberInRange, silentEvent, getPrecision, getPercent, getElementOffset, isNil, InputNumber, arraysEqual } from 'ng-zorro-antd/core/util';\nimport { NzTooltipDirective, NzToolTipModule } from 'ng-zorro-antd/tooltip';\nimport { CommonModule } from '@angular/common';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'ng-zorro-antd/tooltip';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nconst _c0 = [\"handle\"];\nconst _c1 = [\"slider\"];\n\nfunction NzSliderComponent_nz_slider_step_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"nz-slider-step\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"vertical\", ctx_r1.nzVertical)(\"min\", ctx_r1.nzMin)(\"max\", ctx_r1.nzMax)(\"lowerBound\", ctx_r1.bounds.lower)(\"upperBound\", ctx_r1.bounds.upper)(\"marksArray\", ctx_r1.marksArray)(\"included\", ctx_r1.nzIncluded)(\"reverse\", ctx_r1.nzReverse);\n  }\n}\n\nfunction NzSliderComponent_nz_slider_handle_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"nz-slider-handle\", 7);\n    ɵngcc0.ɵɵlistener(\"focusin\", function NzSliderComponent_nz_slider_handle_5_Template_nz_slider_handle_focusin_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r7);\n      const handleIndex_r5 = restoredCtx.index;\n      const ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.onHandleFocusIn(handleIndex_r5);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const handle_r4 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"vertical\", ctx_r2.nzVertical)(\"reverse\", ctx_r2.nzReverse)(\"offset\", handle_r4.offset)(\"value\", handle_r4.value)(\"active\", handle_r4.active)(\"tooltipFormatter\", ctx_r2.nzTipFormatter)(\"tooltipVisible\", ctx_r2.nzTooltipVisible)(\"tooltipPlacement\", ctx_r2.nzTooltipPlacement)(\"dir\", ctx_r2.dir);\n  }\n}\n\nfunction NzSliderComponent_nz_slider_marks_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"nz-slider-marks\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"vertical\", ctx_r3.nzVertical)(\"min\", ctx_r3.nzMin)(\"max\", ctx_r3.nzMax)(\"lowerBound\", ctx_r3.bounds.lower)(\"upperBound\", ctx_r3.bounds.upper)(\"marksArray\", ctx_r3.marksArray)(\"included\", ctx_r3.nzIncluded)(\"reverse\", ctx_r3.nzReverse);\n  }\n}\n\nfunction NzSliderMarksComponent_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 2);\n  }\n\n  if (rf & 2) {\n    const attr_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵclassProp(\"ant-slider-mark-active\", attr_r1.active);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", attr_r1.style)(\"innerHTML\", attr_r1.label, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction NzSliderStepComponent_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 2);\n  }\n\n  if (rf & 2) {\n    const mark_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵclassProp(\"ant-slider-dot-active\", mark_r1.active);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", mark_r1.style);\n  }\n}\n\nlet NzSliderService = /*#__PURE__*/(() => {\n  class NzSliderService {\n    constructor() {\n      this.isDragging = false;\n    }\n\n  }\n\n  NzSliderService.ɵfac = function NzSliderService_Factory(t) {\n    return new (t || NzSliderService)();\n  };\n\n  NzSliderService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NzSliderService,\n    factory: NzSliderService.ɵfac\n  });\n  /**\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n   */\n\n  return NzSliderService;\n})();\nlet NzSliderHandleComponent = /*#__PURE__*/(() => {\n  class NzSliderHandleComponent {\n    constructor(sliderService, cdr) {\n      this.sliderService = sliderService;\n      this.cdr = cdr;\n      this.tooltipVisible = 'default';\n      this.active = false;\n      this.dir = 'ltr';\n      this.style = {};\n\n      this.enterHandle = () => {\n        if (!this.sliderService.isDragging) {\n          this.toggleTooltip(true);\n          this.updateTooltipPosition();\n          this.cdr.detectChanges();\n        }\n      };\n\n      this.leaveHandle = () => {\n        if (!this.sliderService.isDragging) {\n          this.toggleTooltip(false);\n          this.cdr.detectChanges();\n        }\n      };\n    }\n\n    ngOnChanges(changes) {\n      const {\n        offset,\n        value,\n        active,\n        tooltipVisible,\n        reverse,\n        dir\n      } = changes;\n\n      if (offset || reverse || dir) {\n        this.updateStyle();\n      }\n\n      if (value) {\n        this.updateTooltipTitle();\n        this.updateTooltipPosition();\n      }\n\n      if (active) {\n        if (active.currentValue) {\n          this.toggleTooltip(true);\n        } else {\n          this.toggleTooltip(false);\n        }\n      }\n\n      if ((tooltipVisible === null || tooltipVisible === void 0 ? void 0 : tooltipVisible.currentValue) === 'always') {\n        Promise.resolve().then(() => this.toggleTooltip(true, true));\n      }\n    }\n\n    focus() {\n      var _a;\n\n      (_a = this.handleEl) === null || _a === void 0 ? void 0 : _a.nativeElement.focus();\n    }\n\n    toggleTooltip(show, force = false) {\n      var _a, _b;\n\n      if (!force && (this.tooltipVisible !== 'default' || !this.tooltip)) {\n        return;\n      }\n\n      if (show) {\n        (_a = this.tooltip) === null || _a === void 0 ? void 0 : _a.show();\n      } else {\n        (_b = this.tooltip) === null || _b === void 0 ? void 0 : _b.hide();\n      }\n    }\n\n    updateTooltipTitle() {\n      this.tooltipTitle = this.tooltipFormatter ? this.tooltipFormatter(this.value) : `${this.value}`;\n    }\n\n    updateTooltipPosition() {\n      if (this.tooltip) {\n        Promise.resolve().then(() => {\n          var _a;\n\n          return (_a = this.tooltip) === null || _a === void 0 ? void 0 : _a.updatePosition();\n        });\n      }\n    }\n\n    updateStyle() {\n      const vertical = this.vertical;\n      const reverse = this.reverse;\n      const offset = this.offset;\n      const positionStyle = vertical ? {\n        [reverse ? 'top' : 'bottom']: `${offset}%`,\n        [reverse ? 'bottom' : 'top']: 'auto',\n        transform: reverse ? null : `translateY(+50%)`\n      } : Object.assign(Object.assign({}, this.getHorizontalStylePosition()), {\n        transform: `translateX(${reverse ? this.dir === 'rtl' ? '-' : '+' : this.dir === 'rtl' ? '+' : '-'}50%)`\n      });\n      this.style = positionStyle;\n      this.cdr.markForCheck();\n    }\n\n    getHorizontalStylePosition() {\n      let left = this.reverse ? 'auto' : `${this.offset}%`;\n      let right = this.reverse ? `${this.offset}%` : 'auto';\n\n      if (this.dir === 'rtl') {\n        const tmp = left;\n        left = right;\n        right = tmp;\n      }\n\n      return {\n        left,\n        right\n      };\n    }\n\n  }\n\n  NzSliderHandleComponent.ɵfac = function NzSliderHandleComponent_Factory(t) {\n    return new (t || NzSliderHandleComponent)(ɵngcc0.ɵɵdirectiveInject(NzSliderService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  NzSliderHandleComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NzSliderHandleComponent,\n    selectors: [[\"nz-slider-handle\"]],\n    viewQuery: function NzSliderHandleComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(NzTooltipDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.handleEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltip = _t.first);\n      }\n    },\n    hostBindings: function NzSliderHandleComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mouseenter\", function NzSliderHandleComponent_mouseenter_HostBindingHandler() {\n          return ctx.enterHandle();\n        })(\"mouseleave\", function NzSliderHandleComponent_mouseleave_HostBindingHandler() {\n          return ctx.leaveHandle();\n        });\n      }\n    },\n    inputs: {\n      tooltipVisible: \"tooltipVisible\",\n      active: \"active\",\n      dir: \"dir\",\n      vertical: \"vertical\",\n      reverse: \"reverse\",\n      offset: \"offset\",\n      value: \"value\",\n      tooltipPlacement: \"tooltipPlacement\",\n      tooltipFormatter: \"tooltipFormatter\"\n    },\n    exportAs: [\"nzSliderHandle\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 4,\n    consts: [[\"tabindex\", \"0\", \"nz-tooltip\", \"\", 1, \"ant-slider-handle\", 3, \"ngStyle\", \"nzTooltipTitle\", \"nzTooltipTrigger\", \"nzTooltipPlacement\"], [\"handle\", \"\"]],\n    template: function NzSliderHandleComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", 0, 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.style)(\"nzTooltipTitle\", ctx.tooltipFormatter === null || ctx.tooltipVisible === \"never\" ? null : ctx.tooltipTitle)(\"nzTooltipTrigger\", null)(\"nzTooltipPlacement\", ctx.tooltipPlacement);\n      }\n    },\n    directives: [ɵngcc1.NzTooltipDirective, ɵngcc2.NgStyle],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean()], NzSliderHandleComponent.prototype, \"active\", void 0);\n  /**\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n   */\n\n\n  return NzSliderHandleComponent;\n})();\nlet NzSliderComponent = /*#__PURE__*/(() => {\n  class NzSliderComponent {\n    constructor(sliderService, cdr, platform, directionality) {\n      this.sliderService = sliderService;\n      this.cdr = cdr;\n      this.platform = platform;\n      this.directionality = directionality;\n      this.nzDisabled = false;\n      this.nzDots = false;\n      this.nzIncluded = true;\n      this.nzRange = false;\n      this.nzVertical = false;\n      this.nzReverse = false;\n      this.nzMarks = null;\n      this.nzMax = 100;\n      this.nzMin = 0;\n      this.nzStep = 1;\n      this.nzTooltipVisible = 'default';\n      this.nzTooltipPlacement = 'top';\n      this.nzOnAfterChange = new EventEmitter();\n      this.value = null;\n      this.cacheSliderStart = null;\n      this.cacheSliderLength = null;\n      this.activeValueIndex = undefined; // Current activated handle's index ONLY for range=true\n\n      this.track = {\n        offset: null,\n        length: null\n      }; // Track's offset and length\n\n      this.handles = []; // Handles' offset\n\n      this.marksArray = null; // \"steps\" in array type with more data & FILTER out the invalid mark\n\n      this.bounds = {\n        lower: null,\n        upper: null\n      }; // now for nz-slider-step\n\n      this.dir = 'ltr';\n      this.destroy$ = new Subject();\n    }\n\n    ngOnInit() {\n      var _a;\n\n      this.dir = this.directionality.value;\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.detectChanges();\n        this.updateTrackAndHandles();\n        this.onValueChange(this.getValue(true));\n      });\n      this.handles = generateHandlers(this.nzRange ? 2 : 1);\n      this.marksArray = this.nzMarks ? this.generateMarkItems(this.nzMarks) : null;\n      this.bindDraggingHandlers();\n      this.toggleDragDisabled(this.nzDisabled);\n\n      if (this.getValue() === null) {\n        this.setValue(this.formatValue(null));\n      }\n    }\n\n    ngOnChanges(changes) {\n      const {\n        nzDisabled,\n        nzMarks,\n        nzRange\n      } = changes;\n\n      if (nzDisabled && !nzDisabled.firstChange) {\n        this.toggleDragDisabled(nzDisabled.currentValue);\n      } else if (nzMarks && !nzMarks.firstChange) {\n        this.marksArray = this.nzMarks ? this.generateMarkItems(this.nzMarks) : null;\n      } else if (nzRange && !nzRange.firstChange) {\n        this.handles = generateHandlers(nzRange.currentValue ? 2 : 1);\n        this.setValue(this.formatValue(null));\n      }\n    }\n\n    ngOnDestroy() {\n      this.unsubscribeDrag();\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n\n    writeValue(val) {\n      this.setValue(val, true);\n    }\n\n    onValueChange(_value) {}\n\n    onTouched() {}\n\n    registerOnChange(fn) {\n      this.onValueChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled) {\n      this.nzDisabled = isDisabled;\n      this.toggleDragDisabled(isDisabled);\n    }\n    /**\n     * Event handler is only triggered when a slider handler is focused.\n     */\n\n\n    onKeyDown(e) {\n      if (this.nzDisabled) {\n        return;\n      }\n\n      const code = e.keyCode;\n      const isIncrease = code === RIGHT_ARROW || code === UP_ARROW;\n      const isDecrease = code === LEFT_ARROW || code === DOWN_ARROW;\n\n      if (!(isIncrease || isDecrease)) {\n        return;\n      }\n\n      e.preventDefault();\n      let step = (isDecrease ? -this.nzStep : this.nzStep) * (this.nzReverse ? -1 : 1);\n      step = this.dir === 'rtl' ? step * -1 : step;\n      const newVal = this.nzRange ? this.value[this.activeValueIndex] + step : this.value + step;\n      this.setActiveValue(ensureNumberInRange(newVal, this.nzMin, this.nzMax));\n    }\n\n    onHandleFocusIn(index) {\n      this.activeValueIndex = index;\n    }\n\n    setValue(value, isWriteValue = false) {\n      if (isWriteValue) {\n        this.value = this.formatValue(value);\n        this.updateTrackAndHandles();\n      } else if (!valuesEqual(this.value, value)) {\n        this.value = value;\n        this.updateTrackAndHandles();\n        this.onValueChange(this.getValue(true));\n      }\n    }\n\n    getValue(cloneAndSort = false) {\n      if (cloneAndSort && this.value && isValueRange(this.value)) {\n        return [...this.value].sort((a, b) => a - b);\n      }\n\n      return this.value;\n    }\n    /**\n     * Clone & sort current value and convert them to offsets, then return the new one.\n     */\n\n\n    getValueToOffset(value) {\n      let normalizedValue = value;\n\n      if (typeof normalizedValue === 'undefined') {\n        normalizedValue = this.getValue(true);\n      }\n\n      return isValueRange(normalizedValue) ? normalizedValue.map(val => this.valueToOffset(val)) : this.valueToOffset(normalizedValue);\n    }\n    /**\n     * Find the closest value to be activated.\n     */\n\n\n    setActiveValueIndex(pointerValue) {\n      const value = this.getValue();\n\n      if (isValueRange(value)) {\n        let minimal = null;\n        let gap;\n        let activeIndex = -1;\n        value.forEach((val, index) => {\n          gap = Math.abs(pointerValue - val);\n\n          if (minimal === null || gap < minimal) {\n            minimal = gap;\n            activeIndex = index;\n          }\n        });\n        this.activeValueIndex = activeIndex;\n        this.handlerComponents.toArray()[activeIndex].focus();\n      } else {\n        this.handlerComponents.toArray()[0].focus();\n      }\n    }\n\n    setActiveValue(pointerValue) {\n      if (isValueRange(this.value)) {\n        const newValue = [...this.value];\n        newValue[this.activeValueIndex] = pointerValue;\n        this.setValue(newValue);\n      } else {\n        this.setValue(pointerValue);\n      }\n    }\n    /**\n     * Update track and handles' position and length.\n     */\n\n\n    updateTrackAndHandles() {\n      const value = this.getValue();\n      const offset = this.getValueToOffset(value);\n      const valueSorted = this.getValue(true);\n      const offsetSorted = this.getValueToOffset(valueSorted);\n      const boundParts = isValueRange(valueSorted) ? valueSorted : [0, valueSorted];\n      const trackParts = isValueRange(offsetSorted) ? [offsetSorted[0], offsetSorted[1] - offsetSorted[0]] : [0, offsetSorted];\n      this.handles.forEach((handle, index) => {\n        handle.offset = isValueRange(offset) ? offset[index] : offset;\n        handle.value = isValueRange(value) ? value[index] : value || 0;\n      });\n      [this.bounds.lower, this.bounds.upper] = boundParts;\n      [this.track.offset, this.track.length] = trackParts;\n      this.cdr.markForCheck();\n    }\n\n    onDragStart(value) {\n      this.toggleDragMoving(true);\n      this.cacheSliderProperty();\n      this.setActiveValueIndex(this.getLogicalValue(value));\n      this.setActiveValue(this.getLogicalValue(value));\n      this.showHandleTooltip(this.nzRange ? this.activeValueIndex : 0);\n    }\n\n    onDragMove(value) {\n      this.setActiveValue(this.getLogicalValue(value));\n      this.cdr.markForCheck();\n    }\n\n    getLogicalValue(value) {\n      if (this.nzReverse) {\n        if (!this.nzVertical && this.dir === 'rtl') {\n          return value;\n        }\n\n        return this.nzMax - value + this.nzMin;\n      }\n\n      if (!this.nzVertical && this.dir === 'rtl') {\n        return this.nzMax - value + this.nzMin;\n      }\n\n      return value;\n    }\n\n    onDragEnd() {\n      this.nzOnAfterChange.emit(this.getValue(true));\n      this.toggleDragMoving(false);\n      this.cacheSliderProperty(true);\n      this.hideAllHandleTooltip();\n      this.cdr.markForCheck();\n    }\n    /**\n     * Create user interactions handles.\n     */\n\n\n    bindDraggingHandlers() {\n      if (!this.platform.isBrowser) {\n        return;\n      }\n\n      const sliderDOM = this.slider.nativeElement;\n      const orientField = this.nzVertical ? 'pageY' : 'pageX';\n      const mouse = {\n        start: 'mousedown',\n        move: 'mousemove',\n        end: 'mouseup',\n        pluckKey: [orientField]\n      };\n      const touch = {\n        start: 'touchstart',\n        move: 'touchmove',\n        end: 'touchend',\n        pluckKey: ['touches', '0', orientField],\n        filter: e => e instanceof TouchEvent\n      };\n      [mouse, touch].forEach(source => {\n        const {\n          start,\n          move,\n          end,\n          pluckKey,\n          filter: filterFunc = () => true\n        } = source;\n        source.startPlucked$ = fromEvent(sliderDOM, start).pipe(filter(filterFunc), tap(silentEvent), pluck(...pluckKey), map(position => this.findClosestValue(position)));\n        source.end$ = fromEvent(document, end);\n        source.moveResolved$ = fromEvent(document, move).pipe(filter(filterFunc), tap(silentEvent), pluck(...pluckKey), distinctUntilChanged(), map(position => this.findClosestValue(position)), distinctUntilChanged(), takeUntil(source.end$));\n      });\n      this.dragStart$ = merge(mouse.startPlucked$, touch.startPlucked$);\n      this.dragMove$ = merge(mouse.moveResolved$, touch.moveResolved$);\n      this.dragEnd$ = merge(mouse.end$, touch.end$);\n    }\n\n    subscribeDrag(periods = ['start', 'move', 'end']) {\n      if (periods.indexOf('start') !== -1 && this.dragStart$ && !this.dragStart_) {\n        this.dragStart_ = this.dragStart$.subscribe(this.onDragStart.bind(this));\n      }\n\n      if (periods.indexOf('move') !== -1 && this.dragMove$ && !this.dragMove_) {\n        this.dragMove_ = this.dragMove$.subscribe(this.onDragMove.bind(this));\n      }\n\n      if (periods.indexOf('end') !== -1 && this.dragEnd$ && !this.dragEnd_) {\n        this.dragEnd_ = this.dragEnd$.subscribe(this.onDragEnd.bind(this));\n      }\n    }\n\n    unsubscribeDrag(periods = ['start', 'move', 'end']) {\n      if (periods.indexOf('start') !== -1 && this.dragStart_) {\n        this.dragStart_.unsubscribe();\n        this.dragStart_ = null;\n      }\n\n      if (periods.indexOf('move') !== -1 && this.dragMove_) {\n        this.dragMove_.unsubscribe();\n        this.dragMove_ = null;\n      }\n\n      if (periods.indexOf('end') !== -1 && this.dragEnd_) {\n        this.dragEnd_.unsubscribe();\n        this.dragEnd_ = null;\n      }\n    }\n\n    toggleDragMoving(movable) {\n      const periods = ['move', 'end'];\n\n      if (movable) {\n        this.sliderService.isDragging = true;\n        this.subscribeDrag(periods);\n      } else {\n        this.sliderService.isDragging = false;\n        this.unsubscribeDrag(periods);\n      }\n    }\n\n    toggleDragDisabled(disabled) {\n      if (disabled) {\n        this.unsubscribeDrag();\n      } else {\n        this.subscribeDrag(['start']);\n      }\n    }\n\n    findClosestValue(position) {\n      const sliderStart = this.getSliderStartPosition();\n      const sliderLength = this.getSliderLength();\n      const ratio = ensureNumberInRange((position - sliderStart) / sliderLength, 0, 1);\n      const val = (this.nzMax - this.nzMin) * (this.nzVertical ? 1 - ratio : ratio) + this.nzMin;\n      const points = this.nzMarks === null ? [] : Object.keys(this.nzMarks).map(parseFloat).sort((a, b) => a - b);\n\n      if (this.nzStep !== 0 && !this.nzDots) {\n        const closestOne = Math.round(val / this.nzStep) * this.nzStep;\n        points.push(closestOne);\n      }\n\n      const gaps = points.map(point => Math.abs(val - point));\n      const closest = points[gaps.indexOf(Math.min(...gaps))]; // return parseFloat(closest.toFixed(getPrecision(this.nzStep)));\n\n      return this.nzStep === 0 ? closest : parseFloat(closest.toFixed(getPrecision(this.nzStep)));\n    }\n\n    valueToOffset(value) {\n      return getPercent(this.nzMin, this.nzMax, value);\n    }\n\n    getSliderStartPosition() {\n      if (this.cacheSliderStart !== null) {\n        return this.cacheSliderStart;\n      }\n\n      const offset = getElementOffset(this.slider.nativeElement);\n      return this.nzVertical ? offset.top : offset.left;\n    }\n\n    getSliderLength() {\n      if (this.cacheSliderLength !== null) {\n        return this.cacheSliderLength;\n      }\n\n      const sliderDOM = this.slider.nativeElement;\n      return this.nzVertical ? sliderDOM.clientHeight : sliderDOM.clientWidth;\n    }\n    /**\n     * Cache DOM layout/reflow operations for performance (may not necessary?)\n     */\n\n\n    cacheSliderProperty(remove = false) {\n      this.cacheSliderStart = remove ? null : this.getSliderStartPosition();\n      this.cacheSliderLength = remove ? null : this.getSliderLength();\n    }\n\n    formatValue(value) {\n      if (isNil(value)) {\n        return this.nzRange ? [this.nzMin, this.nzMax] : this.nzMin;\n      } else if (assertValueValid(value, this.nzRange)) {\n        return isValueRange(value) ? value.map(val => ensureNumberInRange(val, this.nzMin, this.nzMax)) : ensureNumberInRange(value, this.nzMin, this.nzMax);\n      } else {\n        return this.nzDefaultValue ? this.nzDefaultValue : this.nzRange ? [this.nzMin, this.nzMax] : this.nzMin;\n      }\n    }\n    /**\n     * Show one handle's tooltip and hide others'.\n     */\n\n\n    showHandleTooltip(handleIndex = 0) {\n      this.handles.forEach((handle, index) => {\n        handle.active = index === handleIndex;\n      });\n    }\n\n    hideAllHandleTooltip() {\n      this.handles.forEach(handle => handle.active = false);\n    }\n\n    generateMarkItems(marks) {\n      const marksArray = [];\n\n      for (const key in marks) {\n        if (marks.hasOwnProperty(key)) {\n          const mark = marks[key];\n          const val = typeof key === 'number' ? key : parseFloat(key);\n\n          if (val >= this.nzMin && val <= this.nzMax) {\n            marksArray.push({\n              value: val,\n              offset: this.valueToOffset(val),\n              config: mark\n            });\n          }\n        }\n      }\n\n      return marksArray.length ? marksArray : null;\n    }\n\n  }\n\n  NzSliderComponent.ɵfac = function NzSliderComponent_Factory(t) {\n    return new (t || NzSliderComponent)(ɵngcc0.ɵɵdirectiveInject(NzSliderService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8));\n  };\n\n  NzSliderComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NzSliderComponent,\n    selectors: [[\"nz-slider\"]],\n    viewQuery: function NzSliderComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c1, 7);\n        ɵngcc0.ɵɵviewQuery(NzSliderHandleComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.slider = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.handlerComponents = _t);\n      }\n    },\n    hostBindings: function NzSliderComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function NzSliderComponent_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        });\n      }\n    },\n    inputs: {\n      nzDisabled: \"nzDisabled\",\n      nzDots: \"nzDots\",\n      nzIncluded: \"nzIncluded\",\n      nzRange: \"nzRange\",\n      nzVertical: \"nzVertical\",\n      nzReverse: \"nzReverse\",\n      nzMarks: \"nzMarks\",\n      nzMax: \"nzMax\",\n      nzMin: \"nzMin\",\n      nzStep: \"nzStep\",\n      nzTooltipVisible: \"nzTooltipVisible\",\n      nzTooltipPlacement: \"nzTooltipPlacement\",\n      nzDefaultValue: \"nzDefaultValue\",\n      nzTipFormatter: \"nzTipFormatter\"\n    },\n    outputs: {\n      nzOnAfterChange: \"nzOnAfterChange\"\n    },\n    exportAs: [\"nzSlider\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NzSliderComponent),\n      multi: true\n    }, NzSliderService]), ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 7,\n    vars: 17,\n    consts: [[1, \"ant-slider\"], [\"slider\", \"\"], [1, \"ant-slider-rail\"], [3, \"vertical\", \"included\", \"offset\", \"length\", \"reverse\", \"dir\"], [3, \"vertical\", \"min\", \"max\", \"lowerBound\", \"upperBound\", \"marksArray\", \"included\", \"reverse\", 4, \"ngIf\"], [3, \"vertical\", \"reverse\", \"offset\", \"value\", \"active\", \"tooltipFormatter\", \"tooltipVisible\", \"tooltipPlacement\", \"dir\", \"focusin\", 4, \"ngFor\", \"ngForOf\"], [3, \"vertical\", \"min\", \"max\", \"lowerBound\", \"upperBound\", \"marksArray\", \"included\", \"reverse\"], [3, \"vertical\", \"reverse\", \"offset\", \"value\", \"active\", \"tooltipFormatter\", \"tooltipVisible\", \"tooltipPlacement\", \"dir\", \"focusin\"]],\n    template: function NzSliderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵelement(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"nz-slider-track\", 3);\n        ɵngcc0.ɵɵtemplate(4, NzSliderComponent_nz_slider_step_4_Template, 1, 8, \"nz-slider-step\", 4);\n        ɵngcc0.ɵɵtemplate(5, NzSliderComponent_nz_slider_handle_5_Template, 1, 9, \"nz-slider-handle\", 5);\n        ɵngcc0.ɵɵtemplate(6, NzSliderComponent_nz_slider_marks_6_Template, 1, 8, \"nz-slider-marks\", 4);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-slider-rtl\", ctx.dir === \"rtl\")(\"ant-slider-disabled\", ctx.nzDisabled)(\"ant-slider-vertical\", ctx.nzVertical)(\"ant-slider-with-marks\", ctx.marksArray);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"vertical\", ctx.nzVertical)(\"included\", ctx.nzIncluded)(\"offset\", ctx.track.offset)(\"length\", ctx.track.length)(\"reverse\", ctx.nzReverse)(\"dir\", ctx.dir);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.marksArray);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.handles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.marksArray);\n      }\n    },\n    directives: function () {\n      return [NzSliderTrackComponent, ɵngcc4.Dir, ɵngcc2.NgIf, ɵngcc2.NgForOf, NzSliderStepComponent, NzSliderHandleComponent, NzSliderMarksComponent];\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean()], NzSliderComponent.prototype, \"nzDisabled\", void 0);\n\n  __decorate([InputBoolean()], NzSliderComponent.prototype, \"nzDots\", void 0);\n\n  __decorate([InputBoolean()], NzSliderComponent.prototype, \"nzIncluded\", void 0);\n\n  __decorate([InputBoolean()], NzSliderComponent.prototype, \"nzRange\", void 0);\n\n  __decorate([InputBoolean()], NzSliderComponent.prototype, \"nzVertical\", void 0);\n\n  __decorate([InputBoolean()], NzSliderComponent.prototype, \"nzReverse\", void 0);\n\n  __decorate([InputNumber()], NzSliderComponent.prototype, \"nzMax\", void 0);\n\n  __decorate([InputNumber()], NzSliderComponent.prototype, \"nzMin\", void 0);\n\n  __decorate([InputNumber()], NzSliderComponent.prototype, \"nzStep\", void 0);\n\n  return NzSliderComponent;\n})();\n\nfunction getValueTypeNotMatchError() {\n  return new Error(`The \"nzRange\" can't match the \"ngModel\"'s type, please check these properties: \"nzRange\", \"ngModel\", \"nzDefaultValue\".`);\n}\n\nfunction isValueRange(value) {\n  if (value instanceof Array) {\n    return value.length === 2;\n  } else {\n    return false;\n  }\n}\n\nfunction generateHandlers(amount) {\n  return Array(amount).fill(0).map(() => ({\n    offset: null,\n    value: null,\n    active: false\n  }));\n}\n/**\n * Check if value is valid and throw error if value-type/range not match.\n */\n\n\nfunction assertValueValid(value, isRange) {\n  if (!isValueRange(value) && isNaN(value) || isValueRange(value) && value.some(v => isNaN(v))) {\n    return false;\n  }\n\n  return assertValueTypeMatch(value, isRange);\n}\n/**\n * Assert that if `this.nzRange` is `true`, value is also a range, vice versa.\n */\n\n\nfunction assertValueTypeMatch(value, isRange = false) {\n  if (isValueRange(value) !== isRange) {\n    throw getValueTypeNotMatchError();\n  }\n\n  return true;\n}\n\nfunction valuesEqual(valA, valB) {\n  if (typeof valA !== typeof valB) {\n    return false;\n  }\n\n  return isValueRange(valA) && isValueRange(valB) ? arraysEqual(valA, valB) : valA === valB;\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nlet NzSliderMarksComponent = /*#__PURE__*/(() => {\n  class NzSliderMarksComponent {\n    constructor() {\n      this.lowerBound = null;\n      this.upperBound = null;\n      this.marksArray = [];\n      this.vertical = false;\n      this.included = false;\n      this.marks = [];\n    }\n\n    ngOnChanges(changes) {\n      const {\n        marksArray,\n        lowerBound,\n        upperBound,\n        reverse\n      } = changes;\n\n      if (marksArray || reverse) {\n        this.buildMarks();\n      }\n\n      if (marksArray || lowerBound || upperBound || reverse) {\n        this.togglePointActive();\n      }\n    }\n\n    trackById(_index, mark) {\n      return mark.value;\n    }\n\n    buildMarks() {\n      const range = this.max - this.min;\n      this.marks = this.marksArray.map(mark => {\n        const {\n          value,\n          offset,\n          config\n        } = mark;\n        const style = this.getMarkStyles(value, range, config);\n        const label = isConfigObject(config) ? config.label : config;\n        return {\n          label,\n          offset,\n          style,\n          value,\n          config,\n          active: false\n        };\n      });\n    }\n\n    getMarkStyles(value, range, config) {\n      let style;\n      const markValue = this.reverse ? this.max + this.min - value : value;\n\n      if (this.vertical) {\n        style = {\n          marginBottom: '-50%',\n          bottom: `${(markValue - this.min) / range * 100}%`\n        };\n      } else {\n        style = {\n          transform: `translate3d(-50%, 0, 0)`,\n          left: `${(markValue - this.min) / range * 100}%`\n        };\n      }\n\n      if (isConfigObject(config) && config.style) {\n        style = Object.assign(Object.assign({}, style), config.style);\n      }\n\n      return style;\n    }\n\n    togglePointActive() {\n      if (this.marks && this.lowerBound !== null && this.upperBound !== null) {\n        this.marks.forEach(mark => {\n          const value = mark.value;\n          const isActive = !this.included && value === this.upperBound || this.included && value <= this.upperBound && value >= this.lowerBound;\n          mark.active = isActive;\n        });\n      }\n    }\n\n  }\n\n  NzSliderMarksComponent.ɵfac = function NzSliderMarksComponent_Factory(t) {\n    return new (t || NzSliderMarksComponent)();\n  };\n\n  NzSliderMarksComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NzSliderMarksComponent,\n    selectors: [[\"nz-slider-marks\"]],\n    inputs: {\n      lowerBound: \"lowerBound\",\n      upperBound: \"upperBound\",\n      marksArray: \"marksArray\",\n      vertical: \"vertical\",\n      included: \"included\",\n      min: \"min\",\n      max: \"max\",\n      reverse: \"reverse\"\n    },\n    exportAs: [\"nzSliderMarks\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[1, \"ant-slider-mark\"], [\"class\", \"ant-slider-mark-text\", 3, \"ant-slider-mark-active\", \"ngStyle\", \"innerHTML\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"ant-slider-mark-text\", 3, \"ngStyle\", \"innerHTML\"]],\n    template: function NzSliderMarksComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, NzSliderMarksComponent_span_1_Template, 1, 4, \"span\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.marks)(\"ngForTrackBy\", ctx.trackById);\n      }\n    },\n    directives: [ɵngcc2.NgForOf, ɵngcc2.NgStyle],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean()], NzSliderMarksComponent.prototype, \"vertical\", void 0);\n\n  __decorate([InputBoolean()], NzSliderMarksComponent.prototype, \"included\", void 0);\n\n  return NzSliderMarksComponent;\n})();\n\nfunction isConfigObject(config) {\n  return typeof config !== 'string';\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nlet NzSliderStepComponent = /*#__PURE__*/(() => {\n  class NzSliderStepComponent {\n    constructor() {\n      this.lowerBound = null;\n      this.upperBound = null;\n      this.marksArray = [];\n      this.vertical = false;\n      this.included = false;\n      this.steps = [];\n    }\n\n    ngOnChanges(changes) {\n      const {\n        marksArray,\n        lowerBound,\n        upperBound,\n        reverse\n      } = changes;\n\n      if (marksArray || reverse) {\n        this.buildSteps();\n      }\n\n      if (marksArray || lowerBound || upperBound || reverse) {\n        this.togglePointActive();\n      }\n    }\n\n    trackById(_index, step) {\n      return step.value;\n    }\n\n    buildSteps() {\n      const orient = this.vertical ? 'bottom' : 'left';\n      this.steps = this.marksArray.map(mark => {\n        const {\n          value,\n          config\n        } = mark;\n        let offset = mark.offset;\n        const range = this.max - this.min;\n\n        if (this.reverse) {\n          offset = (this.max - value) / range * 100;\n        }\n\n        return {\n          value,\n          offset,\n          config,\n          active: false,\n          style: {\n            [orient]: `${offset}%`\n          }\n        };\n      });\n    }\n\n    togglePointActive() {\n      if (this.steps && this.lowerBound !== null && this.upperBound !== null) {\n        this.steps.forEach(step => {\n          const value = step.value;\n          const isActive = !this.included && value === this.upperBound || this.included && value <= this.upperBound && value >= this.lowerBound;\n          step.active = isActive;\n        });\n      }\n    }\n\n  }\n\n  NzSliderStepComponent.ɵfac = function NzSliderStepComponent_Factory(t) {\n    return new (t || NzSliderStepComponent)();\n  };\n\n  NzSliderStepComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NzSliderStepComponent,\n    selectors: [[\"nz-slider-step\"]],\n    inputs: {\n      lowerBound: \"lowerBound\",\n      upperBound: \"upperBound\",\n      marksArray: \"marksArray\",\n      vertical: \"vertical\",\n      included: \"included\",\n      min: \"min\",\n      max: \"max\",\n      reverse: \"reverse\"\n    },\n    exportAs: [\"nzSliderStep\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[1, \"ant-slider-step\"], [\"class\", \"ant-slider-dot\", 3, \"ant-slider-dot-active\", \"ngStyle\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"ant-slider-dot\", 3, \"ngStyle\"]],\n    template: function NzSliderStepComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, NzSliderStepComponent_span_1_Template, 1, 3, \"span\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.steps)(\"ngForTrackBy\", ctx.trackById);\n      }\n    },\n    directives: [ɵngcc2.NgForOf, ɵngcc2.NgStyle],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean()], NzSliderStepComponent.prototype, \"vertical\", void 0);\n\n  __decorate([InputBoolean()], NzSliderStepComponent.prototype, \"included\", void 0);\n  /**\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n   */\n\n\n  return NzSliderStepComponent;\n})();\nlet NzSliderTrackComponent = /*#__PURE__*/(() => {\n  class NzSliderTrackComponent {\n    constructor() {\n      this.offset = 0;\n      this.reverse = false;\n      this.dir = 'ltr';\n      this.length = 0;\n      this.vertical = false;\n      this.included = false;\n      this.style = {};\n    }\n\n    ngOnChanges() {\n      const vertical = this.vertical;\n      const reverse = this.reverse;\n      const visibility = this.included ? 'visible' : 'hidden';\n      const offset = this.offset;\n      const length = this.length;\n      const positonStyle = vertical ? {\n        [reverse ? 'top' : 'bottom']: `${offset}%`,\n        [reverse ? 'bottom' : 'top']: 'auto',\n        height: `${length}%`,\n        visibility\n      } : Object.assign(Object.assign({}, this.getHorizontalStylePosition()), {\n        width: `${length}%`,\n        visibility\n      });\n      this.style = positonStyle;\n    }\n\n    getHorizontalStylePosition() {\n      let left = this.reverse ? 'auto' : `${this.offset}%`;\n      let right = this.reverse ? `${this.offset}%` : 'auto';\n\n      if (this.dir === 'rtl') {\n        const tmp = left;\n        left = right;\n        right = tmp;\n      }\n\n      return {\n        left,\n        right\n      };\n    }\n\n  }\n\n  NzSliderTrackComponent.ɵfac = function NzSliderTrackComponent_Factory(t) {\n    return new (t || NzSliderTrackComponent)();\n  };\n\n  NzSliderTrackComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NzSliderTrackComponent,\n    selectors: [[\"nz-slider-track\"]],\n    inputs: {\n      offset: \"offset\",\n      reverse: \"reverse\",\n      dir: \"dir\",\n      length: \"length\",\n      vertical: \"vertical\",\n      included: \"included\"\n    },\n    exportAs: [\"nzSliderTrack\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[1, \"ant-slider-track\", 3, \"ngStyle\"]],\n    template: function NzSliderTrackComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.style);\n      }\n    },\n    directives: [ɵngcc2.NgStyle],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([InputNumber()], NzSliderTrackComponent.prototype, \"offset\", void 0);\n\n  __decorate([InputBoolean()], NzSliderTrackComponent.prototype, \"reverse\", void 0);\n\n  __decorate([InputNumber()], NzSliderTrackComponent.prototype, \"length\", void 0);\n\n  __decorate([InputBoolean()], NzSliderTrackComponent.prototype, \"vertical\", void 0);\n\n  __decorate([InputBoolean()], NzSliderTrackComponent.prototype, \"included\", void 0);\n\n  return NzSliderTrackComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nlet NzSliderModule = /*#__PURE__*/(() => {\n  class NzSliderModule {}\n\n  NzSliderModule.ɵfac = function NzSliderModule_Factory(t) {\n    return new (t || NzSliderModule)();\n  };\n\n  NzSliderModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NzSliderModule\n  });\n  NzSliderModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[BidiModule, CommonModule, PlatformModule, NzToolTipModule]]\n  });\n  return NzSliderModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzSliderModule, {\n    declarations: function () {\n      return [NzSliderComponent, NzSliderTrackComponent, NzSliderHandleComponent, NzSliderStepComponent, NzSliderMarksComponent];\n    },\n    imports: function () {\n      return [BidiModule, CommonModule, PlatformModule, NzToolTipModule];\n    },\n    exports: function () {\n      return [NzSliderComponent, NzSliderTrackComponent, NzSliderHandleComponent, NzSliderStepComponent, NzSliderMarksComponent];\n    }\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzMarks {}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzMarks, NzSliderComponent, NzSliderModule, NzSliderHandleComponent as ɵNzSliderHandleComponent, NzSliderMarksComponent as ɵNzSliderMarksComponent, NzSliderService as ɵNzSliderService, NzSliderStepComponent as ɵNzSliderStepComponent, NzSliderTrackComponent as ɵNzSliderTrackComponent }; //# sourceMappingURL=ng-zorro-antd-slider.js.map","map":null,"metadata":{},"sourceType":"module"}