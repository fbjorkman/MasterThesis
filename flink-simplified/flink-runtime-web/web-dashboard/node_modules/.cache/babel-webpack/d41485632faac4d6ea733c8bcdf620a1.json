{"ast":null,"code":"/// <reference path=\"../../../../../node_modules/monaco-editor/monaco.d.ts\" />\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { debounceTime, takeUntil } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"share/common/monaco-editor/monaco-editor.service\";\nexport let MonacoEditorComponent = /*#__PURE__*/(() => {\n  class MonacoEditorComponent {\n    constructor(elementRef, monacoEditorService) {\n      this.elementRef = elementRef;\n      this.monacoEditorService = monacoEditorService;\n      this.innerValue = '';\n      this.destroy$ = new Subject();\n    }\n\n    set value(value) {\n      this.innerValue = value;\n\n      if (this.editor) {\n        this.editor.getModel().setValue(this.innerValue);\n      }\n    }\n\n    get value() {\n      return this.innerValue;\n    }\n\n    setupMonaco() {\n      const hostElement = this.elementRef.nativeElement;\n      this.editor = monaco.editor.create(hostElement, {\n        scrollBeyondLastLine: false,\n        glyphMargin: true,\n        language: 'apex',\n        wordWrap: 'on',\n        readOnly: true,\n        minimap: {\n          enabled: false\n        }\n      });\n\n      if (this.value) {\n        this.editor.getModel().setValue(this.value);\n      }\n    }\n\n    layout() {\n      if (this.editor) {\n        this.editor.layout();\n      }\n    }\n\n    ngAfterViewInit() {\n      if (window.monaco) {\n        // TODO: temporary solution, the editor should render depending on its own dimension\n        setTimeout(() => this.setupMonaco());\n      } else {\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = 'libs/vs/loader.js';\n\n        script.onload = () => {\n          const onGotAmdLoader = () => {\n            // Load monaco\n            window.require.config({\n              paths: {\n                vs: 'libs/vs'\n              }\n            });\n\n            window.require(['vs/editor/editor.main'], () => {\n              setTimeout(() => this.setupMonaco());\n            });\n          };\n\n          onGotAmdLoader();\n        }; // Add the script tag to the page in order to start loading monaco\n\n\n        document.body.appendChild(script);\n      }\n\n      merge(fromEvent(window, 'resize'), this.monacoEditorService.layout$).pipe(takeUntil(this.destroy$), debounceTime(200)).subscribe(() => {\n        this.layout();\n      });\n    }\n\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n      this.editor.dispose();\n    }\n\n  }\n\n  MonacoEditorComponent.ɵfac = function MonacoEditorComponent_Factory(t) {\n    return new (t || MonacoEditorComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.MonacoEditorService));\n  };\n\n  MonacoEditorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MonacoEditorComponent,\n    selectors: [[\"flink-monaco-editor\"]],\n    inputs: {\n      value: \"value\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function MonacoEditorComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%]{display:block;position:relative;width:100%;height:100%;overflow:hidden}\"],\n    changeDetection: 0\n  });\n  return MonacoEditorComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}