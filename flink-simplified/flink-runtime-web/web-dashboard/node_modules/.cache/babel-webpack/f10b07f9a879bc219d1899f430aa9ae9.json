{"ast":null,"code":"import { TemplateRef } from '@angular/core';\nimport { coerceBooleanProperty, _isNumberValue, coerceCssPixelValue } from '@angular/cdk/coercion';\nimport { warn } from 'ng-zorro-antd/core/logger';\nimport { Subject, isObservable, from, of } from 'rxjs';\nimport { take } from 'rxjs/operators';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nfunction toArray(value) {\n  let ret;\n\n  if (value == null) {\n    ret = [];\n  } else if (!Array.isArray(value)) {\n    ret = [value];\n  } else {\n    ret = value;\n  }\n\n  return ret;\n}\n\nfunction arraysEqual(array1, array2) {\n  if (!array1 || !array2 || array1.length !== array2.length) {\n    return false;\n  }\n\n  const len = array1.length;\n\n  for (let i = 0; i < len; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction shallowCopyArray(source) {\n  return source.slice();\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nfunction isNotNil(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\n\nfunction isNil(value) {\n  return typeof value === 'undefined' || value === null;\n}\n/**\n * Examine if two objects are shallowly equaled.\n */\n\n\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || !objA || typeof objB !== 'object' || !objB) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  const bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB); // eslint-disable-next-line @typescript-eslint/prefer-for-of\n\n  for (let idx = 0; idx < keysA.length; idx++) {\n    const key = keysA[idx];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    if (objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isNonEmptyString(value) {\n  return typeof value === 'string' && value !== '';\n}\n\nfunction isTemplateRef(value) {\n  return value instanceof TemplateRef;\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nfunction toBoolean(value) {\n  return coerceBooleanProperty(value);\n}\n\nfunction toNumber(value, fallbackValue = 0) {\n  return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n\nfunction toCssPixel(value) {\n  return coerceCssPixelValue(value);\n} // eslint-disable  no-invalid-this\n\n/**\n * Get the function-property type's value\n */\n\n\nfunction valueFunctionProp(prop, ...args) {\n  return typeof prop === 'function' ? prop(...args) : prop;\n}\n\nfunction propDecoratorFactory(name, fallback) {\n  function propDecorator(target, propName, originalDescriptor) {\n    const privatePropName = `$$__zorroPropDecorator__${propName}`;\n\n    if (Object.prototype.hasOwnProperty.call(target, privatePropName)) {\n      warn(`The prop \"${privatePropName}\" is already exist, it will be overrided by ${name} decorator.`);\n    }\n\n    Object.defineProperty(target, privatePropName, {\n      configurable: true,\n      writable: true\n    });\n    return {\n      get() {\n        return originalDescriptor && originalDescriptor.get ? originalDescriptor.get.bind(this)() : this[privatePropName];\n      },\n\n      set(value) {\n        if (originalDescriptor && originalDescriptor.set) {\n          originalDescriptor.set.bind(this)(fallback(value));\n        }\n\n        this[privatePropName] = fallback(value);\n      }\n\n    };\n  }\n\n  return propDecorator;\n}\n/**\n * Input decorator that handle a prop to do get/set automatically with toBoolean\n *\n * Why not using @InputBoolean alone without @Input? AOT needs @Input to be visible\n *\n * @howToUse\n * ```\n * @Input() @InputBoolean() visible: boolean = false;\n *\n * // Act as below:\n * // @Input()\n * // get visible() { return this.__visible; }\n * // set visible(value) { this.__visible = value; }\n * // __visible = false;\n * ```\n */\n\n\nfunction InputBoolean() {\n  return propDecoratorFactory('InputBoolean', toBoolean);\n}\n\nfunction InputCssPixel() {\n  return propDecoratorFactory('InputCssPixel', toCssPixel);\n}\n\nfunction InputNumber(fallbackValue) {\n  return propDecoratorFactory('InputNumber', value => toNumber(value, fallbackValue));\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Silent an event by stopping and preventing it.\n */\n\n\nfunction silentEvent(e) {\n  e.stopPropagation();\n  e.preventDefault();\n}\n\nfunction getElementOffset(elem) {\n  if (!elem.getClientRects().length) {\n    return {\n      top: 0,\n      left: 0\n    };\n  }\n\n  const rect = elem.getBoundingClientRect();\n  const win = elem.ownerDocument.defaultView;\n  return {\n    top: rect.top + win.pageYOffset,\n    left: rect.left + win.pageXOffset\n  };\n}\n/**\n * Investigate if an event is a `TouchEvent`.\n */\n\n\nfunction isTouchEvent(event) {\n  return event.type.startsWith('touch');\n}\n\nfunction getEventPosition(event) {\n  return isTouchEvent(event) ? event.touches[0] || event.changedTouches[0] : event;\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nfunction getRegExp(prefix) {\n  const prefixArray = Array.isArray(prefix) ? prefix : [prefix];\n  let prefixToken = prefixArray.join('').replace(/(\\$|\\^)/g, '\\\\$1');\n\n  if (prefixArray.length > 1) {\n    prefixToken = `[${prefixToken}]`;\n  }\n\n  return new RegExp(`(\\\\s|^)(${prefixToken})[^\\\\s]*`, 'g');\n}\n\nfunction getMentions(value, prefix = '@') {\n  if (typeof value !== 'string') {\n    return [];\n  }\n\n  const regex = getRegExp(prefix);\n  const mentions = value.match(regex);\n  return mentions !== null ? mentions.map(e => e.trim()) : [];\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Much like lodash.\n */\n\n\nfunction padStart(toPad, length, element) {\n  if (toPad.length > length) {\n    return toPad;\n  }\n\n  const joined = `${getRepeatedElement(length, element)}${toPad}`;\n  return joined.slice(joined.length - length, joined.length);\n}\n\nfunction padEnd(toPad, length, element) {\n  const joined = `${toPad}${getRepeatedElement(length, element)}`;\n  return joined.slice(0, length);\n}\n\nfunction getRepeatedElement(length, element) {\n  return Array(length).fill(element).join('');\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nfunction isPromise(obj) {\n  return !!obj && typeof obj.then === 'function' && typeof obj.catch === 'function';\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nfunction getPercent(min, max, value) {\n  return (value - min) / (max - min) * 100;\n}\n\nfunction getPrecision(num) {\n  const numStr = num.toString();\n  const dotIndex = numStr.indexOf('.');\n  return dotIndex >= 0 ? numStr.length - dotIndex - 1 : 0;\n}\n\nfunction ensureNumberInRange(num, min, max) {\n  if (isNaN(num) || num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n}\n\nfunction isNumberFinite(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n\nfunction toDecimal(value, decimal) {\n  return Math.round(value * Math.pow(10, decimal)) / Math.pow(10, decimal);\n}\n\nfunction sum(input, initial = 0) {\n  return input.reduce((previous, current) => previous + current, initial);\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nfunction scrollIntoView(node) {\n  const nodeAsAny = node;\n\n  if (nodeAsAny.scrollIntoViewIfNeeded) {\n    /* eslint-disable-next-line @typescript-eslint/dot-notation */\n    nodeAsAny.scrollIntoViewIfNeeded(false);\n    return;\n  }\n\n  if (node.scrollIntoView) {\n    node.scrollIntoView(false);\n    return;\n  }\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n// from https://github.com/component/textarea-caret-position\n// We'll copy the properties below into the mirror div.\n// Note that some browsers, such as Firefox, do not concatenate properties\n// into their shorthand (e.g. padding-top, padding-bottom etc. -> padding),\n// so we have to list every single property explicitly.\n\n\nconst properties = ['direction', 'boxSizing', 'width', 'height', 'overflowX', 'overflowY', 'borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth', 'borderStyle', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n'fontStyle', 'fontVariant', 'fontWeight', 'fontStretch', 'fontSize', 'fontSizeAdjust', 'lineHeight', 'fontFamily', 'textAlign', 'textTransform', 'textIndent', 'textDecoration', 'letterSpacing', 'wordSpacing', 'tabSize', 'MozTabSize'];\nconst isBrowser = typeof window !== 'undefined';\nconst isFirefox = isBrowser && window.mozInnerScreenX != null;\n\nconst _parseInt = str => parseInt(str, 10);\n\nconst ɵ0 = _parseInt;\n\nfunction getCaretCoordinates(element, position, options) {\n  if (!isBrowser) {\n    throw new Error('textarea-caret-position#getCaretCoordinates should only be called in a browser');\n  }\n\n  const debug = options && options.debug || false;\n\n  if (debug) {\n    const el = document.querySelector('#input-textarea-caret-position-mirror-div');\n\n    if (el) {\n      el.parentNode.removeChild(el);\n    }\n  } // The mirror div will replicate the textarea's style\n\n\n  const div = document.createElement('div');\n  div.id = 'input-textarea-caret-position-mirror-div';\n  document.body.appendChild(div);\n  const style = div.style;\n  const computed = window.getComputedStyle ? window.getComputedStyle(element) : element.currentStyle; // currentStyle for IE < 9\n\n  const isInput = element.nodeName === 'INPUT'; // Default textarea styles\n\n  style.whiteSpace = 'pre-wrap';\n\n  if (!isInput) {\n    style.wordWrap = 'break-word'; // only for textarea-s\n  } // Position off-screen\n\n\n  style.position = 'absolute'; // required to return coordinates properly\n\n  if (!debug) {\n    style.visibility = 'hidden';\n  } // not 'display: none' because we want rendering\n  // Transfer the element's properties to the div\n\n\n  properties.forEach(prop => {\n    if (isInput && prop === 'lineHeight') {\n      // Special case for <input>s because text is rendered centered and line height may be != height\n      style.lineHeight = computed.height;\n    } else {\n      // @ts-ignore\n      style[prop] = computed[prop];\n    }\n  });\n\n  if (isFirefox) {\n    // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n    if (element.scrollHeight > _parseInt(computed.height)) {\n      style.overflowY = 'scroll';\n    }\n  } else {\n    style.overflow = 'hidden'; // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n  }\n\n  div.textContent = element.value.substring(0, position); // The second special handling for input type=\"text\" vs textarea:\n  // spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037\n\n  if (isInput) {\n    div.textContent = div.textContent.replace(/\\s/g, '\\u00a0');\n  }\n\n  const span = document.createElement('span'); // Wrapping must be replicated *exactly*, including when a long word gets\n  // onto the next line, with whitespace at the end of the line before (#7).\n  // The  *only* reliable way to do that is to copy the *entire* rest of the\n  // textarea's content into the <span> created at the caret position.\n  // For inputs, just '.' would be enough, but no need to bother.\n\n  span.textContent = element.value.substring(position) || '.'; // || because a completely empty faux span doesn't render at all\n\n  div.appendChild(span);\n  const coordinates = {\n    top: span.offsetTop + _parseInt(computed.borderTopWidth),\n    left: span.offsetLeft + _parseInt(computed.borderLeftWidth),\n    height: _parseInt(computed.lineHeight)\n  };\n\n  if (debug) {\n    span.style.backgroundColor = '#eee';\n    createDebugEle(element, coordinates);\n  } else {\n    document.body.removeChild(div);\n  }\n\n  return coordinates;\n}\n\nfunction createDebugEle(element, coordinates) {\n  const fontSize = getComputedStyle(element).getPropertyValue('font-size');\n  const rect = document.querySelector('#DEBUG') || document.createElement('div');\n  document.body.appendChild(rect);\n  rect.id = 'DEBUG';\n  rect.style.position = 'absolute';\n  rect.style.backgroundColor = 'red';\n  rect.style.height = fontSize;\n  rect.style.width = '1px';\n  rect.style.top = `${element.getBoundingClientRect().top - element.scrollTop + window.pageYOffset + coordinates.top}px`;\n  rect.style.left = `${element.getBoundingClientRect().left - element.scrollLeft + window.pageXOffset + coordinates.left}px`;\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nfunction isStyleSupport(styleName) {\n  if (typeof window !== 'undefined' && window.document && window.document.documentElement) {\n    const styleNameList = Array.isArray(styleName) ? styleName : [styleName];\n    const {\n      documentElement\n    } = window.document;\n    return styleNameList.some(name => name in documentElement.style);\n  }\n\n  return false;\n}\n\nfunction getStyleAsText(styles) {\n  if (!styles) {\n    return '';\n  }\n\n  return Object.keys(styles).map(key => {\n    const val = styles[key];\n    return `${key}:${typeof val === 'string' ? val : `${val}px`}`;\n  }).join(';');\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n// We only handle element & text node.\n\n\nconst ELEMENT_NODE = 1;\nconst TEXT_NODE = 3;\nconst COMMENT_NODE = 8;\nlet ellipsisContainer;\nconst wrapperStyle = {\n  padding: '0',\n  margin: '0',\n  display: 'inline',\n  lineHeight: 'inherit'\n};\n\nfunction pxToNumber(value) {\n  if (!value) {\n    return 0;\n  }\n\n  const match = value.match(/^\\d*(\\.\\d*)?/);\n  return match ? Number(match[0]) : 0;\n}\n\nfunction styleToString(style) {\n  // There are some different behavior between Firefox & Chrome.\n  // We have to handle this ourself.\n  const styleNames = Array.prototype.slice.apply(style);\n  return styleNames.map(name => `${name}: ${style.getPropertyValue(name)};`).join('');\n}\n\nfunction mergeChildren(children) {\n  const childList = [];\n  children.forEach(child => {\n    const prevChild = childList[childList.length - 1];\n\n    if (prevChild && child.nodeType === TEXT_NODE && prevChild.nodeType === TEXT_NODE) {\n      prevChild.data += child.data;\n    } else {\n      childList.push(child);\n    }\n  });\n  return childList;\n}\n\nfunction measure(originEle, rows, contentNodes, fixedContent, ellipsisStr, suffixStr = '') {\n  if (!ellipsisContainer) {\n    ellipsisContainer = document.createElement('div');\n    ellipsisContainer.setAttribute('aria-hidden', 'true');\n    document.body.appendChild(ellipsisContainer);\n  } // Get origin style\n\n\n  const originStyle = window.getComputedStyle(originEle);\n  const originCSS = styleToString(originStyle);\n  const lineHeight = pxToNumber(originStyle.lineHeight);\n  const maxHeight = Math.round(lineHeight * (rows + 1) + pxToNumber(originStyle.paddingTop) + pxToNumber(originStyle.paddingBottom)); // Set shadow\n\n  ellipsisContainer.setAttribute('style', originCSS);\n  ellipsisContainer.style.position = 'fixed';\n  ellipsisContainer.style.left = '0';\n  ellipsisContainer.style.height = 'auto';\n  ellipsisContainer.style.minHeight = 'auto';\n  ellipsisContainer.style.maxHeight = 'auto';\n  ellipsisContainer.style.top = '-999999px';\n  ellipsisContainer.style.zIndex = '-1000'; // clean up css overflow\n\n  ellipsisContainer.style.textOverflow = 'clip';\n  ellipsisContainer.style.whiteSpace = 'normal';\n  ellipsisContainer.style.webkitLineClamp = 'none';\n  const contentList = mergeChildren(contentNodes);\n  const container = document.createElement('div');\n  const contentContainer = document.createElement('span');\n  const suffixContainer = document.createTextNode(suffixStr);\n  const fixedContainer = document.createElement('span'); // Add styles in container\n\n  Object.assign(container.style, wrapperStyle);\n  Object.assign(contentContainer.style, wrapperStyle);\n  Object.assign(fixedContainer.style, wrapperStyle);\n  contentList.forEach(n => {\n    contentContainer.appendChild(n);\n  });\n  contentContainer.appendChild(suffixContainer);\n  fixedContent.forEach(node => {\n    fixedContainer.appendChild(node.cloneNode(true));\n  });\n  container.appendChild(contentContainer);\n  container.appendChild(fixedContainer); // Render in the fake container\n\n  ellipsisContainer.appendChild(container); // Check if ellipsis in measure div is height enough for content\n\n  function inRange() {\n    return ellipsisContainer.offsetHeight < maxHeight;\n  }\n\n  if (inRange()) {\n    const text = ellipsisContainer.innerHTML;\n    ellipsisContainer.removeChild(container);\n    return {\n      contentNodes,\n      text,\n      ellipsis: false\n    };\n  } // We should clone the childNode since they're controlled by React and we can't reuse it without warning\n\n\n  const childNodes = Array.prototype.slice.apply(ellipsisContainer.childNodes[0].childNodes[0].cloneNode(true).childNodes).filter(({\n    nodeType\n  }) => nodeType !== COMMENT_NODE);\n  const fixedNodes = Array.prototype.slice.apply(ellipsisContainer.childNodes[0].childNodes[1].cloneNode(true).childNodes);\n  ellipsisContainer.removeChild(container); // ========================= Find match ellipsis content =========================\n\n  ellipsisContainer.innerHTML = ''; // Create origin content holder\n\n  const ellipsisContentHolder = document.createElement('span');\n  ellipsisContainer.appendChild(ellipsisContentHolder);\n  const ellipsisTextNode = document.createTextNode(ellipsisStr + suffixStr);\n  ellipsisContentHolder.appendChild(ellipsisTextNode);\n  fixedNodes.forEach(childNode => {\n    ellipsisContainer.appendChild(childNode);\n  }); // Append before fixed nodes\n\n  function appendChildNode(node) {\n    ellipsisContentHolder.insertBefore(node, ellipsisTextNode);\n  } // Get maximum text\n\n\n  function measureText(textNode, fullText, startLoc = 0, endLoc = fullText.length, lastSuccessLoc = 0) {\n    const midLoc = Math.floor((startLoc + endLoc) / 2);\n    textNode.textContent = fullText.slice(0, midLoc);\n\n    if (startLoc >= endLoc - 1) {\n      // Loop when step is small\n      for (let step = endLoc; step >= startLoc; step -= 1) {\n        const currentStepText = fullText.slice(0, step);\n        textNode.textContent = currentStepText;\n\n        if (inRange() || !currentStepText) {\n          return step === fullText.length ? {\n            finished: false,\n            node: document.createTextNode(fullText)\n          } : {\n            finished: true,\n            node: document.createTextNode(currentStepText)\n          };\n        }\n      }\n    }\n\n    if (inRange()) {\n      return measureText(textNode, fullText, midLoc, endLoc, midLoc);\n    } else {\n      return measureText(textNode, fullText, startLoc, midLoc, lastSuccessLoc);\n    }\n  }\n\n  function measureNode(childNode, index) {\n    const type = childNode.nodeType;\n\n    if (type === ELEMENT_NODE) {\n      // We don't split element, it will keep if whole element can be displayed.\n      // appendChildNode(childNode);\n      if (inRange()) {\n        return {\n          finished: false,\n          node: contentList[index]\n        };\n      } // Clean up if can not pull in\n\n\n      ellipsisContentHolder.removeChild(childNode);\n      return {\n        finished: true,\n        node: null\n      };\n    } else if (type === TEXT_NODE) {\n      const fullText = childNode.textContent || '';\n      const textNode = document.createTextNode(fullText);\n      appendChildNode(textNode);\n      return measureText(textNode, fullText);\n    } // Not handle other type of content\n    // PS: This code should not be attached after react 16\n\n\n    return {\n      finished: false,\n      node: null\n    };\n  }\n\n  const ellipsisNodes = [];\n  childNodes.some((childNode, index) => {\n    const {\n      finished,\n      node\n    } = measureNode(childNode, index);\n\n    if (node) {\n      ellipsisNodes.push(node);\n    }\n\n    return finished;\n  });\n  const result = {\n    contentNodes: ellipsisNodes,\n    text: ellipsisContainer.innerHTML,\n    ellipsis: true\n  };\n\n  while (ellipsisContainer.firstChild) {\n    ellipsisContainer.removeChild(ellipsisContainer.firstChild);\n  }\n\n  return result;\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nlet scrollbarVerticalSize;\nlet scrollbarHorizontalSize; // Measure scrollbar width for padding body during modal show/hide\n\nconst scrollbarMeasure = {\n  position: 'absolute',\n  top: '-9999px',\n  width: '50px',\n  height: '50px'\n};\n\nfunction measureScrollbar(direction = 'vertical', prefix = 'ant') {\n  if (typeof document === 'undefined' || typeof window === 'undefined') {\n    return 0;\n  }\n\n  const isVertical = direction === 'vertical';\n\n  if (isVertical && scrollbarVerticalSize) {\n    return scrollbarVerticalSize;\n  } else if (!isVertical && scrollbarHorizontalSize) {\n    return scrollbarHorizontalSize;\n  }\n\n  const scrollDiv = document.createElement('div');\n  Object.keys(scrollbarMeasure).forEach(scrollProp => {\n    // @ts-ignore\n    scrollDiv.style[scrollProp] = scrollbarMeasure[scrollProp];\n  }); // apply hide scrollbar className ahead\n\n  scrollDiv.className = `${prefix}-hide-scrollbar scroll-div-append-to-body`; // Append related overflow style\n\n  if (isVertical) {\n    scrollDiv.style.overflowY = 'scroll';\n  } else {\n    scrollDiv.style.overflowX = 'scroll';\n  }\n\n  document.body.appendChild(scrollDiv);\n  let size = 0;\n\n  if (isVertical) {\n    size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n    scrollbarVerticalSize = size;\n  } else {\n    size = scrollDiv.offsetHeight - scrollDiv.clientHeight;\n    scrollbarHorizontalSize = size;\n  }\n\n  document.body.removeChild(scrollDiv);\n  return size;\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nfunction ensureInBounds(value, boundValue) {\n  return value ? value < boundValue ? value : boundValue : boundValue;\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nfunction inNextTick() {\n  const timer = new Subject();\n  Promise.resolve().then(() => timer.next());\n  return timer.pipe(take(1));\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nfunction wrapIntoObservable(value) {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    // Use `Promise.resolve()` to wrap promise-like instances.\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { InputBoolean, InputCssPixel, InputNumber, arraysEqual, createDebugEle, ensureInBounds, ensureNumberInRange, getCaretCoordinates, getElementOffset, getEventPosition, getMentions, getPercent, getPrecision, getRegExp, getRepeatedElement, getStyleAsText, inNextTick, isNil, isNonEmptyString, isNotNil, isNumberFinite, isPromise, isStyleSupport, isTemplateRef, isTouchEvent, measure, measureScrollbar, padEnd, padStart, properties, pxToNumber, scrollIntoView, shallowCopyArray, shallowEqual, silentEvent, sum, toArray, toBoolean, toCssPixel, toDecimal, toNumber, valueFunctionProp, wrapIntoObservable, ɵ0 }; //# sourceMappingURL=ng-zorro-antd-core-util.js.map","map":null,"metadata":{},"sourceType":"module"}