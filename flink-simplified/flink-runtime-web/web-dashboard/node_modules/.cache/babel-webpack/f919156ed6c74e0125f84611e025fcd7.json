{"ast":null,"code":"import { NavigationEnd } from '@angular/router';\nimport { EMPTY, fromEvent, interval, merge, Subject } from 'rxjs';\nimport { debounceTime, filter, map, mapTo, share, startWith, switchMap, tap } from 'rxjs/operators';\nimport { BASE_URL } from '../app.config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let StatusService = /*#__PURE__*/(() => {\n  class StatusService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      /**\n       * Error server response message cache list\n       */\n\n      this.listOfErrorMessage = [];\n      /**\n       * Refresh stream generated from the configuration\n       */\n\n      this.refresh$ = new Subject().asObservable();\n      /**\n       * Force refresh stream trigger manually\n       */\n\n      this.forceRefresh$ = new Subject();\n      /**\n       * Document visibility stream\n       */\n\n      this.visibility$ = fromEvent(window, 'visibilitychange').pipe(map(e => !e.target.hidden));\n    }\n    /**\n     * Trigger force refresh\n     */\n\n\n    forceRefresh() {\n      this.forceRefresh$.next(true);\n    }\n    /**\n     * Create refresh stream when APP_INITIALIZER\n     * refresh interval stream will be regenerated when NavigationEnd || forceRefresh || visibility change\n     * @param router\n     */\n\n\n    boot(router) {\n      return this.httpClient.get(`${BASE_URL}/config`).pipe(tap(data => {\n        this.configuration = data;\n        const navigationEnd$ = router.events.pipe(filter(item => item instanceof NavigationEnd), mapTo(true));\n        const interval$ = interval(this.configuration['refresh-interval']).pipe(mapTo(true), startWith(true));\n        this.refresh$ = merge(this.visibility$, this.forceRefresh$, navigationEnd$).pipe(startWith(true), debounceTime(300), switchMap(active => active ? interval$ : EMPTY), share());\n      })).toPromise();\n    }\n\n  }\n\n  StatusService.ɵfac = function StatusService_Factory(t) {\n    return new (t || StatusService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  StatusService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StatusService,\n    factory: StatusService.ɵfac,\n    providedIn: 'root'\n  });\n  return StatusService;\n})();","map":null,"metadata":{},"sourceType":"module"}