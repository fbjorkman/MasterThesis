{"version":3,"file":"icon.service.d.ts","sources":["icon.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpBackend, HttpClient } from '@angular/common/http';\nimport { Renderer2, RendererFactory2 } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Observable } from 'rxjs';\nimport { CachedIconDefinition, IconDefinition, ThemeType, TwoToneColorPalette, TwoToneColorPaletteSetter } from '../types';\nexport declare class IconService {\n    protected _rendererFactory: RendererFactory2;\n    protected _handler: HttpBackend;\n    protected _document: any;\n    protected sanitizer: DomSanitizer;\n    defaultTheme: ThemeType;\n    set twoToneColor({ primaryColor, secondaryColor }: TwoToneColorPaletteSetter);\n    get twoToneColor(): TwoToneColorPaletteSetter;\n    protected _renderer: Renderer2;\n    protected _http: HttpClient;\n    /**\n     * All icon definitions would be registered here.\n     */\n    protected readonly _svgDefinitions: Map<string, IconDefinition>;\n    /**\n     * Cache all rendered icons. Icons are identified by name, theme,\n     * and for twotone icons, primary color and secondary color.\n     */\n    protected readonly _svgRenderedDefinitions: Map<string, CachedIconDefinition>;\n    protected _inProgressFetches: Map<string, Observable<IconDefinition | null>>;\n    /**\n     * Url prefix for fetching inline SVG by dynamic importing.\n     */\n    protected _assetsUrlRoot: string;\n    protected _twoToneColorPalette: TwoToneColorPalette;\n    /** A flag indicates whether jsonp loading is enabled. */\n    private _enableJsonpLoading;\n    private readonly _jsonpIconLoad$;\n    constructor(_rendererFactory: RendererFactory2, _handler: HttpBackend, _document: any, sanitizer: DomSanitizer);\n    /**\n     * Call this method to switch to jsonp like loading.\n     */\n    useJsonpLoading(): void;\n    /**\n     * Change the prefix of the inline svg resources, so they could be deployed elsewhere, like CDN.\n     * @param prefix\n     */\n    changeAssetsSource(prefix: string): void;\n    /**\n     * Add icons provided by ant design.\n     * @param icons\n     */\n    addIcon(...icons: IconDefinition[]): void;\n    /**\n     * Register an icon. Namespace is required.\n     * @param type\n     * @param literal\n     */\n    addIconLiteral(type: string, literal: string): void;\n    /**\n     * Remove all cache.\n     */\n    clear(): void;\n    /**\n     * Get a rendered `SVGElement`.\n     * @param icon\n     * @param twoToneColor\n     */\n    getRenderedContent(icon: IconDefinition | string, twoToneColor?: string): Observable<SVGElement>;\n    getCachedIcons(): Map<string, IconDefinition>;\n    /**\n     * Get raw svg and assemble a `IconDefinition` object.\n     * @param type\n     */\n    protected _loadIconDynamically(type: string): Observable<IconDefinition | null>;\n    protected _loadIconDynamicallyWithJsonp(icon: IconDefinition, url: string): Observable<IconDefinition>;\n    /**\n     * Render a new `SVGElement` for a given `IconDefinition`, or make a copy from cache.\n     * @param icon\n     * @param twoToneColor\n     */\n    protected _loadSVGFromCacheOrCreateNew(icon: IconDefinition, twoToneColor?: string): SVGElement;\n    protected _createSVGElementFromString(str: string): SVGElement;\n    protected _setSVGAttribute(svg: SVGElement): SVGElement;\n    protected _colorizeSVGIcon(svg: SVGElement, twotone: boolean, pri: string, sec: string): SVGElement;\n}\n"]}