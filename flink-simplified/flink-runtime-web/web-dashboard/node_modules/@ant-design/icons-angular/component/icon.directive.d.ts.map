{"version":3,"file":"icon.directive.d.ts","sources":["icon.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { ElementRef, OnChanges, Renderer2, SimpleChanges } from '@angular/core';\nimport { IconDefinition, ThemeType } from '../types';\nimport { IconService } from './icon.service';\ninterface RenderMeta {\n    type: string | IconDefinition;\n    theme: ThemeType;\n    twoToneColor: string;\n}\nexport declare class IconDirective implements OnChanges {\n    protected _iconService: IconService;\n    protected _elementRef: ElementRef;\n    protected _renderer: Renderer2;\n    type: string | IconDefinition;\n    theme: ThemeType;\n    twoToneColor: string;\n    constructor(_iconService: IconService, _elementRef: ElementRef, _renderer: Renderer2);\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Render a new icon in the current element. Remove the icon when `type` is falsy.\n     */\n    protected _changeIcon(): Promise<SVGElement | null>;\n    protected _getSelfRenderMeta(): RenderMeta;\n    /**\n     * Parse a icon to the standard form, an `IconDefinition` or a string like 'account-book-fill` (with a theme suffixed).\n     * If namespace is specified, ignore theme because it meaningless for users' icons.\n     *\n     * @param type\n     * @param theme\n     */\n    protected _parseIconType(type: string | IconDefinition, theme: ThemeType): IconDefinition | string;\n    protected _setSVGElement(svg: SVGElement): void;\n    protected _clearSVGElement(): void;\n}\nexport {};\n"]}