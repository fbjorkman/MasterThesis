{"version":3,"file":"progress.component.d.ts","sources":["progress.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { ChangeDetectorRef, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { NzConfigKey, NzConfigService } from 'ng-zorro-antd/core/config';\nimport { NgStyleInterface, NumberInput } from 'ng-zorro-antd/core/types';\nimport { NzProgressCirclePath, NzProgressFormatter, NzProgressGapPositionType, NzProgressStatusType, NzProgressStepItem, NzProgressStrokeColorType, NzProgressStrokeLinecapType, NzProgressTypeType } from './typings';\nexport declare class NzProgressComponent implements OnChanges, OnInit, OnDestroy {\n    private cdr;\n    nzConfigService: NzConfigService;\n    private directionality;\n    readonly _nzModuleName: NzConfigKey;\n    static ngAcceptInputType_nzSuccessPercent: NumberInput;\n    static ngAcceptInputType_nzPercent: NumberInput;\n    static ngAcceptInputType_nzStrokeWidth: NumberInput;\n    static ngAcceptInputType_nzGapDegree: NumberInput;\n    static ngAcceptInputType_nzSteps: NumberInput;\n    nzShowInfo: boolean;\n    nzWidth: number;\n    nzStrokeColor?: NzProgressStrokeColorType;\n    nzSize: 'default' | 'small';\n    nzFormat?: NzProgressFormatter;\n    nzSuccessPercent?: number;\n    nzPercent: number;\n    nzStrokeWidth?: number;\n    nzGapDegree?: number;\n    nzStatus?: NzProgressStatusType;\n    nzType: NzProgressTypeType;\n    nzGapPosition: NzProgressGapPositionType;\n    nzStrokeLinecap: NzProgressStrokeLinecapType;\n    nzSteps: number;\n    steps: NzProgressStepItem[];\n    /** Gradient style when `nzType` is `line`. */\n    lineGradient: string | null;\n    /** If user uses gradient color. */\n    isGradient: boolean;\n    /** If the linear progress is a step progress. */\n    isSteps: boolean;\n    /**\n     * Each progress whose `nzType` is circle or dashboard should have unique id to\n     * define `<linearGradient>`.\n     */\n    gradientId: number;\n    /** Paths to rendered in the template. */\n    progressCirclePath: NzProgressCirclePath[];\n    circleGradient?: Array<{\n        offset: string;\n        color: string;\n    }>;\n    trailPathStyle: NgStyleInterface | null;\n    pathString?: string;\n    icon: string;\n    dir: Direction;\n    trackByFn: (index: number) => string;\n    get formatter(): NzProgressFormatter;\n    get status(): NzProgressStatusType;\n    get strokeWidth(): number;\n    get isCircleStyle(): boolean;\n    private cachedStatus;\n    private inferredStatus;\n    private destroy$;\n    constructor(cdr: ChangeDetectorRef, nzConfigService: NzConfigService, directionality: Directionality);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    private updateIcon;\n    /**\n     * Calculate step render configs.\n     */\n    private getSteps;\n    /**\n     * Calculate paths when the type is circle or dashboard.\n     */\n    private getCirclePaths;\n    private setStrokeColor;\n}\n"]}