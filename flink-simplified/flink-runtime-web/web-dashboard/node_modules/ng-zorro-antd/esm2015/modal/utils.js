/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
export function applyConfigDefaults(config, defaultOptions) {
    return Object.assign(Object.assign({}, defaultOptions), config);
}
export function getValueWithConfig(userValue, configValue, defaultValue) {
    return typeof userValue === 'undefined'
        ? typeof configValue === 'undefined'
            ? defaultValue
            : configValue
        : userValue;
}
/**
 * Assign the params into the content component instance.
 *
 * @deprecated Should use dependency injection to get the params for user
 * @breaking-change 13.0.0
 */
export function setContentInstanceParams(instance, params) {
    Object.assign(instance, params);
}
export function getConfigFromComponent(component) {
    const { nzCentered, nzMask, nzMaskClosable, nzClosable, nzOkLoading, nzOkDisabled, nzCancelDisabled, nzCancelLoading, nzKeyboard, nzNoAnimation, nzContent, nzComponentParams, nzFooter, nzZIndex, nzWidth, nzWrapClassName, nzClassName, nzStyle, nzTitle, nzCloseIcon, nzMaskStyle, nzBodyStyle, nzOkText, nzCancelText, nzOkType, nzOkDanger, nzIconType, nzModalType, nzOnOk, nzOnCancel, nzAfterOpen, nzAfterClose, nzCloseOnNavigation, nzAutofocus } = component;
    return {
        nzCentered,
        nzMask,
        nzMaskClosable,
        nzClosable,
        nzOkLoading,
        nzOkDisabled,
        nzCancelDisabled,
        nzCancelLoading,
        nzKeyboard,
        nzNoAnimation,
        nzContent,
        nzComponentParams,
        nzFooter,
        nzZIndex,
        nzWidth,
        nzWrapClassName,
        nzClassName,
        nzStyle,
        nzTitle,
        nzCloseIcon,
        nzMaskStyle,
        nzBodyStyle,
        nzOkText,
        nzCancelText,
        nzOkType,
        nzOkDanger,
        nzIconType,
        nzModalType,
        nzOnOk,
        nzOnCancel,
        nzAfterOpen,
        nzAfterClose,
        nzCloseOnNavigation,
        nzAutofocus
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9jb21wb25lbnRzL21vZGFsL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUtILE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxNQUFvQixFQUFFLGNBQTRCO0lBQ3BGLHVDQUFZLGNBQWMsR0FBSyxNQUFNLEVBQUc7QUFDMUMsQ0FBQztBQUVELE1BQU0sVUFBVSxrQkFBa0IsQ0FDaEMsU0FBd0IsRUFDeEIsV0FBMEIsRUFDMUIsWUFBZTtJQUVmLE9BQU8sT0FBTyxTQUFTLEtBQUssV0FBVztRQUNyQyxDQUFDLENBQUMsT0FBTyxXQUFXLEtBQUssV0FBVztZQUNsQyxDQUFDLENBQUMsWUFBWTtZQUNkLENBQUMsQ0FBQyxXQUFXO1FBQ2YsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNoQixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsd0JBQXdCLENBQUksUUFBVyxFQUFFLE1BQThCO0lBQ3JGLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFFRCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsU0FBMkI7SUFDaEUsTUFBTSxFQUNKLFVBQVUsRUFDVixNQUFNLEVBQ04sY0FBYyxFQUNkLFVBQVUsRUFDVixXQUFXLEVBQ1gsWUFBWSxFQUNaLGdCQUFnQixFQUNoQixlQUFlLEVBQ2YsVUFBVSxFQUNWLGFBQWEsRUFDYixTQUFTLEVBQ1QsaUJBQWlCLEVBQ2pCLFFBQVEsRUFDUixRQUFRLEVBQ1IsT0FBTyxFQUNQLGVBQWUsRUFDZixXQUFXLEVBQ1gsT0FBTyxFQUNQLE9BQU8sRUFDUCxXQUFXLEVBQ1gsV0FBVyxFQUNYLFdBQVcsRUFDWCxRQUFRLEVBQ1IsWUFBWSxFQUNaLFFBQVEsRUFDUixVQUFVLEVBQ1YsVUFBVSxFQUNWLFdBQVcsRUFDWCxNQUFNLEVBQ04sVUFBVSxFQUNWLFdBQVcsRUFDWCxZQUFZLEVBQ1osbUJBQW1CLEVBQ25CLFdBQVcsRUFDWixHQUFHLFNBQVMsQ0FBQztJQUNkLE9BQU87UUFDTCxVQUFVO1FBQ1YsTUFBTTtRQUNOLGNBQWM7UUFDZCxVQUFVO1FBQ1YsV0FBVztRQUNYLFlBQVk7UUFDWixnQkFBZ0I7UUFDaEIsZUFBZTtRQUNmLFVBQVU7UUFDVixhQUFhO1FBQ2IsU0FBUztRQUNULGlCQUFpQjtRQUNqQixRQUFRO1FBQ1IsUUFBUTtRQUNSLE9BQU87UUFDUCxlQUFlO1FBQ2YsV0FBVztRQUNYLE9BQU87UUFDUCxPQUFPO1FBQ1AsV0FBVztRQUNYLFdBQVc7UUFDWCxXQUFXO1FBQ1gsUUFBUTtRQUNSLFlBQVk7UUFDWixRQUFRO1FBQ1IsVUFBVTtRQUNWLFVBQVU7UUFDVixXQUFXO1FBQ1gsTUFBTTtRQUNOLFVBQVU7UUFDVixXQUFXO1FBQ1gsWUFBWTtRQUNaLG1CQUFtQjtRQUNuQixXQUFXO0tBQ1osQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBNb2RhbE9wdGlvbnMgfSBmcm9tICcuL21vZGFsLXR5cGVzJztcbmltcG9ydCB7IE56TW9kYWxDb21wb25lbnQgfSBmcm9tICcuL21vZGFsLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseUNvbmZpZ0RlZmF1bHRzKGNvbmZpZzogTW9kYWxPcHRpb25zLCBkZWZhdWx0T3B0aW9uczogTW9kYWxPcHRpb25zKTogTW9kYWxPcHRpb25zIHtcbiAgcmV0dXJuIHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLmNvbmZpZyB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWVXaXRoQ29uZmlnPFQ+KFxuICB1c2VyVmFsdWU6IFQgfCB1bmRlZmluZWQsXG4gIGNvbmZpZ1ZhbHVlOiBUIHwgdW5kZWZpbmVkLFxuICBkZWZhdWx0VmFsdWU6IFRcbik6IFQgfCB1bmRlZmluZWQge1xuICByZXR1cm4gdHlwZW9mIHVzZXJWYWx1ZSA9PT0gJ3VuZGVmaW5lZCdcbiAgICA/IHR5cGVvZiBjb25maWdWYWx1ZSA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgID8gZGVmYXVsdFZhbHVlXG4gICAgICA6IGNvbmZpZ1ZhbHVlXG4gICAgOiB1c2VyVmFsdWU7XG59XG5cbi8qKlxuICogQXNzaWduIHRoZSBwYXJhbXMgaW50byB0aGUgY29udGVudCBjb21wb25lbnQgaW5zdGFuY2UuXG4gKlxuICogQGRlcHJlY2F0ZWQgU2hvdWxkIHVzZSBkZXBlbmRlbmN5IGluamVjdGlvbiB0byBnZXQgdGhlIHBhcmFtcyBmb3IgdXNlclxuICogQGJyZWFraW5nLWNoYW5nZSAxMy4wLjBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldENvbnRlbnRJbnN0YW5jZVBhcmFtczxUPihpbnN0YW5jZTogVCwgcGFyYW1zOiBQYXJ0aWFsPFQ+IHwgdW5kZWZpbmVkKTogdm9pZCB7XG4gIE9iamVjdC5hc3NpZ24oaW5zdGFuY2UsIHBhcmFtcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb25maWdGcm9tQ29tcG9uZW50KGNvbXBvbmVudDogTnpNb2RhbENvbXBvbmVudCk6IE1vZGFsT3B0aW9ucyB7XG4gIGNvbnN0IHtcbiAgICBuekNlbnRlcmVkLFxuICAgIG56TWFzayxcbiAgICBuek1hc2tDbG9zYWJsZSxcbiAgICBuekNsb3NhYmxlLFxuICAgIG56T2tMb2FkaW5nLFxuICAgIG56T2tEaXNhYmxlZCxcbiAgICBuekNhbmNlbERpc2FibGVkLFxuICAgIG56Q2FuY2VsTG9hZGluZyxcbiAgICBuektleWJvYXJkLFxuICAgIG56Tm9BbmltYXRpb24sXG4gICAgbnpDb250ZW50LFxuICAgIG56Q29tcG9uZW50UGFyYW1zLFxuICAgIG56Rm9vdGVyLFxuICAgIG56WkluZGV4LFxuICAgIG56V2lkdGgsXG4gICAgbnpXcmFwQ2xhc3NOYW1lLFxuICAgIG56Q2xhc3NOYW1lLFxuICAgIG56U3R5bGUsXG4gICAgbnpUaXRsZSxcbiAgICBuekNsb3NlSWNvbixcbiAgICBuek1hc2tTdHlsZSxcbiAgICBuekJvZHlTdHlsZSxcbiAgICBuek9rVGV4dCxcbiAgICBuekNhbmNlbFRleHQsXG4gICAgbnpPa1R5cGUsXG4gICAgbnpPa0RhbmdlcixcbiAgICBuekljb25UeXBlLFxuICAgIG56TW9kYWxUeXBlLFxuICAgIG56T25PayxcbiAgICBuek9uQ2FuY2VsLFxuICAgIG56QWZ0ZXJPcGVuLFxuICAgIG56QWZ0ZXJDbG9zZSxcbiAgICBuekNsb3NlT25OYXZpZ2F0aW9uLFxuICAgIG56QXV0b2ZvY3VzXG4gIH0gPSBjb21wb25lbnQ7XG4gIHJldHVybiB7XG4gICAgbnpDZW50ZXJlZCxcbiAgICBuek1hc2ssXG4gICAgbnpNYXNrQ2xvc2FibGUsXG4gICAgbnpDbG9zYWJsZSxcbiAgICBuek9rTG9hZGluZyxcbiAgICBuek9rRGlzYWJsZWQsXG4gICAgbnpDYW5jZWxEaXNhYmxlZCxcbiAgICBuekNhbmNlbExvYWRpbmcsXG4gICAgbnpLZXlib2FyZCxcbiAgICBuek5vQW5pbWF0aW9uLFxuICAgIG56Q29udGVudCxcbiAgICBuekNvbXBvbmVudFBhcmFtcyxcbiAgICBuekZvb3RlcixcbiAgICBuelpJbmRleCxcbiAgICBueldpZHRoLFxuICAgIG56V3JhcENsYXNzTmFtZSxcbiAgICBuekNsYXNzTmFtZSxcbiAgICBuelN0eWxlLFxuICAgIG56VGl0bGUsXG4gICAgbnpDbG9zZUljb24sXG4gICAgbnpNYXNrU3R5bGUsXG4gICAgbnpCb2R5U3R5bGUsXG4gICAgbnpPa1RleHQsXG4gICAgbnpDYW5jZWxUZXh0LFxuICAgIG56T2tUeXBlLFxuICAgIG56T2tEYW5nZXIsXG4gICAgbnpJY29uVHlwZSxcbiAgICBuek1vZGFsVHlwZSxcbiAgICBuek9uT2ssXG4gICAgbnpPbkNhbmNlbCxcbiAgICBuekFmdGVyT3BlbixcbiAgICBuekFmdGVyQ2xvc2UsXG4gICAgbnpDbG9zZU9uTmF2aWdhdGlvbixcbiAgICBuekF1dG9mb2N1c1xuICB9O1xufVxuIl19