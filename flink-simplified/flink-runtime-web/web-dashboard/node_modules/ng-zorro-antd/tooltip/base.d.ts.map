{"version":3,"file":"base.d.ts","sources":["base.d.ts"],"names":[],"mappingssourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { CdkConnectedOverlay, CdkOverlayOrigin, ConnectedOverlayPositionChange, ConnectionPositionPair } from '@angular/cdk/overlay';\nimport { AfterViewInit, ChangeDetectorRef, ComponentFactory, ComponentFactoryResolver, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { NzConfigService, PopConfirmConfig, PopoverConfig } from 'ng-zorro-antd/core/config';\nimport { NzNoAnimationDirective } from 'ng-zorro-antd/core/no-animation';\nimport { BooleanInput, NgClassInterface, NgStyleInterface, NzTSType } from 'ng-zorro-antd/core/types';\nexport interface PropertyMapping {\n    [key: string]: [string, () => unknown];\n}\nexport declare type NzTooltipTrigger = 'click' | 'focus' | 'hover' | null;\nexport declare abstract class NzTooltipBaseDirective implements OnChanges, OnDestroy, AfterViewInit {\n    elementRef: ElementRef;\n    protected hostView: ViewContainerRef;\n    protected resolver: ComponentFactoryResolver;\n    protected renderer: Renderer2;\n    protected noAnimation?: NzNoAnimationDirective | undefined;\n    protected nzConfigService?: NzConfigService | undefined;\n    config?: Required<PopoverConfig | PopConfirmConfig>;\n    directiveTitle?: NzTSType | null;\n    directiveContent?: NzTSType | null;\n    title?: NzTSType | null;\n    content?: NzTSType | null;\n    trigger?: NzTooltipTrigger;\n    placement?: string | string[];\n    origin?: ElementRef<HTMLElement>;\n    visible?: boolean;\n    mouseEnterDelay?: number;\n    mouseLeaveDelay?: number;\n    overlayClassName?: string;\n    overlayStyle?: NgStyleInterface;\n    visibleChange: EventEmitter<boolean>;\n    /**\n     * For create tooltip dynamically. This should be override for each different component.\n     */\n    protected componentFactory: ComponentFactory<NzTooltipBaseComponent>;\n    /**\n     * This true title that would be used in other parts on this component.\n     */\n    protected get _title(): NzTSType | null;\n    protected get _content(): NzTSType | null;\n    protected get _trigger(): NzTooltipTrigger;\n    protected get _placement(): string[];\n    protected get _visible(): boolean;\n    protected get _mouseEnterDelay(): number;\n    protected get _mouseLeaveDelay(): number;\n    protected get _overlayClassName(): string | null;\n    protected get _overlayStyle(): NgStyleInterface | null;\n    private internalVisible;\n    protected getProxyPropertyMap(): PropertyMapping;\n    component?: NzTooltipBaseComponent;\n    protected readonly destroy$: Subject<void>;\n    protected readonly triggerDisposables: Array<() => void>;\n    private delayTimer?;\n    constructor(elementRef: ElementRef, hostView: ViewContainerRef, resolver: ComponentFactoryResolver, renderer: Renderer2, noAnimation?: NzNoAnimationDirective | undefined, nzConfigService?: NzConfigService | undefined);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    show(): void;\n    hide(): void;\n    /**\n     * Force the component to update its position.\n     */\n    updatePosition(): void;\n    /**\n     * Create a dynamic tooltip component. This method can be override.\n     */\n    protected createComponent(): void;\n    protected registerTriggers(): void;\n    private updatePropertiesByChanges;\n    private updatePropertiesByKeys;\n    private initProperties;\n    private updateComponentValue;\n    private delayEnterLeave;\n    private removeTriggerListeners;\n    private clearTogglingTimer;\n}\nexport declare abstract class NzTooltipBaseComponent implements OnDestroy, OnInit {\n    cdr: ChangeDetectorRef;\n    private directionality;\n    noAnimation?: NzNoAnimationDirective | undefined;\n    static ngAcceptInputType_nzVisible: BooleanInput;\n    overlay: CdkConnectedOverlay;\n    nzTitle: NzTSType | null;\n    nzContent: NzTSType | null;\n    nzOverlayClassName: string;\n    nzOverlayStyle: NgStyleInterface;\n    nzBackdrop: boolean;\n    nzMouseEnterDelay?: number;\n    nzMouseLeaveDelay?: number;\n    nzVisibleChange: Subject<boolean>;\n    set nzVisible(value: boolean);\n    get nzVisible(): boolean;\n    _visible: boolean;\n    set nzTrigger(value: NzTooltipTrigger);\n    get nzTrigger(): NzTooltipTrigger;\n    protected _trigger: NzTooltipTrigger;\n    set nzPlacement(value: string[]);\n    preferredPlacement: string;\n    origin: CdkOverlayOrigin;\n    dir: Direction;\n    _classMap: NgClassInterface;\n    _prefix: string;\n    _positions: ConnectionPositionPair[];\n    protected destroy$: Subject<void>;\n    constructor(cdr: ChangeDetectorRef, directionality: Directionality, noAnimation?: NzNoAnimationDirective | undefined);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    show(): void;\n    hide(): void;\n    updateByDirective(): void;\n    /**\n     * Force the component to update its position.\n     */\n    updatePosition(): void;\n    onPositionChange(position: ConnectedOverlayPositionChange): void;\n    updateStyles(): void;\n    setOverlayOrigin(origin: CdkOverlayOrigin): void;\n    onClickOutside(event: MouseEvent): void;\n    /**\n     * Hide the component while the content is empty.\n     */\n    private updateVisibilityByTitle;\n    /**\n     * Empty component cannot be opened.\n     */\n    protected abstract isEmpty(): boolean;\n}\nexport declare function isTooltipEmpty(value: string | TemplateRef<void> | null): boolean;\n"]}