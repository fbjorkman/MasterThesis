{"version":3,"file":"resize-observer.service.d.ts","sources":["resize-observer.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport { ElementRef, OnDestroy } from '@angular/core';\nimport { Observable } from 'rxjs';\n/**\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n */\nexport declare class NzResizeObserverFactory {\n    create(callback: ResizeObserverCallback): ResizeObserver | null;\n}\n/** An injectable service that allows watching elements for changes to their content. */\nexport declare class NzResizeObserver implements OnDestroy {\n    private nzResizeObserverFactory;\n    /** Keeps track of the existing ResizeObservers so they can be reused. */\n    private observedElements;\n    constructor(nzResizeObserverFactory: NzResizeObserverFactory);\n    ngOnDestroy(): void;\n    observe(elementOrRef: Element | ElementRef<Element>): Observable<ResizeObserverEntry[]>;\n    /**\n     * Observes the given element by using the existing ResizeObserver if available, or creating a\n     * new one if not.\n     */\n    private observeElement;\n    /**\n     * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\n     * observing this element.\n     */\n    private unobserveElement;\n    /** Clean up the underlying ResizeObserver for the specified element. */\n    private cleanupObserver;\n}\n"]}