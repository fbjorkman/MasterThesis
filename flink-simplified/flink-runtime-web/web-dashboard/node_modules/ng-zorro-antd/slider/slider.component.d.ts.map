{"version":3,"file":"slider.component.d.ts","sources":["slider.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\nimport { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { BooleanInput, NumberInput } from 'ng-zorro-antd/core/types';\nimport { NzSliderHandleComponent } from './handle.component';\nimport { NzSliderService } from './slider.service';\nimport { NzExtendedMark, NzMarks, NzSliderHandler, NzSliderShowTooltip, NzSliderValue } from './typings';\nexport declare class NzSliderComponent implements ControlValueAccessor, OnInit, OnChanges, OnDestroy {\n    private sliderService;\n    private cdr;\n    private platform;\n    private directionality;\n    static ngAcceptInputType_nzDisabled: BooleanInput;\n    static ngAcceptInputType_nzDots: BooleanInput;\n    static ngAcceptInputType_nzIncluded: BooleanInput;\n    static ngAcceptInputType_nzRange: BooleanInput;\n    static ngAcceptInputType_nzVertical: BooleanInput;\n    static ngAcceptInputType_nzMax: NumberInput;\n    static ngAcceptInputType_nzMin: NumberInput;\n    static ngAcceptInputType_nzStep: NumberInput;\n    static ngAcceptInputType_nzReverse: BooleanInput;\n    slider: ElementRef<HTMLDivElement>;\n    handlerComponents: QueryList<NzSliderHandleComponent>;\n    nzDisabled: boolean;\n    nzDots: boolean;\n    nzIncluded: boolean;\n    nzRange: boolean;\n    nzVertical: boolean;\n    nzReverse: boolean;\n    nzDefaultValue?: NzSliderValue;\n    nzMarks: NzMarks | null;\n    nzMax: number;\n    nzMin: number;\n    nzStep: number;\n    nzTooltipVisible: NzSliderShowTooltip;\n    nzTooltipPlacement: string;\n    nzTipFormatter?: null | ((value: number) => string);\n    readonly nzOnAfterChange: EventEmitter<NzSliderValue>;\n    value: NzSliderValue | null;\n    cacheSliderStart: number | null;\n    cacheSliderLength: number | null;\n    activeValueIndex: number | undefined;\n    track: {\n        offset: null | number;\n        length: null | number;\n    };\n    handles: NzSliderHandler[];\n    marksArray: NzExtendedMark[] | null;\n    bounds: {\n        lower: NzSliderValue | null;\n        upper: NzSliderValue | null;\n    };\n    dir: Direction;\n    private dragStart$?;\n    private dragMove$?;\n    private dragEnd$?;\n    private dragStart_?;\n    private dragMove_?;\n    private dragEnd_?;\n    private destroy$;\n    constructor(sliderService: NzSliderService, cdr: ChangeDetectorRef, platform: Platform, directionality: Directionality);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    writeValue(val: NzSliderValue | null): void;\n    onValueChange(_value: NzSliderValue): void;\n    onTouched(): void;\n    registerOnChange(fn: (value: NzSliderValue) => void): void;\n    registerOnTouched(fn: () => void): void;\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * Event handler is only triggered when a slider handler is focused.\n     */\n    onKeyDown(e: KeyboardEvent): void;\n    onHandleFocusIn(index: number): void;\n    private setValue;\n    private getValue;\n    /**\n     * Clone & sort current value and convert them to offsets, then return the new one.\n     */\n    private getValueToOffset;\n    /**\n     * Find the closest value to be activated.\n     */\n    private setActiveValueIndex;\n    private setActiveValue;\n    /**\n     * Update track and handles' position and length.\n     */\n    private updateTrackAndHandles;\n    private onDragStart;\n    private onDragMove;\n    private getLogicalValue;\n    private onDragEnd;\n    /**\n     * Create user interactions handles.\n     */\n    private bindDraggingHandlers;\n    private subscribeDrag;\n    private unsubscribeDrag;\n    private toggleDragMoving;\n    private toggleDragDisabled;\n    private findClosestValue;\n    private valueToOffset;\n    private getSliderStartPosition;\n    private getSliderLength;\n    /**\n     * Cache DOM layout/reflow operations for performance (may not necessary?)\n     */\n    private cacheSliderProperty;\n    private formatValue;\n    /**\n     * Show one handle's tooltip and hide others'.\n     */\n    private showHandleTooltip;\n    private hideAllHandleTooltip;\n    private generateMarkItems;\n}\n"]}