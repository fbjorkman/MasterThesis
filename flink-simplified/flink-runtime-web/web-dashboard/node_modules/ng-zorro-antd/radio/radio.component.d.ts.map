{"version":3,"file":"radio.component.d.ts","sources":["radio.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { AfterViewInit, ChangeDetectorRef, ElementRef, OnDestroy, OnInit } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { BooleanInput, NzSafeAny, OnChangeType, OnTouchedType } from 'ng-zorro-antd/core/types';\nimport { NzRadioButtonDirective } from './radio-button.directive';\nimport { NzRadioService } from './radio.service';\nexport declare class NzRadioComponent implements ControlValueAccessor, AfterViewInit, OnDestroy, OnInit {\n    private elementRef;\n    private cdr;\n    private focusMonitor;\n    private directionality;\n    private nzRadioService;\n    private nzRadioButtonDirective;\n    static ngAcceptInputType_nzDisabled: BooleanInput;\n    static ngAcceptInputType_nzAutoFocus: BooleanInput;\n    private isNgModel;\n    private destroy$;\n    isChecked: boolean;\n    name: string | null;\n    isRadioButton: boolean;\n    onChange: OnChangeType;\n    onTouched: OnTouchedType;\n    inputElement?: ElementRef;\n    nzValue: NzSafeAny | null;\n    nzDisabled: boolean;\n    nzAutoFocus: boolean;\n    dir: Direction;\n    onHostClick(event: MouseEvent): void;\n    focus(): void;\n    blur(): void;\n    constructor(elementRef: ElementRef, cdr: ChangeDetectorRef, focusMonitor: FocusMonitor, directionality: Directionality, nzRadioService: NzRadioService, nzRadioButtonDirective: NzRadioButtonDirective);\n    setDisabledState(disabled: boolean): void;\n    writeValue(value: boolean): void;\n    registerOnChange(fn: OnChangeType): void;\n    registerOnTouched(fn: OnTouchedType): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n}\n"]}