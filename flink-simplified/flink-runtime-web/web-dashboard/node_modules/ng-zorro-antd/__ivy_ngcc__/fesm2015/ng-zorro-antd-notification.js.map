{"version":3,"file":"ng-zorro-antd-notification.js","sources":["../../components/notification/notification.component.ts","../../components/notification/notification-container.component.ts","../../components/notification/notification.service.module.ts","../../components/notification/notification.module.ts","../../components/notification/typings.ts","../../components/notification/notification.service.ts","../../components/notification/public-api.ts","../../components/notification/ng-zorro-antd-notification.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAkFa,uBAAwB,SAAQ,aAAa;AAAG,IAM3D,YAAY,GAAsB;AACpC,QAAI,KAAK,CAAC,GAAG,CAAC,CAAC;AACf,QAJqB,cAAS,GAAG,IAAI,YAAY,EAAuC,CAAC;AACzF,KAGG;AACH,IACE,WAAW;AAAK,QACd,KAAK,CAAC,WAAW,EAAE,CAAC;AACxB,QAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;AACrC,KAAG;AACH,IACE,OAAO,CAAC,KAAiB;AAAI,QAC3B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACtC,KAAG;AACH,IACE,KAAK;AAAK,QACR,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,KAAG;AACH,IACE,IAAI,KAAK;AAAK,QACZ,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,OAAO,EAAE;AACzC,YAAM,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,IAAI,IAAI,CAAC,SAAS,KAAK,YAAY,EAAE;AAC3E,gBAAQ,OAAO,WAAW,CAAC;AAC3B,aAAO;AAAC,iBAAK;AACb,gBAAQ,OAAO,YAAY,CAAC;AAC5B,aAAO;AACP,SAAK;AAAC,aAAK;AACX,YAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;AACjC,SAAK;AACL,KAAG;AACH;mDA5GC,SAAS,SAAC,kBACT,aAAa,EAAE,iBAAiB,CAAC,IAAI,kBACrC,QAAQ,EAAE,iBAAiB;YAC3B,QAAQ,EAAE,gBAAgB,kBAC1B,mBAAmB,EAAE,KAAK,kBAC1B,UAAU,EAAE,CAAC,kBAAkB,CAAC,kBAChC,QAAQ,EAAE;;;;4BAkET,cACF;;;;;;;;;;;;;;;;;;kQACI;AAAC;AAAiD,YAjF9C,iBAAiB;AAAG;AAAG;AAA2C,uBAkFxE,KAAK;AAAK,wBACV,KAAK;AAAK,oBACV,KAAK;AAAK,wBACV,MAAM;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;AC1FhB;AACA;AACA;AACA;AAaA,MAAM,qBAAqB,GAAG,cAAc,CAAC;AAE7C,MAAM,8BAA8B,GAAiC;AACrE,IAAE,KAAK,EAAE,MAAM;AACf,IAAE,QAAQ,EAAE,MAAM;AAClB,IAAE,WAAW,EAAE,UAAU;AACzB,IAAE,UAAU,EAAE,IAAI;AAClB,IAAE,UAAU,EAAE,CAAC;AACf,IAAE,cAAc,EAAE,IAAI;AACtB,IAAE,SAAS,EAAE,IAAI;AACjB,IAAE,WAAW,EAAE,KAAK;AACpB,CAAC,CAAC;AACF,MA8Da,gCAAiC,SAAQ,sBAAsB;AAC5E,IAUE,YAAY,GAAsB,EAAE,eAAgC;AACtE,QAAI,KAAK,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;AAChC,QAZE,QAAG,GAAc,KAAK,CAAC;AACzB,QAGE,cAAS,GAAwC,EAAE,CAAC;AACtD,QAAE,qBAAgB,GAAwC,EAAE,CAAC;AAC7D,QAAE,sBAAiB,GAAwC,EAAE,CAAC;AAC9D,QAAE,wBAAmB,GAAwC,EAAE,CAAC;AAChE,QAAE,yBAAoB,GAAwC,EAAE,CAAC;AACjE,QAGI,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;AACrF,QAAI,IAAI,CAAC,GAAG,GAAG,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,WAAW,KAAI,KAAK,CAAC;AAC5C,KAAG;AACH,IACE,MAAM,CAAC,YAAgC;AAAI,QACzC,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;AAC7C,QAAI,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;AACnC,QAAI,MAAM,uBAAuB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CACjD,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,KAAK,KAAM,YAAY,CAAC,OAA+C,CAAC,KAAK,CACjG,CAAC;AACN,QAAI,IAAI,GAAG,IAAI,uBAAuB,EAAE;AACxC,YAAM,IAAI,CAAC,mBAAmB,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAC;AAC9D,SAAK;AAAC,aAAK;AACX,YAAM,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;AAC3D,gBAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACjD,aAAO;AACP,YAAM,IAAI,CAAC,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACjD,SAAK;AACL,QACI,IAAI,CAAC,cAAc,EAAE,CAAC;AAC1B,QACI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,IACY,QAAQ,CAAC,QAA4B;AAAI,QACjD,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC3D,QAAI,QAAQ,CAAC,OAAO,GAAG,IAAI,OAAO,EAAW,CAAC;AAC9C,QAAI,QAAQ,CAAC,OAAO,GAAG,IAAI,OAAO,EAAc,CAAC;AACjD,QAAI,OAAO,QAAwC,CAAC;AACpD,KAAG;AACH,IACY,qBAAqB;AAAK,QAClC,IAAI,CAAC,eAAe;AACxB,aAAO,gCAAgC,CAAC,qBAAqB,CAAC;AAC9D,aAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrC,aAAO,SAAS,CAAC;AACjB,YAAQ,IAAI,CAAC,YAAY,EAAE,CAAC;AAC5B,YAAQ,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;AACzF,YAAQ,IAAI,MAAM,EAAE;AACpB,gBAAU,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC;AACzC,gBAAU,IAAI,CAAC,GAAG,GAAG,WAAW,IAAI,IAAI,CAAC,GAAG,CAAC;AAC7C,aAAS;AACT,SAAO,CAAC,CAAC;AACT,KAAG;AACH,IACY,YAAY;AAAK,QACzB,IAAI,CAAC,MAAM,iDACN,8BAA8B,GAC9B,IAAI,CAAC,MAAM,GACX,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,CACrE,CAAC;AACN,QACI,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,KAAM,CAAC,CAAC;AAC9C,QAAI,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,QAAS,CAAC,CAAC;AACpD,QACI,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;AAC5B,KAAG;AACH,IACU,mBAAmB,CAAC,GAAuB,EAAE,IAAwB;AAAI,QAC/E,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AAC3B,QAAI,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAC/B,QAAI,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AACjC,QAAI,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACzB,QAAI,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAC/B,KAAG;AACH,IACY,cAAc;AAAK,QAC3B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC;AAC5F,QAAI,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,WAAW,KAAK,UAAU,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;AACxH,QAAI,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,WAAW,KAAK,YAAY,CAAC,CAAC;AAClG,QAAI,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,WAAW,KAAK,aAAa,CAAC,CAAC;AACpG,QACI,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;AAC7B,KAAG;AACH,IACY,YAAY,CAAC,OAAmC;AAAI,QAC5D,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,cAAc,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;AAC/E,QAAI,uBAAS,UAAU,EAAE,SAAS,EAAE,cAAc,EAAE,WAAW,IAAK,OAAO,EAAG;AAC9E,KAAG;AACH;4DAzJC,SAAS,SAAC,kBACT,eAAe,EAAE,uBAAuB,CAAC,MAAM,kBAC/C,aAAa,EAAE,iBAAiB,CAAC,IAAI,kBACrC,QAAQ,EAAE;CAA2B,kBACrC,QAAQ,EAAE,yBAAyB,kBACnC,mBAAmB,EAAE,KAAK,kBAC1B,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;aAqDT,cACF;;;;;;;;;;;;;wGACI;AAAC;AAA0D,YApF9B,iBAAiB;AAAI,YAI1B,eAAe;AAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oHAAE;AAAC;ACVlD;AACA;AACA;AACA;AACA,MAIa,2BAA2B;AAAG;uDAD1C,QAAQ;;;;;0BACP;AAAC;ACRH;AACA;AACA;AACA;AACA,MAkBa,oBAAoB;AAAG;gDALnC,QAAQ,SAAC,kBACR,OAAO,EAAE,CAAC,UAAU,EAAE;CAAY,EAAE,aAAa,EAAE,YAAY,EAAE,cAAc,EAAE,2BAA2B,CAAC,kBAC7G;OAAY,EAAE,CAAC,uBAAuB,EAAE,gCAAgC,CAAC,kBACzE,eAAe,EAAE,CAAC,gCAAgC,CAAC,cACpD;;;;;;;;;sWACI;AAAC;ACtBN;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AAYA,IAAI,cAAc,GAAG,CAAC,CAAC;AACvB,MAIa,qBAAsB,SAAQ,WAAW;AACtD,IAGE,YAAY,kBAAsC,EAAE,OAAgB,EAAE,QAAkB;AAC1F,QAAI,KAAK,CAAC,kBAAkB,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;AACjD,QAJY,oBAAe,GAAG,eAAe,CAAC;AAC9C,KAGG;AACH,IACE,OAAO,CAAC,KAAa,EAAE,OAAe,EAAE,OAAmC;AAAI,QAC7E,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,OAAO,CAAC,CAAC;AAC7E,KAAG;AACH,IACE,KAAK,CAAC,KAAa,EAAE,OAAe,EAAE,OAAmC;AAAI,QAC3E,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,OAAO,CAAC,CAAC;AAC3E,KAAG;AACH,IACE,IAAI,CAAC,KAAa,EAAE,OAAe,EAAE,OAAmC;AAAI,QAC1E,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,OAAO,CAAC,CAAC;AAC1E,KAAG;AACH,IACE,OAAO,CAAC,KAAa,EAAE,OAAe,EAAE,OAAmC;AAAI,QAC7E,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,OAAO,CAAC,CAAC;AAC7E,KAAG;AACH,IACE,KAAK,CAAC,KAAa,EAAE,OAAe,EAAE,OAAmC;AAAI,QAC3E,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,OAAO,CAAC,CAAC;AAC3E,KAAG;AACH,IACE,MAAM,CACJ,IAAiE,EACjE,KAAa,EACb,OAAe,EACf,OAAmC;AACpC,QACC,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,OAAO,CAAC,CAAC;AAClE,KAAG;AACH,IACE,QAAQ,CAAC,QAAyB,EAAE,OAAmC;AAAI,QACzE,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;AACtD,KAAG;AACH,IACY,iBAAiB;AAAK,QAC9B,OAAO,GAAG,IAAI,CAAC,eAAe,IAAI,cAAc,EAAE,EAAE,CAAC;AACzD,KAAG;AACH,IACU,cAAc,CAAC,OAA2B,EAAE,OAAmC;AAAI,QACzF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,gCAAgC,CAAC,CAAC;AAC1E,QACI,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,iCACvB,OAAO,GACP;AACT,YAAQ,SAAS,EAAE,IAAI,IAAI,EAAE;AAC7B,YAAQ,SAAS,EAAE,IAAI,CAAC,iBAAiB,EAAE;AAC3C,YAAQ,OAAO;AACf,SAAO,EACD,CAAC;AACP,KAAG;AACH;mOAAC;AACD,+SA1DK;AAAC;EAHL,UAAU,SAAC,rBAGyC,YAZ5C,kBAAkB;KAUzB,UAAU,EAAE,jBAViB,YAHtB,OAAO;qBAayB,rBAbrB,YACC,QAAQ;AAAG;SAa/B;;;;;wIAbiC;AAAC;ACNnC;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;AACkH","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectorRef, Component, EventEmitter, Input, OnDestroy, Output, ViewEncapsulation } from '@angular/core';\n\nimport { notificationMotion } from 'ng-zorro-antd/core/animation';\nimport { NzMNComponent } from 'ng-zorro-antd/message';\n\nimport { NzNotificationData } from './typings';\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'nz-notification',\n  exportAs: 'nzNotification',\n  preserveWhitespaces: false,\n  animations: [notificationMotion],\n  template: `\n    <div\n      class=\"ant-notification-notice ant-notification-notice-closable\"\n      [ngStyle]=\"instance.options?.nzStyle || null\"\n      [ngClass]=\"instance.options?.nzClass || ''\"\n      [@notificationMotion]=\"state\"\n      (@notificationMotion.done)=\"animationStateChanged.next($event)\"\n      (click)=\"onClick($event)\"\n      (mouseenter)=\"onEnter()\"\n      (mouseleave)=\"onLeave()\"\n    >\n      <div *ngIf=\"!instance.template\" class=\"ant-notification-notice-content\">\n        <div\n          class=\"ant-notification-notice-content\"\n          [ngClass]=\"{ 'ant-notification-notice-with-icon': instance.type !== 'blank' }\"\n        >\n          <div [class.ant-notification-notice-with-icon]=\"instance.type !== 'blank'\">\n            <ng-container [ngSwitch]=\"instance.type\">\n              <i\n                *ngSwitchCase=\"'success'\"\n                nz-icon\n                nzType=\"check-circle\"\n                class=\"ant-notification-notice-icon ant-notification-notice-icon-success\"\n              ></i>\n              <i\n                *ngSwitchCase=\"'info'\"\n                nz-icon\n                nzType=\"info-circle\"\n                class=\"ant-notification-notice-icon ant-notification-notice-icon-info\"\n              ></i>\n              <i\n                *ngSwitchCase=\"'warning'\"\n                nz-icon\n                nzType=\"exclamation-circle\"\n                class=\"ant-notification-notice-icon ant-notification-notice-icon-warning\"\n              ></i>\n              <i\n                *ngSwitchCase=\"'error'\"\n                nz-icon\n                nzType=\"close-circle\"\n                class=\"ant-notification-notice-icon ant-notification-notice-icon-error\"\n              ></i>\n            </ng-container>\n            <div class=\"ant-notification-notice-message\" [innerHTML]=\"instance.title\"></div>\n            <div class=\"ant-notification-notice-description\" [innerHTML]=\"instance.content\"></div>\n          </div>\n        </div>\n      </div>\n      <ng-template\n        [ngIf]=\"instance.template\"\n        [ngTemplateOutlet]=\"instance.template!\"\n        [ngTemplateOutletContext]=\"{ $implicit: this, data: instance.options?.nzData }\"\n      ></ng-template>\n      <a tabindex=\"0\" class=\"ant-notification-notice-close\" (click)=\"close()\">\n        <span class=\"ant-notification-notice-close-x\">\n          <ng-container *ngIf=\"instance.options?.nzCloseIcon; else iconTpl\">\n            <ng-container *nzStringTemplateOutlet=\"instance.options?.nzCloseIcon; let closeIcon\">\n              <i nz-icon [nzType]=\"closeIcon\"></i>\n            </ng-container>\n          </ng-container>\n          <ng-template #iconTpl>\n            <i nz-icon nzType=\"close\" class=\"ant-notification-close-icon\"></i>\n          </ng-template>\n        </span>\n      </a>\n    </div>\n  `\n})\nexport class NzNotificationComponent extends NzMNComponent implements OnDestroy {\n  @Input() instance!: Required<NzNotificationData>;\n  @Input() placement?: string;\n  @Input() index!: number;\n  @Output() readonly destroyed = new EventEmitter<{ id: string; userAction: boolean }>();\n\n  constructor(cdr: ChangeDetectorRef) {\n    super(cdr);\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this.instance.onClick.complete();\n  }\n\n  onClick(event: MouseEvent): void {\n    this.instance.onClick.next(event);\n  }\n\n  close(): void {\n    this.destroy(true);\n  }\n\n  get state(): string | undefined {\n    if (this.instance.state === 'enter') {\n      if (this.placement === 'topLeft' || this.placement === 'bottomLeft') {\n        return 'enterLeft';\n      } else {\n        return 'enterRight';\n      }\n    } else {\n      return this.instance.state;\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Direction } from '@angular/cdk/bidi';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewEncapsulation } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NotificationConfig, NzConfigService } from 'ng-zorro-antd/core/config';\nimport { toCssPixel } from 'ng-zorro-antd/core/util';\nimport { NzMNContainerComponent } from 'ng-zorro-antd/message';\n\nimport { NzNotificationData, NzNotificationDataOptions } from './typings';\n\nconst NZ_CONFIG_MODULE_NAME = 'notification';\n\nconst NZ_NOTIFICATION_DEFAULT_CONFIG: Required<NotificationConfig> = {\n  nzTop: '24px',\n  nzBottom: '24px',\n  nzPlacement: 'topRight',\n  nzDuration: 4500,\n  nzMaxStack: 7,\n  nzPauseOnHover: true,\n  nzAnimate: true,\n  nzDirection: 'ltr'\n};\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'nz-notification-container',\n  exportAs: 'nzNotificationContainer',\n  preserveWhitespaces: false,\n  template: `\n    <div\n      class=\"ant-notification ant-notification-topLeft\"\n      [class.ant-notification-rtl]=\"dir === 'rtl'\"\n      [style.top]=\"top\"\n      [style.left]=\"'0px'\"\n    >\n      <nz-notification\n        *ngFor=\"let instance of topLeftInstances\"\n        [instance]=\"instance\"\n        [placement]=\"config.nzPlacement\"\n        (destroyed)=\"remove($event.id, $event.userAction)\"\n      ></nz-notification>\n    </div>\n    <div\n      class=\"ant-notification ant-notification-topRight\"\n      [class.ant-notification-rtl]=\"dir === 'rtl'\"\n      [style.top]=\"top\"\n      [style.right]=\"'0px'\"\n    >\n      <nz-notification\n        *ngFor=\"let instance of topRightInstances\"\n        [instance]=\"instance\"\n        [placement]=\"config.nzPlacement\"\n        (destroyed)=\"remove($event.id, $event.userAction)\"\n      ></nz-notification>\n    </div>\n    <div\n      class=\"ant-notification ant-notification-bottomLeft\"\n      [class.ant-notification-rtl]=\"dir === 'rtl'\"\n      [style.bottom]=\"bottom\"\n      [style.left]=\"'0px'\"\n    >\n      <nz-notification\n        *ngFor=\"let instance of bottomLeftInstances\"\n        [instance]=\"instance\"\n        [placement]=\"config.nzPlacement\"\n        (destroyed)=\"remove($event.id, $event.userAction)\"\n      ></nz-notification>\n    </div>\n    <div\n      class=\"ant-notification ant-notification-bottomRight\"\n      [class.ant-notification-rtl]=\"dir === 'rtl'\"\n      [style.bottom]=\"bottom\"\n      [style.right]=\"'0px'\"\n    >\n      <nz-notification\n        *ngFor=\"let instance of bottomRightInstances\"\n        [instance]=\"instance\"\n        [placement]=\"config.nzPlacement\"\n        (destroyed)=\"remove($event.id, $event.userAction)\"\n      ></nz-notification>\n    </div>\n  `\n})\nexport class NzNotificationContainerComponent extends NzMNContainerComponent {\n  dir: Direction = 'ltr';\n  bottom?: string | null;\n  top?: string | null;\n  config!: Required<NotificationConfig>; // initialized by parent class constructor\n  instances: Array<Required<NzNotificationData>> = [];\n  topLeftInstances: Array<Required<NzNotificationData>> = [];\n  topRightInstances: Array<Required<NzNotificationData>> = [];\n  bottomLeftInstances: Array<Required<NzNotificationData>> = [];\n  bottomRightInstances: Array<Required<NzNotificationData>> = [];\n\n  constructor(cdr: ChangeDetectorRef, nzConfigService: NzConfigService) {\n    super(cdr, nzConfigService);\n    const config = this.nzConfigService.getConfigForComponent(NZ_CONFIG_MODULE_NAME);\n    this.dir = config?.nzDirection || 'ltr';\n  }\n\n  create(notification: NzNotificationData): Required<NzNotificationData> {\n    const noti = this.onCreate(notification);\n    const key = noti.options.nzKey;\n    const notificationWithSameKey = this.instances.find(\n      msg => msg.options.nzKey === (notification.options as Required<NzNotificationDataOptions>).nzKey\n    );\n    if (key && notificationWithSameKey) {\n      this.replaceNotification(notificationWithSameKey, noti);\n    } else {\n      if (this.instances.length >= this.config.nzMaxStack) {\n        this.instances = this.instances.slice(1);\n      }\n      this.instances = [...this.instances, noti];\n    }\n\n    this.readyInstances();\n\n    return noti;\n  }\n\n  protected onCreate(instance: NzNotificationData): Required<NzNotificationData> {\n    instance.options = this.mergeOptions(instance.options);\n    instance.onClose = new Subject<boolean>();\n    instance.onClick = new Subject<MouseEvent>();\n    return instance as Required<NzNotificationData>;\n  }\n\n  protected subscribeConfigChange(): void {\n    this.nzConfigService\n      .getConfigChangeEventForComponent(NZ_CONFIG_MODULE_NAME)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.updateConfig();\n        const config = this.nzConfigService.getConfigForComponent(NZ_CONFIG_MODULE_NAME);\n        if (config) {\n          const { nzDirection } = config;\n          this.dir = nzDirection || this.dir;\n        }\n      });\n  }\n\n  protected updateConfig(): void {\n    this.config = {\n      ...NZ_NOTIFICATION_DEFAULT_CONFIG,\n      ...this.config,\n      ...this.nzConfigService.getConfigForComponent(NZ_CONFIG_MODULE_NAME)\n    };\n\n    this.top = toCssPixel(this.config.nzTop!);\n    this.bottom = toCssPixel(this.config.nzBottom!);\n\n    this.cdr.markForCheck();\n  }\n\n  private replaceNotification(old: NzNotificationData, _new: NzNotificationData): void {\n    old.title = _new.title;\n    old.content = _new.content;\n    old.template = _new.template;\n    old.type = _new.type;\n    old.options = _new.options;\n  }\n\n  protected readyInstances(): void {\n    this.topLeftInstances = this.instances.filter(m => m.options.nzPlacement === 'topLeft');\n    this.topRightInstances = this.instances.filter(m => m.options.nzPlacement === 'topRight' || !m.options.nzPlacement);\n    this.bottomLeftInstances = this.instances.filter(m => m.options.nzPlacement === 'bottomLeft');\n    this.bottomRightInstances = this.instances.filter(m => m.options.nzPlacement === 'bottomRight');\n\n    this.cdr.detectChanges();\n  }\n\n  protected mergeOptions(options?: NzNotificationDataOptions): NzNotificationDataOptions {\n    const { nzDuration, nzAnimate, nzPauseOnHover, nzPlacement } = this.config;\n    return { nzDuration, nzAnimate, nzPauseOnHover, nzPlacement, ...options };\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NgModule } from '@angular/core';\n\n@NgModule()\nexport class NzNotificationServiceModule {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\n\nimport { NzNotificationContainerComponent } from './notification-container.component';\nimport { NzNotificationComponent } from './notification.component';\nimport { NzNotificationServiceModule } from './notification.service.module';\n\n@NgModule({\n  imports: [BidiModule, CommonModule, OverlayModule, NzIconModule, NzOutletModule, NzNotificationServiceModule],\n  declarations: [NzNotificationComponent, NzNotificationContainerComponent],\n  entryComponents: [NzNotificationContainerComponent]\n})\nexport class NzNotificationModule {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { TemplateRef } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { NgClassInterface, NgStyleInterface } from 'ng-zorro-antd/core/types';\n\nexport type NzNotificationPlacement = 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\nexport interface NzNotificationDataOptions<T = {}> {\n  nzKey?: string;\n  nzStyle?: NgStyleInterface;\n  nzClass?: NgClassInterface | string;\n  nzCloseIcon?: TemplateRef<void> | string;\n  nzPlacement?: NzNotificationPlacement;\n  nzData?: T;\n  nzDuration?: number;\n  nzAnimate?: boolean;\n  nzPauseOnHover?: boolean;\n}\n\nexport interface NzNotificationData {\n  content?: string | TemplateRef<void>;\n  createdAt?: Date;\n  messageId?: string;\n  options?: NzNotificationDataOptions;\n  state?: 'enter' | 'leave';\n  template?: TemplateRef<{}>;\n  title?: string;\n  type?: 'success' | 'info' | 'warning' | 'error' | 'blank' | string;\n\n  // observables exposed to users\n  onClose?: Subject<boolean>;\n  onClick?: Subject<MouseEvent>;\n}\n\nexport type NzNotificationRef = Pick<Required<NzNotificationData>, 'onClose' | 'onClick' | 'messageId'>;\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Overlay } from '@angular/cdk/overlay';\nimport { Injectable, Injector, TemplateRef } from '@angular/core';\n\nimport { NzSingletonService } from 'ng-zorro-antd/core/services';\nimport { NzMNService } from 'ng-zorro-antd/message';\n\nimport { NzNotificationContainerComponent } from './notification-container.component';\nimport { NzNotificationServiceModule } from './notification.service.module';\nimport { NzNotificationData, NzNotificationDataOptions, NzNotificationRef } from './typings';\n\nlet notificationId = 0;\n\n@Injectable({\n  providedIn: NzNotificationServiceModule\n})\nexport class NzNotificationService extends NzMNService {\n  protected container!: NzNotificationContainerComponent;\n  protected componentPrefix = 'notification-';\n\n  constructor(nzSingletonService: NzSingletonService, overlay: Overlay, injector: Injector) {\n    super(nzSingletonService, overlay, injector);\n  }\n\n  success(title: string, content: string, options?: NzNotificationDataOptions): NzNotificationRef {\n    return this.createInstance({ type: 'success', title, content }, options);\n  }\n\n  error(title: string, content: string, options?: NzNotificationDataOptions): NzNotificationRef {\n    return this.createInstance({ type: 'error', title, content }, options);\n  }\n\n  info(title: string, content: string, options?: NzNotificationDataOptions): NzNotificationRef {\n    return this.createInstance({ type: 'info', title, content }, options);\n  }\n\n  warning(title: string, content: string, options?: NzNotificationDataOptions): NzNotificationRef {\n    return this.createInstance({ type: 'warning', title, content }, options);\n  }\n\n  blank(title: string, content: string, options?: NzNotificationDataOptions): NzNotificationRef {\n    return this.createInstance({ type: 'blank', title, content }, options);\n  }\n\n  create(\n    type: 'success' | 'info' | 'warning' | 'error' | 'blank' | string,\n    title: string,\n    content: string,\n    options?: NzNotificationDataOptions\n  ): NzNotificationRef {\n    return this.createInstance({ type, title, content }, options);\n  }\n\n  template(template: TemplateRef<{}>, options?: NzNotificationDataOptions): NzNotificationRef {\n    return this.createInstance({ template }, options);\n  }\n\n  protected generateMessageId(): string {\n    return `${this.componentPrefix}-${notificationId++}`;\n  }\n\n  private createInstance(message: NzNotificationData, options?: NzNotificationDataOptions): NzNotificationRef {\n    this.container = this.withContainer(NzNotificationContainerComponent);\n\n    return this.container.create({\n      ...message,\n      ...{\n        createdAt: new Date(),\n        messageId: this.generateMessageId(),\n        options\n      }\n    });\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport * from './notification.component';\nexport * from './notification.module';\nexport * from './typings';\nexport * from './notification.service';\nexport * from './notification.service.module';\nexport * from './notification-container.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}