import * as i0 from '@angular/core';
import { Injectable, EventEmitter, Directive, ElementRef, Output, Input, NgModule } from '@angular/core';
import { __decorate } from 'tslib';
import { InputBoolean } from 'ng-zorro-antd/core/util';
import { coerceElement } from '@angular/cdk/coercion';
import { Observable, Subject } from 'rxjs';

/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
/**
 * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.
 */
import * as ɵngcc0 from '@angular/core';
class NzResizeObserverFactory {
    create(callback) {
        return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);
    }
}
NzResizeObserverFactory.ɵfac = function NzResizeObserverFactory_Factory(t) { return new (t || NzResizeObserverFactory)(); };
NzResizeObserverFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function NzResizeObserverFactory_Factory() { return new NzResizeObserverFactory(); }, token: NzResizeObserverFactory, providedIn: "root" });
/** An injectable service that allows watching elements for changes to their content. */
class NzResizeObserver {
    constructor(nzResizeObserverFactory) {
        this.nzResizeObserverFactory = nzResizeObserverFactory;
        /** Keeps track of the existing ResizeObservers so they can be reused. */
        this.observedElements = new Map();
    }
    ngOnDestroy() {
        this.observedElements.forEach((_, element) => this.cleanupObserver(element));
    }
    observe(elementOrRef) {
        const element = coerceElement(elementOrRef);
        return new Observable((observer) => {
            const stream = this.observeElement(element);
            const subscription = stream.subscribe(observer);
            return () => {
                subscription.unsubscribe();
                this.unobserveElement(element);
            };
        });
    }
    /**
     * Observes the given element by using the existing ResizeObserver if available, or creating a
     * new one if not.
     */
    observeElement(element) {
        if (!this.observedElements.has(element)) {
            const stream = new Subject();
            const observer = this.nzResizeObserverFactory.create((mutations) => stream.next(mutations));
            if (observer) {
                observer.observe(element);
            }
            this.observedElements.set(element, { observer, stream, count: 1 });
        }
        else {
            this.observedElements.get(element).count++;
        }
        return this.observedElements.get(element).stream;
    }
    /**
     * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is
     * observing this element.
     */
    unobserveElement(element) {
        if (this.observedElements.has(element)) {
            this.observedElements.get(element).count--;
            if (!this.observedElements.get(element).count) {
                this.cleanupObserver(element);
            }
        }
    }
    /** Clean up the underlying ResizeObserver for the specified element. */
    cleanupObserver(element) {
        if (this.observedElements.has(element)) {
            const { observer, stream } = this.observedElements.get(element);
            if (observer) {
                observer.disconnect();
            }
            stream.complete();
            this.observedElements.delete(element);
        }
    }
}
NzResizeObserver.ɵfac = function NzResizeObserver_Factory(t) { return new (t || NzResizeObserver)(ɵngcc0.ɵɵinject(NzResizeObserverFactory)); };
NzResizeObserver.ɵprov = i0.ɵɵdefineInjectable({ factory: function NzResizeObserver_Factory() { return new NzResizeObserver(i0.ɵɵinject(NzResizeObserverFactory)); }, token: NzResizeObserver, providedIn: "root" });
NzResizeObserver.ctorParameters = () => [
    { type: NzResizeObserverFactory }
];

/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
class NzResizeObserverDirective {
    constructor(nzResizeObserver, elementRef) {
        this.nzResizeObserver = nzResizeObserver;
        this.elementRef = elementRef;
        this.nzResizeObserve = new EventEmitter();
        this.nzResizeObserverDisabled = false;
        this.currentSubscription = null;
    }
    subscribe() {
        this.unsubscribe();
        this.currentSubscription = this.nzResizeObserver.observe(this.elementRef).subscribe(this.nzResizeObserve);
    }
    unsubscribe() {
        var _a;
        (_a = this.currentSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
    ngAfterContentInit() {
        if (!this.currentSubscription && !this.nzResizeObserverDisabled) {
            this.subscribe();
        }
    }
    ngOnDestroy() {
        this.unsubscribe();
    }
    ngOnChanges(changes) {
        const { nzResizeObserve } = changes;
        if (nzResizeObserve) {
            if (this.nzResizeObserverDisabled) {
                this.unsubscribe();
            }
            else {
                this.subscribe();
            }
        }
    }
}
NzResizeObserverDirective.ɵfac = function NzResizeObserverDirective_Factory(t) { return new (t || NzResizeObserverDirective)(ɵngcc0.ɵɵdirectiveInject(NzResizeObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
NzResizeObserverDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NzResizeObserverDirective, selectors: [["", "nzResizeObserver", ""]], inputs: { nzResizeObserverDisabled: "nzResizeObserverDisabled" }, outputs: { nzResizeObserve: "nzResizeObserve" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
NzResizeObserverDirective.ctorParameters = () => [
    { type: NzResizeObserver },
    { type: ElementRef }
];
NzResizeObserverDirective.propDecorators = {
    nzResizeObserve: [{ type: Output }],
    nzResizeObserverDisabled: [{ type: Input }]
};
__decorate([
    InputBoolean()
], NzResizeObserverDirective.prototype, "nzResizeObserverDisabled", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzResizeObserverFactory, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzResizeObserver, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: NzResizeObserverFactory }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzResizeObserverDirective, [{
        type: Directive,
        args: [{
                selector: '[nzResizeObserver]'
            }]
    }], function () { return [{ type: NzResizeObserver }, { type: ɵngcc0.ElementRef }]; }, { nzResizeObserve: [{
            type: Output
        }], nzResizeObserverDisabled: [{
            type: Input
        }] }); })();

/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
class NzResizeObserverModule {
}
NzResizeObserverModule.ɵfac = function NzResizeObserverModule_Factory(t) { return new (t || NzResizeObserverModule)(); };
NzResizeObserverModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NzResizeObserverModule });
NzResizeObserverModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [NzResizeObserverFactory] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzResizeObserverModule, [{
        type: NgModule,
        args: [{
                providers: [NzResizeObserverFactory],
                declarations: [NzResizeObserverDirective],
                exports: [NzResizeObserverDirective]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzResizeObserverModule, { declarations: [NzResizeObserverDirective], exports: [NzResizeObserverDirective] }); })();

/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NzResizeObserver, NzResizeObserverDirective, NzResizeObserverFactory, NzResizeObserverModule };

//# sourceMappingURL=ng-zorro-antd-cdk-resize-observer.js.map