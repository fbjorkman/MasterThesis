{"version":3,"file":"ng-zorro-antd-cdk-resize-observer.js","sources":["../../components/cdk/resize-observer/resize-observer.service.ts","../../components/cdk/resize-observer/resize-observer.directive.ts","../../components/cdk/resize-observer/resize-observer.module.ts","../../components/cdk/resize-observer/public-api.ts","../../components/cdk/resize-observer/ng-zorro-antd-cdk-resize-observer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { ElementRef, Injectable, OnDestroy } from '@angular/core';\nimport { Observable, Observer, Subject } from 'rxjs';\n\n/**\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n */\n@Injectable({ providedIn: 'root' })\nexport class NzResizeObserverFactory {\n  create(callback: ResizeObserverCallback): ResizeObserver | null {\n    return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\n  }\n}\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({ providedIn: 'root' })\nexport class NzResizeObserver implements OnDestroy {\n  /** Keeps track of the existing ResizeObservers so they can be reused. */\n  private observedElements = new Map<\n    Element,\n    {\n      observer: ResizeObserver | null;\n      stream: Subject<ResizeObserverEntry[]>;\n      count: number;\n    }\n  >();\n\n  constructor(private nzResizeObserverFactory: NzResizeObserverFactory) {}\n\n  ngOnDestroy(): void {\n    this.observedElements.forEach((_, element) => this.cleanupObserver(element));\n  }\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<ResizeObserverEntry[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<ResizeObserverEntry[]>) => {\n      const stream = this.observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this.unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing ResizeObserver if available, or creating a\n   * new one if not.\n   */\n  private observeElement(element: Element): Subject<ResizeObserverEntry[]> {\n    if (!this.observedElements.has(element)) {\n      const stream = new Subject<ResizeObserverEntry[]>();\n      const observer = this.nzResizeObserverFactory.create((mutations: ResizeObserverEntry[]) =>\n        stream.next(mutations)\n      );\n      if (observer) {\n        observer.observe(element);\n      }\n      this.observedElements.set(element, { observer, stream, count: 1 });\n    } else {\n      this.observedElements.get(element)!.count++;\n    }\n    return this.observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\n   * observing this element.\n   */\n  private unobserveElement(element: Element): void {\n    if (this.observedElements.has(element)) {\n      this.observedElements.get(element)!.count--;\n      if (!this.observedElements.get(element)!.count) {\n        this.cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying ResizeObserver for the specified element. */\n  private cleanupObserver(element: Element): void {\n    if (this.observedElements.has(element)) {\n      const { observer, stream } = this.observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this.observedElements.delete(element);\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { BooleanInput } from 'ng-zorro-antd/core/types';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\n\nimport { NzResizeObserver } from './resize-observer.service';\n\n@Directive({\n  selector: '[nzResizeObserver]'\n})\nexport class NzResizeObserverDirective implements AfterContentInit, OnDestroy, OnChanges {\n  static ngAcceptInputType_nzResizeObserverDisabled: BooleanInput;\n  @Output() readonly nzResizeObserve = new EventEmitter<ResizeObserverEntry[]>();\n  @Input() @InputBoolean() nzResizeObserverDisabled = false;\n  private currentSubscription: Subscription | null = null;\n\n  private subscribe(): void {\n    this.unsubscribe();\n    this.currentSubscription = this.nzResizeObserver.observe(this.elementRef).subscribe(this.nzResizeObserve);\n  }\n\n  private unsubscribe(): void {\n    this.currentSubscription?.unsubscribe();\n  }\n\n  constructor(private nzResizeObserver: NzResizeObserver, private elementRef: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit(): void {\n    if (!this.currentSubscription && !this.nzResizeObserverDisabled) {\n      this.subscribe();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { nzResizeObserve } = changes;\n    if (nzResizeObserve) {\n      if (this.nzResizeObserverDisabled) {\n        this.unsubscribe();\n      } else {\n        this.subscribe();\n      }\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NgModule } from '@angular/core';\n\nimport { NzResizeObserverDirective } from './resize-observer.directive';\nimport { NzResizeObserverFactory } from './resize-observer.service';\n\n@NgModule({\n  providers: [NzResizeObserverFactory],\n  declarations: [NzResizeObserverDirective],\n  exports: [NzResizeObserverDirective]\n})\nexport class NzResizeObserverModule {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport { NzResizeObserverModule } from './resize-observer.module';\nexport { NzResizeObserverDirective } from './resize-observer.directive';\nexport { NzResizeObserver, NzResizeObserverFactory } from './resize-observer.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}