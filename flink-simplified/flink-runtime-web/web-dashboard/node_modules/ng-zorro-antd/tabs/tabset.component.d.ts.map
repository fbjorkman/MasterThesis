{"version":3,"file":"tabset.component.d.ts","sources":["tabset.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n/** get some code from https://github.com/angular/material2 */\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { AfterContentChecked, AfterContentInit, ChangeDetectorRef, EventEmitter, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { NzConfigKey, NzConfigService } from 'ng-zorro-antd/core/config';\nimport { BooleanInput, NumberInput, NzSafeAny, NzSizeLDSType } from 'ng-zorro-antd/core/types';\nimport { NzAnimatedInterface, NzTabChangeEvent, NzTabPosition, NzTabPositionMode, NzTabsCanDeactivateFn, NzTabScrollEvent, NzTabType } from './interfaces';\nimport { NzTabNavBarComponent } from './tab-nav-bar.component';\nimport { NzTabComponent } from './tab.component';\nexport declare class NzTabSetComponent implements OnInit, AfterContentChecked, OnDestroy, AfterContentInit {\n    nzConfigService: NzConfigService;\n    private cdr;\n    private directionality;\n    private router;\n    readonly _nzModuleName: NzConfigKey;\n    static ngAcceptInputType_nzHideAdd: BooleanInput;\n    static ngAcceptInputType_nzHideAll: BooleanInput;\n    static ngAcceptInputType_nzCentered: BooleanInput;\n    static ngAcceptInputType_nzLinkRouter: BooleanInput;\n    static ngAcceptInputType_nzLinkExact: BooleanInput;\n    static ngAcceptInputType_nzSelectedIndex: NumberInput;\n    get nzSelectedIndex(): number | null;\n    set nzSelectedIndex(value: null | number);\n    nzTabPosition: NzTabPosition;\n    nzTabBarExtraContent?: TemplateRef<void>;\n    nzCanDeactivate: NzTabsCanDeactivateFn | null;\n    nzAddIcon: string | TemplateRef<NzSafeAny>;\n    nzTabBarStyle: {\n        [key: string]: string;\n    } | null;\n    nzType: NzTabType;\n    nzSize: NzSizeLDSType;\n    nzAnimated: NzAnimatedInterface | boolean;\n    nzTabBarGutter?: number;\n    nzHideAdd: boolean;\n    nzCentered: boolean;\n    nzHideAll: boolean;\n    nzLinkRouter: boolean;\n    nzLinkExact: boolean;\n    readonly nzSelectChange: EventEmitter<NzTabChangeEvent>;\n    readonly nzSelectedIndexChange: EventEmitter<number>;\n    readonly nzTabListScroll: EventEmitter<NzTabScrollEvent>;\n    readonly nzClose: EventEmitter<{\n        index: number;\n    }>;\n    readonly nzAdd: EventEmitter<void>;\n    get position(): NzTabPositionMode;\n    get addable(): boolean;\n    get closable(): boolean;\n    get line(): boolean;\n    get inkBarAnimated(): boolean;\n    get tabPaneAnimated(): boolean;\n    allTabs: QueryList<NzTabComponent>;\n    tabNavBarRef: NzTabNavBarComponent;\n    tabs: QueryList<NzTabComponent>;\n    dir: Direction;\n    private readonly tabSetId;\n    private destroy$;\n    private indexToSelect;\n    private selectedIndex;\n    private tabLabelSubscription;\n    private tabsSubscription;\n    private canDeactivateSubscription;\n    constructor(nzConfigService: NzConfigService, cdr: ChangeDetectorRef, directionality: Directionality, router: Router);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    ngAfterContentInit(): void;\n    ngAfterContentChecked(): void;\n    onClose(index: number, e: MouseEvent): void;\n    onAdd(): void;\n    private clampTabIndex;\n    private createChangeEvent;\n    private subscribeToTabLabels;\n    private subscribeToAllTabChanges;\n    canDeactivateFun(pre: number, next: number): Observable<boolean>;\n    clickNavItem(tab: NzTabComponent, index: number, e: MouseEvent): void;\n    private isRouterLinkClickEvent;\n    contextmenuNavItem(tab: NzTabComponent, e: MouseEvent): void;\n    setSelectedIndex(index: number): void;\n    getTabIndex(tab: NzTabComponent, index: number): number | null;\n    getTabContentId(i: number): string;\n    private setUpRouter;\n    private updateRouterActive;\n    private findShouldActiveTabIndex;\n    private isLinkActive;\n    private getTabContentMarginValue;\n    getTabContentMarginLeft(): string;\n    getTabContentMarginRight(): string;\n}\n"]}