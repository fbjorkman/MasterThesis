{"version":3,"file":"drawer.component.d.ts","sources":["drawer.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport { FocusTrap, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayKeyboardDispatcher, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortalOutlet, TemplatePortal } from '@angular/cdk/portal';\nimport { AfterViewInit, ChangeDetectorRef, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef, Type, ViewContainerRef } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { NzConfigKey, NzConfigService } from 'ng-zorro-antd/core/config';\nimport { BooleanInput, NgStyleInterface, NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { NzDrawerOptionsOfComponent, NzDrawerPlacement } from './drawer-options';\nimport { NzDrawerRef } from './drawer-ref';\nexport declare const DRAWER_ANIMATE_DURATION = 300;\nexport declare class NzDrawerComponent<T = NzSafeAny, R = NzSafeAny, D = NzSafeAny> extends NzDrawerRef<T, R> implements OnInit, OnDestroy, AfterViewInit, OnChanges, NzDrawerOptionsOfComponent {\n    private cdr;\n    private document;\n    nzConfigService: NzConfigService;\n    private renderer;\n    private overlay;\n    private injector;\n    private changeDetectorRef;\n    private focusTrapFactory;\n    private viewContainerRef;\n    private overlayKeyboardDispatcher;\n    private directionality;\n    readonly _nzModuleName: NzConfigKey;\n    static ngAcceptInputType_nzClosable: BooleanInput;\n    static ngAcceptInputType_nzMaskClosable: BooleanInput;\n    static ngAcceptInputType_nzMask: BooleanInput;\n    static ngAcceptInputType_nzNoAnimation: BooleanInput;\n    static ngAcceptInputType_nzKeyboard: BooleanInput;\n    static ngAcceptInputType_nzCloseOnNavigation: BooleanInput;\n    nzContent: TemplateRef<{\n        $implicit: D;\n        drawerRef: NzDrawerRef<R>;\n    }> | Type<T>;\n    nzCloseIcon: string | TemplateRef<void>;\n    nzClosable: boolean;\n    nzMaskClosable: boolean;\n    nzMask: boolean;\n    nzCloseOnNavigation: boolean;\n    nzNoAnimation: boolean;\n    nzKeyboard: boolean;\n    nzTitle?: string | TemplateRef<{}>;\n    nzFooter?: string | TemplateRef<{}>;\n    nzPlacement: NzDrawerPlacement;\n    nzMaskStyle: NgStyleInterface;\n    nzBodyStyle: NgStyleInterface;\n    nzWrapClassName?: string;\n    nzWidth: number | string;\n    nzHeight: number | string;\n    nzZIndex: number;\n    nzOffsetX: number;\n    nzOffsetY: number;\n    private componentInstance;\n    set nzVisible(value: boolean);\n    get nzVisible(): boolean;\n    readonly nzOnViewInit: EventEmitter<void>;\n    readonly nzOnClose: EventEmitter<MouseEvent>;\n    readonly nzVisibleChange: EventEmitter<boolean>;\n    drawerTemplate: TemplateRef<void>;\n    bodyPortalOutlet?: CdkPortalOutlet;\n    contentFromContentChild?: TemplateRef<NzSafeAny>;\n    private destroy$;\n    previouslyFocusedElement?: HTMLElement;\n    placementChanging: boolean;\n    placementChangeTimeoutId: number;\n    nzContentParams?: D;\n    overlayRef?: OverlayRef | null;\n    portal?: TemplatePortal;\n    focusTrap?: FocusTrap;\n    isOpen: boolean;\n    inAnimation: boolean;\n    templateContext: {\n        $implicit: D | undefined;\n        drawerRef: NzDrawerRef<R>;\n    };\n    get offsetTransform(): string | null;\n    get transform(): string | null;\n    get width(): string | null;\n    get height(): string | null;\n    get isLeftOrRight(): boolean;\n    nzAfterOpen: Subject<void>;\n    nzAfterClose: Subject<R>;\n    get afterOpen(): Observable<void>;\n    get afterClose(): Observable<R>;\n    isTemplateRef(value: {}): boolean;\n    nzDirection?: Direction;\n    dir: Direction;\n    constructor(cdr: ChangeDetectorRef, document: NzSafeAny, nzConfigService: NzConfigService, renderer: Renderer2, overlay: Overlay, injector: Injector, changeDetectorRef: ChangeDetectorRef, focusTrapFactory: FocusTrapFactory, viewContainerRef: ViewContainerRef, overlayKeyboardDispatcher: OverlayKeyboardDispatcher, directionality: Directionality);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    private getAnimationDuration;\n    private triggerPlacementChangeCycleOnce;\n    close(result?: R): void;\n    open(): void;\n    getContentComponent(): T | null;\n    closeClick(): void;\n    maskClick(): void;\n    private attachBodyContent;\n    private attachOverlay;\n    private disposeOverlay;\n    private getOverlayConfig;\n    private updateOverlayStyle;\n    private updateBodyOverflow;\n    savePreviouslyFocusedElement(): void;\n    private trapFocus;\n    private restoreFocus;\n}\n"]}